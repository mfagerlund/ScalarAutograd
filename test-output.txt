
> scalar-autograd@0.1.8 test
> vitest run --globals


[1m[46m RUN [49m[22m [36mv3.2.4 [39m[90mC:/Dev/ScalarAutograd[39m

[90mstdout[2m | test/kernel-reuse/graph-canonicalization.spec.ts[2m > [22m[2mGraph Canonicalization[2m > [22m[2mshould match distance constraint graphs
[22m[39mDistance constraint signature: 0g,1g,2g,3g|n9:(-,2g,0g);n8:(*,n9,n9);n11:(-,3g,1g);n10:(*,n11,n11);n7:(+,n8,n10);n6:(sqrt,n7);n5:(-,n6,4)

[90mstdout[2m | test/kernel-reuse/graph-canonicalization.spec.ts[2m > [22m[2mGraph Canonicalization[2m > [22m[2mshould match multiple constraints with different constants
[22m[39mDistance constraint signature: 0g,1g,2g,3g|n11:(-,2g,0g);n10:(square,n11);n13:(-,3g,1g);n12:(square,n13);n9:(+,n10,n12);n8:(sqrt,n9);n7:(-,n8,6)

[90mstdout[2m | test/mesh-pattern-bug.spec.ts[2m > [22m[2mMesh Pattern Bug[2m > [22m[2mshould handle cross product and dot product pattern
[22m[39m
=== MESH PATTERN TEST ===


 [31m❯[39m test/kernel-reuse/graph-canonicalization.spec.ts [2m([22m[2m16 tests[22m[2m | [22m[31m3 failed[39m[2m)[22m[32m 97[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould match identical graph structures[32m 9[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould distinguish different operations[32m 5[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould distinguish different topologies[32m 3[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould match same topology with different inputs[32m 1[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould match distance constraint graphs[32m 7[2mms[22m[39m
[31m   [31m×[31m Graph Canonicalization[2m > [22mshould match commutative reorderings: a+b == b+a[39m[32m 47[2mms[22m[39m
[31m     → expected '0g,1g|n2:(+,0g,1g)' to be '0g,1g|n2:(+,1g,0g)' // Object.is equality[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould flatten nested additions: (a+b)+c == a+b+c[32m 1[2mms[22m[39m
[31m   [31m×[31m Graph Canonicalization[2m > [22mshould match cos(a)+sin(b) == sin(b)+cos(a)[39m[32m 7[2mms[22m[39m
[31m     → expected '0g,1g|n3:(cos,0g);n4:(sin,1g);n2:(+,n…' to be '0g,1g|n3:(sin,1g);n4:(cos,0g);n2:(+,n…' // Object.is equality[39m
[31m   [31m×[31m Graph Canonicalization[2m > [22mshould handle single node graph[39m[32m 3[2mms[22m[39m
[31m     → expected '0g|' to be '0g|0g' // Object.is equality[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould distinguish gradient requirements[32m 3[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould normalize square: pow(x,2) -> square(x)[32m 1[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould NOT normalize pow with non-constant exponent[32m 1[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould match graphs with different constant values (same structure)[32m 2[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould distinguish genuinely different structures[32m 1[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould distinguish different topologies even with same operations[32m 1[2mms[22m[39m
   [32m✓[39m Graph Canonicalization[2m > [22mshould match multiple constraints with different constants[32m 2[2mms[22m[39m
 [31m❯[39m test/mesh-pattern-bug.spec.ts [2m([22m[2m1 test[22m[2m | [22m[31m1 failed[39m[2m)[22m[32m 48[2mms[22m[39m
[31m   [31m×[31m Mesh Pattern Bug[2m > [22mshould handle cross product and dot product pattern[39m[32m 41[2mms[22m[39m
[31m     → Division by zero or near-zero encountered in div: denominator=1.3877787807814457e-17[39m
[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould be zero for a perfect plane
[22m[39mPlane energy: 0.000000e+0

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould be zero for a perfect hinge (two planes)
[22m[39mHinge energy: 0.000000e+0

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould have non-zero energy on perturbed sphere
[22m[39mInitial perturbed energy: 1.438e+0

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould have non-zero energy on perturbed sphere
[22m[39mPerturbed sphere E^P: 3.424e+1

[90mstdout[2m | demos/developable-sphere/test/planeAlignment.test.ts[2m > [22m[2mDifferentiablePlaneAlignment - Compiled vs Uncompiled[2m > [22m[2mshould produce identical residuals (compiled vs uncompiled)
[22m[39m
Test mesh: 42 vertices, 80 faces
Uncompiled residuals: 42 values
Sample residuals: [7.292e-2, 7.292e-2, 7.292e-2, 7.292e-2, 7.292e-2]
[CompiledFunctions] Compiling 42 functions...
[CompiledFunctions] Processing function 0/42
[GraphCanonicalizerNoSort] Total: 28ms | Phase1(discover): 23ms | Phase2(assign): 1ms | Phase3(expr): 5ms [traversal: 2ms, stringBuild: 2ms] | Phase4(build): 0ms | Nodes: 783 | NodeExprs: 569 | getNodeId calls: 1087, cacheHits: 382 (35.1%), keyLength: 10978
[KernelPool] Canonicalization took 30ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 1)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,6g,0g);n139:(square,n136);n141:(-,7g,1g);n140:(square,n141);n143:(-,8g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,3g,0g);n148:(square,n145);n150:(-,4g,1g);n149:(square,n150);n152:(-,...
[GraphCanonicalizerNoSort] Total: 67ms | Phase1(discover): 65ms | Phase2(assign): 0ms | Phase3(expr): 3ms [traversal: 1ms, stringBuild: 2ms] | Phase4(build): 0ms | Nodes: 783 | NodeExprs: 569 | getNodeId calls: 1087, cacheHits: 382 (35.1%), keyLength: 10978
[KernelPool] Canonicalization took 68ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 3)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,3g,0g);n139:(square,n136);n141:(-,4g,1g);n140:(square,n141);n143:(-,5g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,6g,0g);n148:(square,n145);n150:(-,7g,1g);n149:(square,n150);n152:(-,...
[GraphCanonicalizerNoSort] Total: 19ms | Phase1(discover): 17ms | Phase2(assign): 0ms | Phase3(expr): 2ms [traversal: 1ms, stringBuild: 1ms] | Phase4(build): 0ms | Nodes: 1001 | NodeExprs: 731 | getNodeId calls: 1414, cacheHits: 518 (36.6%), keyLength: 14202
[KernelPool] Canonicalization took 19ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 20)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n162:(-,0g,15g);n165:(square,n162);n167:(-,1g,16g);n166:(square,n167);n169:(-,2g,17g);n168:(square,n169);n164:(+,n165,n166,n168);n163:(sqrt,n164);n161:(/,n162,n163);n171:(-,12g,15g);n174:(square,n171);n176:(-,13g,16g);n175:(sq...
Compiled: 21 kernels, 2.0x reuse
Compiled residuals: 42 values
Sample residuals: [7.292e-2, 7.292e-2, 7.292e-2, 7.292e-2, 7.292e-2]
✓ Residuals match!


[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould compute quality metrics correctly
[22m[39m
=== Quality Metrics (Sphere) ===
Developability: 0.00%
Estimated regions: 25.5
Quality score: 0.00

[90mstdout[2m | demos/developable-sphere/test/contiguousComparison.test.ts[2m > [22m[2mBimodal vs Contiguous Energy Comparison[2m > [22m[2mshould compare quasi-random bimodal vs contiguous bimodal
[22m[39m
=== BIMODAL (quasi-random split) ===
Initial: 0.0% developable, energy=5.350e+0

 [31m❯[39m demos/developable-sphere/test/contiguousComparison.test.ts [2m([22m[2m1 test[22m[2m | [22m[31m1 failed[39m[2m)[22m[33m 2440[2mms[22m[39m
[31m   [31m×[31m Bimodal vs Contiguous Energy Comparison[2m > [22mshould compare quasi-random bimodal vs contiguous bimodal[39m[33m 2435[2mms[22m[39m
[31m     → Unknown energy type: bimodal. Available: Bimodal Variance (Spatial Midpoint), Covariance (Smallest Eigenvalue), Bimodal Alignment (Random Edge Split), Bimodal Alignment (Ridge Detection), Bimodal Alignment (Spatial Midpoint), Bounding Box Spread, Combinatorial (E^P), Contiguous Bimodal Variance, Eigenvalue Proxy (Trace - Frobenius), Fast Covariance (SGD)[39m
[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould run multiple iterations and reduce energy
[22m[39m
=== Eigenvalue Proxy Energy Test ===
Initial eigen-proxy energy: 2.932e+0
Initial variance: 3.688e+1
Using Eigenvalue Proxy (Trace - Frobenius) energy (compiled)...
[CompiledFunctions] Compiling 162 functions...
[CompiledFunctions] Processing 50/162 (30%)
[GraphCanonicalizerNoSort] Total: 14ms | Phase1(discover): 13ms | Phase2(assign): 0ms | Phase3(expr): 1ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 394 | NodeExprs: 263 | getNodeId calls: 528, cacheHits: 167 (31.6%), keyLength: 5036
[KernelPool] Canonicalization took 14ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 3)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n98:(-,4g,1g);n99:(-,8g,2g);n97:(*,n98,n99);n101:(-,5g,2g);n102:(-,7g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,6g,0g);n108:(*,n101,n109);n111:(-,3g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(square,n107);n114:...

[90mstdout[2m | demos/developable-sphere/test/planeAlignment.test.ts[2m > [22m[2mDifferentiablePlaneAlignment - Compiled vs Uncompiled[2m > [22m[2mshould produce identical gradients (compiled vs uncompiled)
[22m[39m
Test mesh: 42 vertices, 80 faces
Uncompiled energy: 2.366761e+0
Uncompiled gradient norm: 4.498645e+0
Sample gradients: [5.079e-1, -8.540e-1, 1.227e-2, -5.097e-1, -7.950e-1]
[CompiledFunctions] Compiling 42 functions...
[CompiledFunctions] Processing function 0/42
[GraphCanonicalizerNoSort] Total: 26ms | Phase1(discover): 1ms | Phase2(assign): 0ms | Phase3(expr): 25ms [traversal: 1ms, stringBuild: 24ms] | Phase4(build): 0ms | Nodes: 783 | NodeExprs: 569 | getNodeId calls: 1087, cacheHits: 382 (35.1%), keyLength: 10978
[KernelPool] Canonicalization took 26ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 2)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,3g,0g);n139:(square,n136);n141:(-,4g,1g);n140:(square,n141);n143:(-,5g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,6g,0g);n148:(square,n145);n150:(-,7g,1g);n149:(square,n150);n152:(-,...
[GraphCanonicalizerNoSort] Total: 21ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 21ms [traversal: 1ms, stringBuild: 20ms] | Phase4(build): 0ms | Nodes: 783 | NodeExprs: 569 | getNodeId calls: 1087, cacheHits: 382 (35.1%), keyLength: 10978
[KernelPool] Canonicalization took 22ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 4)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,3g,0g);n139:(square,n136);n141:(-,4g,1g);n140:(square,n141);n143:(-,5g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,6g,0g);n148:(square,n145);n150:(-,7g,1g);n149:(square,n150);n152:(-,...
[GraphCanonicalizerNoSort] Total: 87ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 86ms [traversal: 77ms, stringBuild: 9ms] | Phase4(build): 0ms | Nodes: 1001 | NodeExprs: 731 | getNodeId calls: 1414, cacheHits: 518 (36.6%), keyLength: 14157
[KernelPool] Canonicalization took 87ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 6)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n162:(-,0g,6g);n165:(square,n162);n167:(-,1g,7g);n166:(square,n167);n169:(-,2g,8g);n168:(square,n169);n164:(+,n165,n166,n168);n163:(sqrt,n164);n161:(/,n162,n163);n171:(-,12g,6g);n174:(square,n171);n176:(-,13g,7g);n175:(square,...
Compiled: 21 kernels, 2.0x reuse
Compiled energy: 2.366761e+0
Compiled gradient norm: 4.498645e+0
Sample gradients: [5.079e-1, -8.540e-1, 1.227e-2, -5.097e-1, -7.950e-1]

Using evaluateSumWithGradient:
Energy: 2.366761e+0
Sample gradients: [5.079e-1, -8.540e-1, 1.227e-2, -5.097e-1, -7.950e-1]

Max gradient difference (Jacobian sum): 7.772e-16
Relative gradient difference: 1.728e-16

❌ BUG DETECTED: Gradients do not match!
   This test documents the compilation bug where energies are identical
   but gradients differ significantly between compiled and uncompiled versions.


 [32m✓[39m demos/developable-sphere/test/planeAlignment.test.ts [2m([22m[2m2 tests[22m[2m)[22m[33m 4068[2mms[22m[39m
   [33m[2m✓[22m[39m DifferentiablePlaneAlignment - Compiled vs Uncompiled[2m > [22mshould produce identical residuals (compiled vs uncompiled) [33m 2560[2mms[22m[39m
   [33m[2m✓[22m[39m DifferentiablePlaneAlignment - Compiled vs Uncompiled[2m > [22mshould produce identical gradients (compiled vs uncompiled) [33m 1502[2mms[22m[39m
[90mstdout[2m | test/ui-exact-match.spec.ts[2m > [22m[2mUI Exact Match Test[2m > [22m[2mshould match UI behavior exactly
[22m[39m
=== EXACT UI MATCH TEST ===
Sphere: 642 vertices, 1280 faces
Initial: 0 hinges, 642 seams
Initial developable: 0.0%
Using Bimodal Variance (Spatial Midpoint) energy (compiled)...
[CompiledFunctions] Compiling 642 functions...
[GraphCanonicalizerNoSort] Total: 34ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 33ms [traversal: 0ms, stringBuild: 33ms] | Phase4(build): 0ms | Nodes: 308 | NodeExprs: 202 | getNodeId calls: 380, cacheHits: 104 (27.4%), keyLength: 3840
[KernelPool] Canonicalization took 34ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 3)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n86:(-,4g,1g);n87:(-,8g,2g);n85:(*,n86,n87);n89:(-,5g,2g);n90:(-,7g,1g);n88:(*,n89,n90);n84:(-,n85,n88);n93:(square,n84);n97:(-,6g,0g);n96:(*,n89,n97);n99:(-,3g,0g);n98:(*,n99,n87);n95:(-,n96,n98);n94:(square,n95);n102:(*,n99,n90);n103:(*...

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould run multiple iterations and reduce energy
[22m[39m[CompiledFunctions] Processing 100/162 (61%)
[GraphCanonicalizerNoSort] Total: 48ms | Phase1(discover): 26ms | Phase2(assign): 0ms | Phase3(expr): 22ms [traversal: 0ms, stringBuild: 22ms] | Phase4(build): 0ms | Nodes: 454 | NodeExprs: 303 | getNodeId calls: 611, cacheHits: 198 (32.4%), keyLength: 5878
[KernelPool] Canonicalization took 49ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 19)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n107:(-,10g,1g);n108:(-,8g,2g);n106:(*,n107,n108);n110:(-,11g,2g);n111:(-,7g,1g);n109:(*,n110,n111);n105:(-,n106,n109);n114:(square,n105);n118:(-,6g,0g);n117:(*,n110,n118);n120:(-,9g,0g);n119:(*,n120,n108);n116:(-,n117,n119);n...

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould run multiple iterations and reduce energy
[22m[39m[CompiledFunctions] Processing 150/162 (92%)

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould reduce energy during optimization
[22m[39m
=== Combinatorial Energy Optimization ===
Initial E^P: 5.088e+1
Initial developability: 0.0% (25.5 regions)
Using Bimodal Variance (Spatial Midpoint) energy (compiled)...
[CompiledFunctions] Compiling 162 functions...
[CompiledFunctions] Processing 50/162 (30%)
[GraphCanonicalizerNoSort] Total: 28ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 1ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 27ms | Nodes: 308 | NodeExprs: 202 | getNodeId calls: 380, cacheHits: 104 (27.4%), keyLength: 3840
[KernelPool] Canonicalization took 28ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 5)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n86:(-,4g,1g);n87:(-,8g,2g);n85:(*,n86,n87);n89:(-,5g,2g);n90:(-,7g,1g);n88:(*,n89,n90);n84:(-,n85,n88);n93:(square,n84);n97:(-,6g,0g);n96:(*,n89,n97);n99:(-,3g,0g);n98:(*,n99,n87);n95:(-,n96,n98);n94:(square,n95);n102:(*,n99,n90);n103:(*...
[GraphCanonicalizerNoSort] Total: 21ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 21ms [traversal: 19ms, stringBuild: 2ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4604
[KernelPool] Canonicalization took 22ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 8)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,5g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,4g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,3g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(square...
[GraphCanonicalizerNoSort] Total: 17ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 15ms [traversal: 0ms, stringBuild: 15ms] | Phase4(build): 2ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4604
[KernelPool] Canonicalization took 17ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 8)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,5g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,4g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,3g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(square...

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould run multiple iterations and reduce energy
[22m[39m[CompiledFunctions] Complete: 27 unique kernels, 6.0x reuse

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould reduce energy during optimization
[22m[39m[CompiledFunctions] Processing 100/162 (61%)
[GraphCanonicalizerNoSort] Total: 27ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 27ms [traversal: 0ms, stringBuild: 27ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4617
[KernelPool] Canonicalization took 27ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 18)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,10g,1g);n99:(-,8g,2g);n97:(*,n98,n99);n101:(-,11g,2g);n102:(-,7g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,6g,0g);n108:(*,n101,n109);n111:(-,9g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squa...

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould reduce energy during optimization
[22m[39m[CompiledFunctions] Processing 150/162 (92%)

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould reduce energy during optimization
[22m[39m[GraphCanonicalizerNoSort] Total: 18ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 18ms [traversal: 17ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4621
[KernelPool] Canonicalization took 18ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 26)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,19g,4g);n99:(-,11g,5g);n97:(*,n98,n99);n101:(-,20g,5g);n102:(-,10g,4g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,9g,3g);n108:(*,n101,n109);n111:(-,18g,3g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(s...

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould reduce energy during optimization
[22m[39m[CompiledFunctions] Complete: 27 unique kernels, 6.0x reuse

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould reduce energy during optimization
[22m[39mCompiled: 162 functions → 27 kernels, 6.0x reuse in 1.38s
L-BFGS Optimization
Initial: cost=31.189956, ||∇||=0.00e+0
Chunk complete: 0/50, energy=3.119e+1, reason: Initial gradient below tolerance

[90mstdout[2m | test/ui-exact-match.spec.ts[2m > [22m[2mUI Exact Match Test[2m > [22m[2mshould match UI behavior exactly
[22m[39m[CompiledFunctions] Processing 200/642 (31%)
[GraphCanonicalizerNoSort] Total: 10ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 0ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 9ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4604
[KernelPool] Canonicalization took 10ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 12)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,5g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,4g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,3g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(square...

 [32m✓[39m test/CircleFormation.comparison.spec.ts [2m([22m[2m1 test[22m[2m)[22m[33m 3985[2mms[22m[39m
   [33m[2m✓[22m[39m Circle Formation - All Optimizers Comparison[2m > [22mshould compare NonlinearLeastSquares, SGD, Adam, and AdamW on circle fitting [33m 3979[2mms[22m[39m
[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould run multiple iterations and reduce energy
[22m[39mCompiled: 162 functions → 27 kernels, 6.0x reuse in 1.45s
L-BFGS Optimization
Initial: cost=2.932296, ||∇||=1.11e+1
Iteration 1: cost=2.173004, ||∇||=9.46e+0, α=0.0625, history=1
Iteration 2: cost=0.933075, ||∇||=5.21e+0, α=1.0000, history=2
Iteration 3: cost=0.516572, ||∇||=3.60e+0, α=1.0000, history=3
Iteration 4: cost=0.339762, ||∇||=2.19e+0, α=1.0000, history=4
Iteration 5: cost=0.250490, ||∇||=1.80e+0, α=1.0000, history=5
Iteration 6: cost=0.169509, ||∇||=1.85e+0, α=1.0000, history=6
Iteration 7: cost=0.131493, ||∇||=1.80e+0, α=1.0000, history=7
Iteration 8: cost=0.086281, ||∇||=9.41e-1, α=1.0000, history=8
Iteration 9: cost=0.071623, ||∇||=7.93e-1, α=1.0000, history=9
Iteration 10: cost=0.063286, ||∇||=8.53e-1, α=1.0000, history=10
Iteration 11: cost=0.056261, ||∇||=6.55e-1, α=1.0000, history=10
Iteration 12: cost=0.048760, ||∇||=6.84e-1, α=1.0000, history=10
Iteration 13: cost=0.039862, ||∇||=7.85e-1, α=1.0000, history=10
Iteration 14: cost=0.030351, ||∇||=6.33e-1, α=1.0000, history=10
Iteration 15: cost=0.022574, ||∇||=5.08e-1, α=1.0000, history=10
Iteration 16: cost=0.017456, ||∇||=4.48e-1, α=1.0000, history=10
Iteration 17: cost=0.013849, ||∇||=3.37e-1, α=1.0000, history=10
Iteration 18: cost=0.010057, ||∇||=3.15e-1, α=1.0000, history=10
Iteration 19: cost=0.008405, ||∇||=4.70e-1, α=1.0000, history=10
Iteration 20: cost=0.006829, ||∇||=2.51e-1, α=1.0000, history=10
Iteration 21: cost=0.006137, ||∇||=2.41e-1, α=1.0000, history=10
Iteration 22: cost=0.005390, ||∇||=1.94e-1, α=1.0000, history=10
Iteration 23: cost=0.004752, ||∇||=1.80e-1, α=1.0000, history=10
Iteration 24: cost=0.004386, ||∇||=1.35e-1, α=1.0000, history=10
Iteration 25: cost=0.004077, ||∇||=1.23e-1, α=1.0000, history=10
Iteration 26: cost=0.003711, ||∇||=1.64e-1, α=1.0000, history=10
Iteration 27: cost=0.003349, ||∇||=1.39e-1, α=1.0000, history=10
Iteration 28: cost=0.003038, ||∇||=1.10e-1, α=1.0000, history=10
Iteration 29: cost=0.002688, ||∇||=1.24e-1, α=1.0000, history=10
Iteration 30: cost=0.002438, ||∇||=1.54e-1, α=1.0000, history=10
Iteration 31: cost=0.002224, ||∇||=9.62e-2, α=1.0000, history=10
Iteration 32: cost=0.002009, ||∇||=9.17e-2, α=1.0000, history=10
Iteration 33: cost=0.001866, ||∇||=8.96e-2, α=1.0000, history=10
Iteration 34: cost=0.001692, ||∇||=1.11e-1, α=1.0000, history=10
Iteration 35: cost=0.001551, ||∇||=7.46e-2, α=1.0000, history=10
Iteration 36: cost=0.001450, ||∇||=6.87e-2, α=1.0000, history=10
Iteration 37: cost=0.001323, ||∇||=7.44e-2, α=1.0000, history=10
Iteration 38: cost=0.001179, ||∇||=1.05e-1, α=1.0000, history=10
Iteration 39: cost=0.001055, ||∇||=7.07e-2, α=1.0000, history=10
Iteration 40: cost=0.000956, ||∇||=6.35e-2, α=1.0000, history=10
Iteration 41: cost=0.000865, ||∇||=8.81e-2, α=1.0000, history=10
Iteration 42: cost=0.000779, ||∇||=8.61e-2, α=1.0000, history=10
Iteration 43: cost=0.000701, ||∇||=6.42e-2, α=1.0000, history=10
Iteration 44: cost=0.000634, ||∇||=5.53e-2, α=1.0000, history=10
Iteration 45: cost=0.000565, ||∇||=6.33e-2, α=1.0000, history=10
Iteration 46: cost=0.000494, ||∇||=6.73e-2, α=1.0000, history=10
Iteration 47: cost=0.000450, ||∇||=4.91e-2, α=1.0000, history=10
Iteration 48: cost=0.000417, ||∇||=4.32e-2, α=1.0000, history=10
Iteration 49: cost=0.000365, ||∇||=4.90e-2, α=1.0000, history=10
Iteration 50: cost=0.000341, ||∇||=9.76e-2, α=1.0000, history=10
Chunk complete: 50/50, energy=3.412e-4, reason: Maximum iterations reached

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial Energy (E^P)[2m > [22m[2mshould reduce energy during optimization
[22m[39mFinal E^P: 5.088e+1
Final developability: 0.0% (25.5 regions)
Quality improvement: 0.00 → 0.00

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould be zero for a perfect plane
[22m[39mPlane E^λ: 2.705017e-3

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould be zero for a perfect hinge
[22m[39mHinge E^λ: 2.705017e-3

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould run multiple iterations and reduce energy
[22m[39m
Final eigen-proxy energy: 3.412e-4
Final variance: 1.088e+1
Iterations: 50
Convergence: Maximum iterations reached

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mFull energy function
[22m[39m
=== TESTING: Full DifferentiablePlaneAlignment ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[GraphCanonicalizerNoSort] Total: 76ms | Phase1(discover): 1ms | Phase2(assign): 0ms | Phase3(expr): 74ms [traversal: 2ms, stringBuild: 72ms] | Phase4(build): 0ms | Nodes: 783 | NodeExprs: 569 | getNodeId calls: 1087, cacheHits: 382 (35.1%), keyLength: 10978
[KernelPool] Canonicalization took 78ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 1)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,6g,0g);n139:(square,n136);n141:(-,7g,1g);n140:(square,n141);n143:(-,8g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,15g,0g);n148:(square,n145);n150:(-,16g,1g);n149:(square,n150);n152:(...
Max gradient diff: 5.551115e-16
✅ PASS - Gradients match!

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mJust the normals part
[22m[39m
=== TESTING: Just normals computation ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 0.000000e+0
✅ PASS - Gradients match!

[90mstdout[2m | test/ui-exact-match.spec.ts[2m > [22m[2mUI Exact Match Test[2m > [22m[2mshould match UI behavior exactly
[22m[39m[CompiledFunctions] Processing 400/642 (62%)

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mJust cross products
[22m[39m
=== TESTING: Just cross products ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[GraphCanonicalizerNoSort] Total: 41ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 40ms [traversal: 0ms, stringBuild: 40ms] | Phase4(build): 0ms | Nodes: 345 | NodeExprs: 253 | getNodeId calls: 501, cacheHits: 185 (36.9%), keyLength: 4799
[KernelPool] Canonicalization took 41ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 5)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n64:(-,17g,11g);n65:(-,6g,9g);n63:(*,n64,n65);n67:(-,15g,9g);n68:(-,8g,11g);n66:(*,n67,n68);n62:(-,n63,n66);n74:(-,16g,10g);n73:(*,n74,n68);n76:(-,7g,10g);n75:(*,n64,n76);n72:(-,n73,n75);n71:(square,n72);n77:(square,n62);n80:(*,n67,n76);n...
Max gradient diff: 1.776357e-15
✅ PASS - Gradients match!

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould have non-zero energy on perturbed sphere
[22m[39mPerturbed sphere E^λ: 8.337e+1

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mCross products WITH separation weighting
[22m[39m
=== TESTING: Cross products with separation ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 3.552714e-15
✅ PASS - Gradients match!

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mUp to normalized plane normal
[22m[39m
=== TESTING: Normalized plane normal ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 7.119148e-16
✅ PASS - Gradients match!

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould compute intrinsic variant correctly
[22m[39mE^λ (standard): 2.147e+1
E^λ (intrinsic): 4.522e+0

[90mstdout[2m | test/ui-exact-match.spec.ts[2m > [22m[2mUI Exact Match Test[2m > [22m[2mshould match UI behavior exactly
[22m[39m[GraphCanonicalizerNoSort] Total: 13ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 13ms [traversal: 13ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4617
[KernelPool] Canonicalization took 13ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 29)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,10g,1g);n99:(-,8g,2g);n97:(*,n98,n99);n101:(-,11g,2g);n102:(-,7g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,6g,0g);n108:(*,n101,n109);n111:(-,9g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squa...

[90mstdout[2m | test/variance-developability.spec.ts[2m > [22m[2mVariance Developability Test[2m > [22m[2mshould increase developability percentage
[22m[39m
=== VARIANCE DEVELOPABILITY TEST ===
Sphere: 162 vertices, 320 faces
Initial: 0 hinges, 162 seams
Initial developable: 0.0%
Using Bimodal Variance (Spatial Midpoint) energy (compiled)...
[CompiledFunctions] Compiling 162 functions...
[CompiledFunctions] Processing 50/162 (30%)
[GraphCanonicalizerNoSort] Total: 20ms | Phase1(discover): 19ms | Phase2(assign): 0ms | Phase3(expr): 1ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 308 | NodeExprs: 202 | getNodeId calls: 380, cacheHits: 104 (27.4%), keyLength: 3840
[KernelPool] Canonicalization took 20ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 2)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n86:(-,4g,1g);n87:(-,8g,2g);n85:(*,n86,n87);n89:(-,5g,2g);n90:(-,7g,1g);n88:(*,n89,n90);n84:(-,n85,n88);n93:(square,n84);n97:(-,6g,0g);n96:(*,n89,n97);n99:(-,3g,0g);n98:(*,n99,n87);n95:(-,n96,n98);n94:(square,n95);n102:(*,n99,n90);n103:(*...
[GraphCanonicalizerNoSort] Total: 14ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 14ms [traversal: 0ms, stringBuild: 14ms] | Phase4(build): 0ms | Nodes: 308 | NodeExprs: 202 | getNodeId calls: 380, cacheHits: 104 (27.4%), keyLength: 3840
[KernelPool] Canonicalization took 14ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 4)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n86:(-,4g,1g);n87:(-,8g,2g);n85:(*,n86,n87);n89:(-,5g,2g);n90:(-,7g,1g);n88:(*,n89,n90);n84:(-,n85,n88);n93:(square,n84);n97:(-,6g,0g);n96:(*,n89,n97);n99:(-,3g,0g);n98:(*,n99,n87);n95:(-,n96,n98);n94:(square,n95);n102:(*,n99,n90);n103:(*...
[GraphCanonicalizerNoSort] Total: 61ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 61ms [traversal: 1ms, stringBuild: 60ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4604
[KernelPool] Canonicalization took 61ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 8)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,5g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,4g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,3g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(square...

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Compiling 162 functions...
[CompiledFunctions] Processing 50/162 (30%)
[GraphCanonicalizerNoSort] Total: 24ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 24ms [traversal: 24ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 308 | NodeExprs: 202 | getNodeId calls: 380, cacheHits: 104 (27.4%), keyLength: 3840
[KernelPool] Canonicalization took 24ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 5)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n86:(-,4g,1g);n87:(-,8g,2g);n85:(*,n86,n87);n89:(-,5g,2g);n90:(-,7g,1g);n88:(*,n89,n90);n84:(-,n85,n88);n93:(square,n84);n97:(-,6g,0g);n96:(*,n89,n97);n99:(-,3g,0g);n98:(*,n99,n87);n95:(-,n96,n98);n94:(square,n95);n102:(*,n99,n90);n103:(*...

[90mstdout[2m | test/ui-variance-test.spec.ts[2m > [22m[2mUI Variance Energy Test[2m > [22m[2mshould work in async mode like the UI
[22m[39m
=== Testing Variance Energy (UI Mode) ===
Using Bimodal Variance (Spatial Midpoint) energy (compiled)...
[CompiledFunctions] Compiling 162 functions...
[CompiledFunctions] Processing 50/162 (30%)
[GraphCanonicalizerNoSort] Total: 19ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 18ms [traversal: 0ms, stringBuild: 18ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4604
[KernelPool] Canonicalization took 19ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 9)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,5g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,4g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,3g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(square...

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mEnergy accumulation WITHOUT angles
[22m[39m
=== TESTING: Energy accumulation (no angles) ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[GraphCanonicalizerNoSort] Total: 91ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 91ms [traversal: 0ms, stringBuild: 91ms] | Phase4(build): 0ms | Nodes: 491 | NodeExprs: 368 | getNodeId calls: 745, cacheHits: 302 (40.5%), keyLength: 7090
[KernelPool] Canonicalization took 91ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 9)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n75:(-,1g,10g);n76:(-,14g,11g);n74:(*,n75,n76);n78:(-,2g,11g);n79:(-,13g,10g);n77:(*,n78,n79);n73:(-,n74,n77);n82:(square,n73);n86:(-,12g,9g);n85:(*,n78,n86);n88:(-,0g,9g);n87:(*,n88,n76);n84:(-,n85,n87);n83:(square,n84);n91:(*,n88,n79);n...
Max gradient diff: 1.554312e-15
✅ PASS - Gradients match!

[90mstdout[2m | test/variance-developability.spec.ts[2m > [22m[2mVariance Developability Test[2m > [22m[2mshould increase developability percentage
[22m[39m[CompiledFunctions] Processing 100/162 (61%)
[GraphCanonicalizerNoSort] Total: 43ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 43ms [traversal: 0ms, stringBuild: 43ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4622
[KernelPool] Canonicalization took 44ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 16)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,16g,4g);n99:(-,14g,5g);n97:(*,n98,n99);n101:(-,17g,5g);n102:(-,13g,4g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,12g,3g);n108:(*,n101,n109);n111:(-,15g,3g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(...
[GraphCanonicalizerNoSort] Total: 25ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 25ms [traversal: 0ms, stringBuild: 25ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4619
[KernelPool] Canonicalization took 26ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 17)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,14g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,13g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,12g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squ...

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Processing 100/162 (61%)

[90mstdout[2m | test/ui-exact-match.spec.ts[2m > [22m[2mUI Exact Match Test[2m > [22m[2mshould match UI behavior exactly
[22m[39m[CompiledFunctions] Processing 600/642 (93%)
[GraphCanonicalizerNoSort] Total: 56ms | Phase1(discover): 56ms | Phase2(assign): 0ms | Phase3(expr): 1ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4619
[KernelPool] Canonicalization took 56ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 30)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,16g,1g);n99:(-,8g,2g);n97:(*,n98,n99);n101:(-,17g,2g);n102:(-,7g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,6g,0g);n108:(*,n101,n109);n111:(-,15g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squ...

[90mstdout[2m | test/variance-developability.spec.ts[2m > [22m[2mVariance Developability Test[2m > [22m[2mshould increase developability percentage
[22m[39m[CompiledFunctions] Processing 150/162 (92%)
[GraphCanonicalizerNoSort] Total: 71ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 70ms [traversal: 0ms, stringBuild: 70ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4615
[KernelPool] Canonicalization took 71ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 21)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,10g,1g);n99:(-,8g,2g);n97:(*,n98,n99);n101:(-,11g,2g);n102:(-,7g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,6g,0g);n108:(*,n101,n109);n111:(-,9g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squa...

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mEnergy accumulation WITH angles
[22m[39m
=== TESTING: Energy accumulation (with angles) ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 1.998401e-15
✅ PASS - Gradients match!

[90mstdout[2m | test/ui-variance-test.spec.ts[2m > [22m[2mUI Variance Energy Test[2m > [22m[2mshould work in async mode like the UI
[22m[39m[CompiledFunctions] Processing 100/162 (61%)
[GraphCanonicalizerNoSort] Total: 45ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 44ms [traversal: 0ms, stringBuild: 44ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4619
[KernelPool] Canonicalization took 45ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 14)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,14g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,13g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,12g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squ...
[GraphCanonicalizerNoSort] Total: 55ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 55ms [traversal: 0ms, stringBuild: 55ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4619
[KernelPool] Canonicalization took 56ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 19)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,16g,1g);n99:(-,8g,2g);n97:(*,n98,n99);n101:(-,17g,2g);n102:(-,7g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,6g,0g);n108:(*,n101,n109);n111:(-,15g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squ...

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould compute max variant correctly
[22m[39mE^λ (standard): 7.149e+1
E^λ (max): 1.195e+1

[90mstdout[2m | test/variance-developability.spec.ts[2m > [22m[2mVariance Developability Test[2m > [22m[2mshould increase developability percentage
[22m[39m[GraphCanonicalizerNoSort] Total: 39ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 39ms [traversal: 0ms, stringBuild: 38ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4619
[KernelPool] Canonicalization took 39ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 27)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,19g,1g);n99:(-,8g,2g);n97:(*,n98,n99);n101:(-,20g,2g);n102:(-,7g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,6g,0g);n108:(*,n101,n109);n111:(-,18g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squ...

[90mstdout[2m | test/variance-developability.spec.ts[2m > [22m[2mVariance Developability Test[2m > [22m[2mshould increase developability percentage
[22m[39m[CompiledFunctions] Complete: 27 unique kernels, 6.0x reuse

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mJUST the angles
[22m[39m
=== TESTING: Just angles ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 9.992007e-16
✅ PASS - Gradients match!

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Processing 150/162 (92%)
[GraphCanonicalizerNoSort] Total: 49ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 49ms [traversal: 0ms, stringBuild: 49ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4622
[KernelPool] Canonicalization took 49ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 24)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,16g,4g);n99:(-,14g,5g);n97:(*,n98,n99);n101:(-,17g,5g);n102:(-,13g,4g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,12g,3g);n108:(*,n101,n109);n111:(-,15g,3g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(...

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mAngles AND one face normal (combined)
[22m[39m
=== TESTING: Angles + one normal ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[GraphCanonicalizerNoSort] Total: 19ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 18ms [traversal: 18ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 358 | NodeExprs: 237 | getNodeId calls: 406, cacheHits: 96 (23.6%), keyLength: 4529
[KernelPool] Canonicalization took 19ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 8)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n95:(-,3g,9g);n98:(square,n95);n100:(-,4g,10g);n99:(square,n100);n102:(-,5g,11g);n101:(square,n102);n97:(+,n98,n99,n101);n96:(sqrt,n97);n94:(/,n95,n96);n104:(-,0g,9g);n107:(square,n104);n109:(-,1g,10g);n108:(square,n109);n111:(-,2g,11g);n...
Max gradient diff: 9.992007e-16
✅ PASS - Gradients match!

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Complete: 27 unique kernels, 6.0x reuse

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould compute quality metrics correctly
[22m[39m
=== Quality Metrics (Covariance) ===
Developability: 44.44%
Estimated regions: 14.1
Quality score: 11.82

[90mstdout[2m | test/ui-exact-match.spec.ts[2m > [22m[2mUI Exact Match Test[2m > [22m[2mshould match UI behavior exactly
[22m[39m[CompiledFunctions] Complete: 30 unique kernels, 21.4x reuse

[90mstdout[2m | test/ui-variance-test.spec.ts[2m > [22m[2mUI Variance Energy Test[2m > [22m[2mshould work in async mode like the UI
[22m[39m[CompiledFunctions] Processing 150/162 (92%)
[GraphCanonicalizerNoSort] Total: 79ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 1ms [traversal: 0ms, stringBuild: 1ms] | Phase4(build): 78ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4607
[KernelPool] Canonicalization took 79ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 21)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,14g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,13g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,12g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squ...
[GraphCanonicalizerNoSort] Total: 48ms | Phase1(discover): 47ms | Phase2(assign): 0ms | Phase3(expr): 1ms [traversal: 0ms, stringBuild: 1ms] | Phase4(build): 0ms | Nodes: 364 | NodeExprs: 239 | getNodeId calls: 451, cacheHits: 126 (27.9%), keyLength: 4607
[KernelPool] Canonicalization took 48ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 23)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n98:(-,7g,1g);n99:(-,14g,2g);n97:(*,n98,n99);n101:(-,8g,2g);n102:(-,13g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,12g,0g);n108:(*,n101,n109);n111:(-,6g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(squ...

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mNormals used in TWO different ways
[22m[39m
=== TESTING: Normals used twice ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[GraphCanonicalizerNoSort] Total: 12ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 12ms [traversal: 0ms, stringBuild: 12ms] | Phase4(build): 0ms | Nodes: 674 | NodeExprs: 482 | getNodeId calls: 908, cacheHits: 302 (33.3%), keyLength: 9317
[KernelPool] Canonicalization took 12ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 7)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n123:(-,9g,6g);n126:(square,n123);n128:(-,10g,7g);n127:(square,n128);n130:(-,11g,8g);n129:(square,n130);n125:(+,n126,n127,n129);n124:(sqrt,n125);n122:(/,n123,n124);n132:(-,15g,6g);n135:(square,n132);n137:(-,16g,7g);n136:(square,n137);n139...
Max gradient diff: 1.332268e-15
✅ PASS - Gradients match!

[90mstdout[2m | test/ui-variance-test.spec.ts[2m > [22m[2mUI Variance Energy Test[2m > [22m[2mshould work in async mode like the UI
[22m[39m[CompiledFunctions] Complete: 27 unique kernels, 6.0x reuse

[90mstdout[2m | test/variance-developability.spec.ts[2m > [22m[2mVariance Developability Test[2m > [22m[2mshould increase developability percentage
[22m[39mCompiled: 162 functions → 27 kernels, 6.0x reuse in 1.87s
  Iter 0: 0.0% developable (+0 hinges), energy=5.160e+0
L-BFGS Optimization
Initial: cost=5.159564, ||∇||=0.00e+0
  Iter 0: 0.0% developable (+0 hinges), energy=5.160e+0
Chunk complete: 0/50, energy=5.160e+0, reason: Initial gradient below tolerance

[90mstdout[2m | test/variance-developability.spec.ts[2m > [22m[2mVariance Developability Test[2m > [22m[2mshould increase developability percentage
[22m[39m
Final result:
  Iterations: 0
  Final energy: 5.160e+0
  Convergence: Initial gradient below tolerance

Final: 0 hinges, 162 seams
Final developable: 0.0%

*** IMPROVEMENT: +0 hinges ***

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mNormals WITHOUT .normalized property
[22m[39m
=== TESTING: Normals without .normalized ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[GraphCanonicalizerNoSort] Total: 66ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 65ms [traversal: 0ms, stringBuild: 65ms] | Phase4(build): 0ms | Nodes: 674 | NodeExprs: 482 | getNodeId calls: 908, cacheHits: 302 (33.3%), keyLength: 9350
[KernelPool] Canonicalization took 66ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 11)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n123:(-,9g,12g);n126:(square,n123);n128:(-,10g,13g);n127:(square,n128);n130:(-,11g,14g);n129:(square,n130);n125:(+,n126,n127,n129);n124:(sqrt,n125);n122:(/,n123,n124);n132:(-,0g,12g);n135:(square,n132);n137:(-,1g,13g);n136:(square,n137);n...
Max gradient diff: 1.332268e-15
✅ PASS - Gradients match!

 [32m✓[39m test/variance-developability.spec.ts [2m([22m[2m1 test[22m[2m)[22m[33m 2763[2mms[22m[39m
   [33m[2m✓[22m[39m Variance Developability Test[2m > [22mshould increase developability percentage [33m 2758[2mms[22m[39m
[90mstdout[2m | test/ui-variance-test.spec.ts[2m > [22m[2mUI Variance Energy Test[2m > [22m[2mshould work in async mode like the UI
[22m[39mCompiled: 162 functions → 27 kernels, 6.0x reuse in 1.85s
L-BFGS Optimization
Initial: cost=5.159564, ||∇||=0.00e+0
Chunk complete: 0/10, energy=5.160e+0, reason: Initial gradient below tolerance

[90mstdout[2m | test/ui-variance-test.spec.ts[2m > [22m[2mUI Variance Energy Test[2m > [22m[2mshould work in async mode like the UI
[22m[39m
Final result:
  Iterations: 0
  Final energy: 5.160e+0
  Convergence: Initial gradient below tolerance

 [32m✓[39m test/ui-variance-test.spec.ts [2m([22m[2m1 test[22m[2m)[22m[33m 2266[2mms[22m[39m
   [33m[2m✓[22m[39m UI Variance Energy Test[2m > [22mshould work in async mode like the UI [33m 2260[2mms[22m[39m
[90mstdout[2m | test/sphere-curvature-analysis.spec.ts[2m > [22m[2mSphere Curvature Analysis[2m > [22m[2mmeasures angle defect at different subdivision levels
[22m[39m
Angle defect on unit spheres (adaptive threshold):

Subdivision 2 (162 verts):
  Mean angle defect: 7.757e-2 rad
  Adaptive threshold: 7.757e-3 rad
  Classification: 0.0% developable
  Total curvature: 12.5664 (expected 12.5664)

Subdivision 3 (642 verts):
  Mean angle defect: 1.957e-2 rad
  Adaptive threshold: 1.957e-3 rad
  Classification: 0.0% developable
  Total curvature: 12.5664 (expected 12.5664)

Subdivision 4 (2562 verts):
  Mean angle defect: 4.905e-3 rad
  Adaptive threshold: 4.905e-4 rad
  Classification: 0.0% developable
  Total curvature: 12.5664 (expected 12.5664)

Subdivision 5 (10242 verts):
  Mean angle defect: 1.227e-3 rad
  Adaptive threshold: 1.227e-4 rad
  Classification: 0.0% developable
  Total curvature: 12.5664 (expected 12.5664)

✓ Adaptive threshold correctly classifies spheres as curved at all subdivisions

[90mstdout[2m | test/sphere-curvature-analysis.spec.ts[2m > [22m[2mSphere Curvature Analysis[2m > [22m[2mcorrectly identifies flat surfaces as developable
[22m[39m
Flat quad mesh:
  Vertices: 4
  Developable: 75.0%

 [31m❯[39m test/sphere-curvature-analysis.spec.ts [2m([22m[2m2 tests[22m[2m | [22m[31m1 failed[39m[2m)[22m[33m 8600[2mms[22m[39m
[31m   [31m×[31m Sphere Curvature Analysis[2m > [22mmeasures angle defect at different subdivision levels[39m[33m 8590[2mms[22m[39m
[31m     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".[39m
   [32m✓[39m Sphere Curvature Analysis[2m > [22mcorrectly identifies flat surfaces as developable[32m 6[2mms[22m[39m
[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mSimplified: remove planeNormal computation
[22m[39m
=== TESTING: No planeNormal ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 9.992007e-16
✅ PASS - Gradients match!

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mOne normal, one angle, with planeNormal
[22m[39m
=== TESTING: Minimal with planeNormal ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 2.123013e-32
✅ PASS - Gradients match!

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mTHREE normals - add to planeNormal
[22m[39m
=== TESTING: Three normals planeNormal ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 0.000000e+0
✅ PASS - Gradients match!

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mUse BOTH n0 and n1 in final energy
[22m[39m
=== TESTING: Both normals in energy ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 2.220446e-16
✅ PASS - Gradients match!

[90mstdout[2m | demos/developable-sphere/test/planeAlignment-diagnostic.test.ts[2m > [22m[2mDifferentiablePlaneAlignment - Gradient Diagnostic[2m > [22m[2mshould show detailed gradient comparison
[22m[39m
=== DIAGNOSTIC TEST ===
Test mesh: 12 vertices, 20 faces

Computing uncompiled gradients...
Compiling...
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Compiled: 12 kernels, 1.0x reuse

Computing compiled gradients...

Energies:
  Uncompiled: 2.4951057062e+0
  Compiled:   2.4951057062e+0
  Difference: 0.000000e+0

Gradient comparison (first 3 vertices):
Vertex | Component | Uncompiled       | Compiled         | Difference      | Rel Diff
-------|-----------|------------------|------------------|-----------------|----------
     0 | x         | -6.1575366337e-1 | -6.1575366337e-1 | -2.220446e-16 | 3.61e-16
     0 | y         | 8.5483195983e-1 | 8.5483195983e-1 | 3.330669e-16 | 3.90e-16
     0 | z         | -7.2397394535e-2 | -7.2397394535e-2 | -2.775558e-17 | 3.83e-16
     1 | x         | -6.5997415043e-1 | -6.5997415043e-1 | -2.220446e-16 | 3.36e-16
     1 | y         | -6.8292536803e-1 | -6.8292536803e-1 | -5.551115e-16 | 8.13e-16
     1 | z         | 1.5983402810e-1 | 1.5983402810e-1 | 5.551115e-17 | 3.47e-16
     2 | x         | 1.5343310298e-1 | 1.5343310298e-1 | 2.775558e-16 | 1.81e-15
     2 | y         | 4.9749955154e-2 | 4.9749955154e-2 | 3.885781e-16 | 7.81e-15
     2 | z         | 1.8920302140e-1 | 1.8920302140e-1 | 0.000000e+0 | 0.00e+0

Worst gradient component:
  Index: 4 (vertex 1, y)
  Uncompiled: -6.8292536803e-1
  Compiled:   -6.8292536803e-1
  Difference: 5.551115e-16
  Relative:   8.128436e-16

Gradient norms:
  Uncompiled: 2.0578354082e+0
  Compiled:   2.0578354082e+0
  Difference: 8.881784e-16
  Relative:   4.316081e-16

=== PERMUTATION CHECK ===
Checking if compiled gradients are just a permutation of uncompiled gradients...
Max difference after sorting: 5.551115e-16
✅ GRADIENTS ARE PERMUTED! The compiled gradients are the correct values but in wrong positions.

Scale check:
  Avg abs(uncompiled): 2.747007e-1
  Avg abs(compiled):   2.747007e-1
  Ratio:               1.000000e+0

Looking for matches between any compiled and uncompiled gradient components...

Perfect matches (< 1e-15): 36 out of 1296 comparisons
Close matches (< 1e-10): 0 out of 1296 comparisons
Expected diagonal matches if identical: 36

=== JACOBIAN CHECK ===
Checking individual residual gradients (first residual only)...

First residual gradient comparison (first 5 components):
Idx | Uncompiled       | Compiled (Jac)   | Difference      | Rel Diff
----|------------------|------------------|-----------------|----------
  0 | -1.8896663387e-1 | -1.8896663387e-1 | 1.110223e-16 | 5.88e-16
  1 | 2.7863968239e-1 | 2.7863968239e-1 | -2.220446e-16 | 7.97e-16
  2 | 1.0356914413e-2 | 1.0356914413e-2 | 1.387779e-17 | 1.34e-15
  3 | 0.0000000000e+0 | 1.0408340856e-17 | 1.040834e-17 | Infinity
  4 | -1.7699913654e-1 | -1.7699913654e-1 | 0.000000e+0 | 0.00e+0

Max Jacobian[0] difference: 2.220446e-16

[90mstdout[2m | demos/developable-sphere/test/bisect-energy.spec.ts[2m > [22m[2mBisect Energy Function[2m > [22m[2mWITHOUT n2
[22m[39m
=== TESTING: No n2 ===
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Max gradient diff: 7.820124e-32
✅ PASS - Gradients match!

 [32m✓[39m demos/developable-sphere/test/bisect-energy.spec.ts [2m([22m[2m16 tests[22m[2m)[22m[33m 3633[2mms[22m[39m
   [33m[2m✓[22m[39m Bisect Energy Function[2m > [22mFull energy function [33m 660[2mms[22m[39m
   [33m[2m✓[22m[39m Bisect Energy Function[2m > [22mCross products WITH separation weighting [33m 366[2mms[22m[39m
   [33m[2m✓[22m[39m Bisect Energy Function[2m > [22mEnergy accumulation WITHOUT angles [33m 304[2mms[22m[39m
   [33m[2m✓[22m[39m Bisect Energy Function[2m > [22mEnergy accumulation WITH angles [33m 428[2mms[22m[39m
[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould reduce energy during optimization
[22m[39m
=== Covariance Energy Optimization ===
Initial E^λ: 1.070e+2
Initial developability: 3.1% (24.7 regions)
Using Bimodal Variance (Spatial Midpoint) energy (compiled)...
[CompiledFunctions] Compiling 162 functions...
[CompiledFunctions] Processing 50/162 (30%)
[GraphCanonicalizerNoSort] Total: 47ms | Phase1(discover): 47ms | Phase2(assign): 0ms | Phase3(expr): 0ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 308 | NodeExprs: 202 | getNodeId calls: 380, cacheHits: 104 (27.4%), keyLength: 3840
[KernelPool] Canonicalization took 47ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 4)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n86:(-,4g,1g);n87:(-,8g,2g);n85:(*,n86,n87);n89:(-,5g,2g);n90:(-,7g,1g);n88:(*,n89,n90);n84:(-,n85,n88);n93:(square,n84);n97:(-,6g,0g);n96:(*,n89,n97);n99:(-,3g,0g);n98:(*,n99,n87);n95:(-,n96,n98);n94:(square,n95);n102:(*,n99,n90);n103:(*...
[GraphCanonicalizerNoSort] Total: 11ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 11ms [traversal: 10ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 308 | NodeExprs: 202 | getNodeId calls: 380, cacheHits: 104 (27.4%), keyLength: 3840
[KernelPool] Canonicalization took 11ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 4)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n86:(-,4g,1g);n87:(-,8g,2g);n85:(*,n86,n87);n89:(-,5g,2g);n90:(-,7g,1g);n88:(*,n89,n90);n84:(-,n85,n88);n93:(square,n84);n97:(-,6g,0g);n96:(*,n89,n97);n99:(-,3g,0g);n98:(*,n99,n87);n95:(-,n96,n98);n94:(square,n95);n102:(*,n99,n90);n103:(*...

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould reduce energy during optimization
[22m[39m[CompiledFunctions] Processing 100/162 (61%)

[90mstdout[2m | demos/developable-sphere/test/planeAlignment-diagnostic.test.ts[2m > [22m[2mDifferentiablePlaneAlignment - Gradient Diagnostic[2m > [22m[2mbypass kernel cache test
[22m[39m
=== BYPASS KERNEL CACHE TEST ===
Test mesh: 12 vertices, 20 faces

Compiling WITH kernel reuse (normal)...
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Compiled: 12 kernels, 1.0x reuse

Compiling AGAIN with fresh parameters (bypasses cache)...
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[GraphCanonicalizerNoSort] Total: 24ms | Phase1(discover): 22ms | Phase2(assign): 0ms | Phase3(expr): 2ms [traversal: 0ms, stringBuild: 1ms] | Phase4(build): 0ms | Nodes: 783 | NodeExprs: 569 | getNodeId calls: 1087, cacheHits: 382 (35.1%), keyLength: 10983
[KernelPool] Canonicalization took 24ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 3)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,12g,0g);n139:(square,n136);n141:(-,13g,1g);n140:(square,n141);n143:(-,14g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,15g,0g);n148:(square,n145);n150:(-,16g,1g);n149:(square,n150);n15...
Compiled: 12 kernels, 1.0x reuse

Gradient comparison:
Idx | Uncompiled       | Compiled1        | Compiled2        | Diff1          | Diff2
----|------------------|------------------|------------------|----------------|----------------
  0 | -6.1575366337e-1 | -6.1575366337e-1 | -6.1575366337e-1 | 2.220446e-16 | 2.220446e-16
  1 | 8.5483195983e-1 | 8.5483195983e-1 | 8.5483195983e-1 | 3.330669e-16 | 3.330669e-16
  2 | -7.2397394535e-2 | -7.2397394535e-2 | -7.2397394535e-2 | 2.775558e-17 | 2.775558e-17
  3 | -6.5997415043e-1 | -6.5997415043e-1 | -6.5997415043e-1 | 2.220446e-16 | 2.220446e-16
  4 | -6.8292536803e-1 | -6.8292536803e-1 | -6.8292536803e-1 | 5.551115e-16 | 5.551115e-16
  5 | 1.5983402810e-1 | 1.5983402810e-1 | 1.5983402810e-1 | 5.551115e-17 | 5.551115e-17
  6 | 1.5343310298e-1 | 1.5343310298e-1 | 1.5343310298e-1 | 2.775558e-16 | 2.775558e-16
  7 | 4.9749955154e-2 | 4.9749955154e-2 | 4.9749955154e-2 | 3.885781e-16 | 3.885781e-16
  8 | 1.8920302140e-1 | 1.8920302140e-1 | 1.8920302140e-1 | 0.000000e+0 | 0.000000e+0

Max diffs:
  Uncompiled vs Compiled1: 5.551115e-16
  Uncompiled vs Compiled2: 5.551115e-16
  Compiled1 vs Compiled2:  0.000000e+0

✓ Both compiled versions match exactly - kernel caching is NOT the issue

 [32m✓[39m demos/developable-sphere/test/planeAlignment-diagnostic.test.ts [2m([22m[2m2 tests[22m[2m)[22m[33m 1544[2mms[22m[39m
   [33m[2m✓[22m[39m DifferentiablePlaneAlignment - Gradient Diagnostic[2m > [22mshould show detailed gradient comparison [33m 839[2mms[22m[39m
   [33m[2m✓[22m[39m DifferentiablePlaneAlignment - Gradient Diagnostic[2m > [22mbypass kernel cache test [33m 671[2mms[22m[39m
[90mstdout[2m | test/ui-exact-match.spec.ts[2m > [22m[2mUI Exact Match Test[2m > [22m[2mshould match UI behavior exactly
[22m[39mCompiled: 642 functions → 30 kernels, 21.4x reuse in 5.92s
  Iter 0: 0.0% developable (+0 hinges)
L-BFGS Optimization
Initial: cost=5.227822, ||∇||=0.00e+0
  Iter 0: 0.0% developable (+0 hinges)
Chunk complete: 0/20, energy=5.228e+0, reason: Initial gradient below tolerance

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould reduce energy during optimization
[22m[39m[CompiledFunctions] Processing 150/162 (92%)

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould reduce energy during optimization
[22m[39m[CompiledFunctions] Complete: 27 unique kernels, 6.0x reuse

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Compiling 162 functions...
[CompiledFunctions] Processing 50/162 (30%)
[GraphCanonicalizerNoSort] Total: 22ms | Phase1(discover): 20ms | Phase2(assign): 0ms | Phase3(expr): 2ms [traversal: 1ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 668 | NodeExprs: 459 | getNodeId calls: 837, cacheHits: 288 (34.4%), keyLength: 8886
[KernelPool] Canonicalization took 22ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 9)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n158:(-,7g,1g);n159:(-,5g,2g);n157:(*,n158,n159);n161:(-,8g,2g);n162:(-,4g,1g);n160:(*,n161,n162);n156:(-,n157,n160);n165:(square,n156);n169:(-,3g,0g);n168:(*,n161,n169);n171:(-,6g,0g);n170:(*,n171,n159);n167:(-,n168,n170);n16...

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould reduce energy during optimization
[22m[39mCompiled: 162 functions → 27 kernels, 6.0x reuse in 1.28s
L-BFGS Optimization
Initial: cost=20.189370, ||∇||=0.00e+0
Chunk complete: 0/50, energy=2.019e+1, reason: Initial gradient below tolerance

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Processing 100/162 (61%)

[90mstdout[2m | test/ui-exact-match.spec.ts[2m > [22m[2mUI Exact Match Test[2m > [22m[2mshould match UI behavior exactly
[22m[39m
Final result:
  Iterations: 0
  Final energy: 5.228e+0
  Convergence: Initial gradient below tolerance

Final: 0 hinges, 642 seams
Final developable: 0.0%
Variance: 8.33e-3

 [32m✓[39m test/ui-exact-match.spec.ts [2m([22m[2m1 test[22m[2m)[22m[33m 9534[2mms[22m[39m
   [33m[2m✓[22m[39m UI Exact Match Test[2m > [22mshould match UI behavior exactly [33m 9528[2mms[22m[39m
[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Processing 150/162 (92%)
[GraphCanonicalizerNoSort] Total: 61ms | Phase1(discover): 50ms | Phase2(assign): 0ms | Phase3(expr): 11ms [traversal: 1ms, stringBuild: 10ms] | Phase4(build): 0ms | Nodes: 668 | NodeExprs: 459 | getNodeId calls: 837, cacheHits: 288 (34.4%), keyLength: 8899
[KernelPool] Canonicalization took 61ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 21)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n158:(-,10g,1g);n159:(-,8g,2g);n157:(*,n158,n159);n161:(-,11g,2g);n162:(-,7g,1g);n160:(*,n161,n162);n156:(-,n157,n160);n165:(square,n156);n169:(-,6g,0g);n168:(*,n161,n169);n171:(-,9g,0g);n170:(*,n171,n159);n167:(-,n168,n170);n...
[GraphCanonicalizerNoSort] Total: 39ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 39ms [traversal: 39ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 668 | NodeExprs: 459 | getNodeId calls: 837, cacheHits: 288 (34.4%), keyLength: 8903
[KernelPool] Canonicalization took 40ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 23)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n158:(-,13g,4g);n159:(-,11g,5g);n157:(*,n158,n159);n161:(-,14g,5g);n162:(-,10g,4g);n160:(*,n161,n162);n156:(-,n157,n160);n165:(square,n156);n169:(-,9g,3g);n168:(*,n161,n169);n171:(-,12g,3g);n170:(*,n171,n159);n167:(-,n168,n170...

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Complete: 27 unique kernels, 6.0x reuse

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCovariance Energy (E^λ)[2m > [22m[2mshould reduce energy during optimization
[22m[39mFinal E^λ: 1.070e+2
Final developability: 3.1% (24.7 regions)
Quality improvement: 0.62 → 0.62

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial vs Covariance Energy Comparison[2m > [22m[2mshould both be zero for perfect plane
[22m[39m
Perfect plane: E^P = 0.000000e+0, E^λ = 2.705017e-3

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial vs Covariance Energy Comparison[2m > [22m[2mshould both be zero for perfect hinge
[22m[39m
Perfect hinge: E^P = 0.000000e+0, E^λ = 2.705017e-3

[90mstdout[2m | test/lbfgs-compiled-performance.spec.ts[2m > [22m[2mL-BFGS Compiled Performance[2m > [22m[2mshould benchmark compiled vs uncompiled gradient evaluation
[22m[39m
=== L-BFGS Performance: 500 residuals, 20 iterations ===

Uncompiled:
  Time: 148.25ms
  Iterations: 1
  Final cost: 1.244e-29
[CompiledFunctions] Compiling 500 functions...
[CompiledFunctions] Processing function 0/500
[CompiledFunctions] Processing function 100/500
[CompiledFunctions] Processing function 200/500
[CompiledFunctions] Processing function 300/500
[CompiledFunctions] Processing function 400/500

Compiled:
  Kernels: 1
  Reuse factor: 500.0x
  Time: 5.27ms
  Iterations: 1
  Final cost: 1.263e-29

**Speedup: 28.11x**

[90mstdout[2m | test/lbfgs-compiled-performance.spec.ts[2m > [22m[2mL-BFGS Compiled Performance[2m > [22m[2mshould benchmark with distance constraints
[22m[39m
=== Distance Constraints: 50 points, 30 iterations ===

Uncompiled:
  Time: 56.86ms
  Iterations: 17
  Final cost: 1.932e-6
[CompiledFunctions] Compiling 50 functions...
[CompiledFunctions] Processing function 0/50

Compiled:
  Kernels: 2
  Constraints: 50
  Reuse factor: 25.0x
  Time: 14.30ms
  Iterations: 17
  Final cost: 4.253e-6

**Speedup: 3.98x**

[90mstdout[2m | demos/developable-sphere/test/compilation-state-test.spec.ts[2m > [22m[2mCompilation State Test[2m > [22m[2mmesh state during compilation vs uncompiled
[22m[39m
=== COMPILATION STATE TEST ===

Starting compilation...

>>> Inside compilation callback <<<
  Received params: 36 values
  First param: -0.5257311121191336 (requiresGrad: true)
  Param object same as original? true
  After paramsToMesh:
    mesh.vertices[0].x === p[0]? true
    mesh.vertices[0].x.data: -0.5257311121191336
  Built 12 residuals
  First residual value: 2.0792547552e-1
  First residual prev.length: 2
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[KernelPool] Canonicalization took 50ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 1)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,6g,0g);n139:(square,n136);n141:(-,7g,1g);n140:(square,n141);n143:(-,8g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,15g,0g);n148:(square,n145);n150:(-,16g,1g);n149:(square,n150);n152:(...

>>> After compilation <<<
Compiled: 12 kernels

=== FIRST KERNEL INDICES ===
InputIndices (first 10): [36, 15, 0, 37, 16, 1, 37, 17, 2, 37]
GradientIndices (first 10): [-1, 15, 0, -1, 16, 1, -1, 17, 2, -1]
Total input indices: 127
Building uncompiled graph...
  After paramsToMesh for uncompiled:
    mesh.vertices[0].x === params[0]? true
    mesh.vertices[0].x.data: -0.5257311121191336
  Built 12 residuals
  First residual value: 2.0792547552e-1
  First residual prev.length: 2

=== GRAPH COMPARISON ===
Compilation graph first residual: 2.079254755206724e-1
Uncompiled graph first residual:  2.079254755206724e-1
Same object? false
Value difference: 0.000000e+0

=== LEAF NODE ANALYSIS ===
Compilation graph leaf count: 127
Uncompiled graph leaf count: 127
First 5 compilation leaves:
  [0] data=0.000000e+0, isParam=false, requiresGrad=false
  [1] data=0.000000e+0, isParam=true, requiresGrad=true
  [2] data=-5.257311e-1, isParam=true, requiresGrad=true
  [3] data=2.000000e+0, isParam=false, requiresGrad=false
  [4] data=5.257311e-1, isParam=true, requiresGrad=true
First 5 uncompiled leaves:
  [0] data=0.000000e+0, isParam=false, requiresGrad=false
  [1] data=0.000000e+0, isParam=true, requiresGrad=true
  [2] data=-5.257311e-1, isParam=true, requiresGrad=true
  [3] data=2.000000e+0, isParam=false, requiresGrad=false
  [4] data=5.257311e-1, isParam=true, requiresGrad=true

=== LEAF IDENTITY CHECK ===
  Diff[0]: comp.data=0.000000e+0, uncomp.data=0.000000e+0, sameValue=true
  Diff[3]: comp.data=2.000000e+0, uncomp.data=2.000000e+0, sameValue=true
  Diff[6]: comp.data=2.000000e+0, uncomp.data=2.000000e+0, sameValue=true
  Diff[9]: comp.data=2.000000e+0, uncomp.data=2.000000e+0, sameValue=true
  Diff[11]: comp.data=2.000000e+0, uncomp.data=2.000000e+0, sameValue=true
Same leaf objects: 18/127
Different leaf objects: 109/127

=== PARAM VERIFICATION ===
Checking if compilation leaves that are params are actually in params array:
Params found in compilation leaves: 18/36 expected

Checking if mesh vertices point to params:
  vertex[0].x === params[0]? true
  vertex[0].y === params[1]? true
  vertex[0].z === params[2]? true
  vertex[1].x === params[3]? true
  vertex[1].y === params[4]? true
  vertex[1].z === params[5]? true
  vertex[2].x === params[6]? true
  vertex[2].y === params[7]? true
  vertex[2].z === params[8]? true

=== GRADIENT COMPARISON ===

Uncompiled (using COMPILATION graph): summing 12 residuals
  Total energy: 2.495105706248069e+0
  First 3 residuals: [2.079255e-1, 2.079255e-1, 2.079255e-1]

First 5 gradients:
Idx | Uncompiled       | Compiled         | Difference
----|------------------|------------------|------------------
  0 | -6.1575366337e-1 | -6.1575366337e-1 | 2.220446e-16
  1 | 8.5483195983e-1 | 8.5483195983e-1 | 3.330669e-16
  2 | -7.2397394535e-2 | -7.2397394535e-2 | 2.775558e-17
  3 | -6.5997415043e-1 | -6.5997415043e-1 | 2.220446e-16
  4 | -6.8292536803e-1 | -6.8292536803e-1 | 5.551115e-16

Max gradient difference: 5.551115e-16

✓ Gradients match.


 [32m✓[39m demos/developable-sphere/test/compilation-state-test.spec.ts [2m([22m[2m1 test[22m[2m)[22m[33m 731[2mms[22m[39m
   [33m[2m✓[22m[39m Compilation State Test[2m > [22mmesh state during compilation vs uncompiled [33m 725[2mms[22m[39m
[90mstdout[2m | test/lbfgs-compiled-performance.spec.ts[2m > [22m[2mL-BFGS Compiled Performance[2m > [22m[2mshould show scaling with problem size
[22m[39m
=== Scaling Analysis (10 iterations) ===

| Size | Uncompiled | Compiled | Speedup | Reuse |
|------|------------|----------|---------|-------|
[CompiledFunctions] Compiling 50 functions...
[CompiledFunctions] Processing function 0/50
| 50   | 1.4        | 0.6      | 2.41x     | 50x     |
[CompiledFunctions] Compiling 100 functions...
[CompiledFunctions] Processing function 0/100
[GraphCanonicalizerNoSort] Total: 77ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 0ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 77ms | Nodes: 5 | NodeExprs: 2 | getNodeId calls: 4, cacheHits: 0 (0.0%), keyLength: 29
[KernelPool] Canonicalization took 77ms for graph with 1 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 1)
  Canon: 0g|n4:(-,0g,1);n3:(square,n4)
| 100  | 1.7        | 0.9      | 2.01x     | 100x     |
[CompiledFunctions] Compiling 200 functions...
[CompiledFunctions] Processing function 0/200
[CompiledFunctions] Processing function 100/200
| 200  | 8.0        | 1.5      | 5.46x     | 200x     |
[CompiledFunctions] Compiling 500 functions...
[CompiledFunctions] Processing function 0/500
[CompiledFunctions] Processing function 100/500
[CompiledFunctions] Processing function 200/500
[CompiledFunctions] Processing function 300/500
[GraphCanonicalizerNoSort] Total: 36ms | Phase1(discover): 0ms | Phase2(assign): 36ms | Phase3(expr): 0ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 5 | NodeExprs: 2 | getNodeId calls: 4, cacheHits: 0 (0.0%), keyLength: 29
[KernelPool] Canonicalization took 36ms for graph with 1 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 1)
  Canon: 0g|n4:(-,0g,1);n3:(square,n4)
[CompiledFunctions] Processing function 400/500
| 500  | 10.0       | 72.3     | 0.14x     | 500x     |


 [32m✓[39m test/lbfgs-compiled-performance.spec.ts [2m([22m[2m3 tests[22m[2m)[22m[33m 1195[2mms[22m[39m
   [33m[2m✓[22m[39m L-BFGS Compiled Performance[2m > [22mshould benchmark compiled vs uncompiled gradient evaluation [33m 671[2mms[22m[39m
   [33m[2m✓[22m[39m L-BFGS Compiled Performance[2m > [22mshould show scaling with problem size [33m 425[2mms[22m[39m
[90mstdout[2m | test/developable-energy-comparison.spec.ts[2m > [22m[2mDevelopable Energy Comparison[2m > [22m[2mshould produce identical results for variance energy with compiled vs non-compiled
[22m[39m[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Non-compiled:
  Energy: [33m1.0073120177074764[39m
  Iterations: [33m5[39m
  Convergence: Line search failed to find acceptable step

Compiled:
  Energy: [33m1.0073120177074766[39m
  Iterations: [33m5[39m
  Convergence: Line search failed to find acceptable step
  Kernels: [33m12[39m Reuse: 1.0x

Difference:
  Energy diff: [33m2.220446049250313e-16[39m
  Max param diff: [33m3.3306690738754696e-16[39m

[90mstdout[2m | test/combinatorial-covariance-energy.spec.ts[2m > [22m[2mCombinatorial vs Covariance Energy Comparison[2m > [22m[2mshould compare behavior on perturbed sphere
[22m[39m
=== Energy Comparison (Perturbed Sphere) ===
E^P: 2.829e+1
E^λ: 6.820e+1
E^P developability: 0.0% (quality: 0.00)
E^λ developability: 12.3% (quality: 2.61)

 [32m✓[39m test/developable-energy-comparison.spec.ts [2m([22m[2m1 test[22m[2m)[22m[33m 1189[2mms[22m[39m
   [33m[2m✓[22m[39m Developable Energy Comparison[2m > [22mshould produce identical results for variance energy with compiled vs non-compiled [33m 1183[2mms[22m[39m
 [31m❯[39m test/combinatorial-covariance-energy.spec.ts [2m([22m[2m15 tests[22m[2m | [22m[31m1 failed[39m[2m)[22m[33m 11266[2mms[22m[39m
   [32m✓[39m Combinatorial Energy (E^P)[2m > [22mshould be zero for a perfect plane[32m 19[2mms[22m[39m
   [32m✓[39m Combinatorial Energy (E^P)[2m > [22mshould be zero for a perfect hinge (two planes)[32m 5[2mms[22m[39m
   [33m[2m✓[22m[39m Combinatorial Energy (E^P)[2m > [22mshould have non-zero energy on perturbed sphere [33m 1285[2mms[22m[39m
   [33m[2m✓[22m[39m Combinatorial Energy (E^P)[2m > [22mshould compute quality metrics correctly [33m 373[2mms[22m[39m
[31m   [31m×[31m Combinatorial Energy (E^P)[2m > [22mshould reduce energy during optimization[39m[33m 3075[2mms[22m[39m
[31m     → expected 0 to be greater than 0[39m
   [32m✓[39m Covariance Energy (E^λ)[2m > [22mshould be zero for a perfect plane[32m 48[2mms[22m[39m
   [32m✓[39m Covariance Energy (E^λ)[2m > [22mshould be zero for a perfect hinge[32m 10[2mms[22m[39m
   [33m[2m✓[22m[39m Covariance Energy (E^λ)[2m > [22mshould have non-zero energy on perturbed sphere [33m 732[2mms[22m[39m
   [33m[2m✓[22m[39m Covariance Energy (E^λ)[2m > [22mshould compute intrinsic variant correctly [33m 436[2mms[22m[39m
   [33m[2m✓[22m[39m Covariance Energy (E^λ)[2m > [22mshould compute max variant correctly [33m 769[2mms[22m[39m
   [32m✓[39m Covariance Energy (E^λ)[2m > [22mshould compute quality metrics correctly[32m 238[2mms[22m[39m
   [33m[2m✓[22m[39m Covariance Energy (E^λ)[2m > [22mshould reduce energy during optimization [33m 2810[2mms[22m[39m
   [32m✓[39m Combinatorial vs Covariance Energy Comparison[2m > [22mshould both be zero for perfect plane[32m 2[2mms[22m[39m
   [32m✓[39m Combinatorial vs Covariance Energy Comparison[2m > [22mshould both be zero for perfect hinge[32m 2[2mms[22m[39m
   [33m[2m✓[22m[39m Combinatorial vs Covariance Energy Comparison[2m > [22mshould compare behavior on perturbed sphere [33m 1452[2mms[22m[39m
 [32m✓[39m test/RobotArmIK.comparison.spec.ts [2m([22m[2m5 tests[22m[2m | [22m[33m3 skipped[39m[2m)[22m[33m 743[2mms[22m[39m
   [33m[2m✓[22m[39m Robot Arm IK - Failing Cases[2m > [22mshould solve 6-joint arm from recorded failing position [33m 433[2mms[22m[39m
   [33m[2m✓[22m[39m Robot Arm IK - Failing Cases[2m > [22mshould solve 6-joint arm from second failing position [33m 305[2mms[22m[39m
[90mstdout[2m | test/GraphCanonicalizer.benchmark.test.ts[2m > [22m[2mCanonicalizer Performance Comparison[2m > [22m[2mshould compare performance on complex graphs
[22m[39m
======================================================================
Canonicalizer Performance Comparison
======================================================================

Graph with 21 parameters:
  ID-based (no-sort): 1.04ms
  Hash-based:         1.52ms  (0.68x)
  No-sort canon:  0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n65:(-...
  Hash canon:     0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|af63a6...

Graph with 42 parameters:
  ID-based (no-sort): 2.42ms
  Hash-based:         2.29ms  (1.06x)
  No-sort canon:  0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...
  Hash canon:     0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...

Graph with 63 parameters:
[GraphCanonicalizerNoSort] Total: 25ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 25ms [traversal: 1ms, stringBuild: 24ms] | Phase4(build): 0ms | Nodes: 1007 | NodeExprs: 358 | getNodeId calls: 1051, cacheHits: 441 (42.0%), keyLength: 9303
  ID-based (no-sort): 7.95ms
  Hash-based:         2.53ms  (3.15x)
  No-sort canon:  0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...
  Hash canon:     0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...

Graph with 84 parameters:
[GraphCanonicalizerNoSort] Total: 31ms | Phase1(discover): 28ms | Phase2(assign): 0ms | Phase3(expr): 2ms [traversal: 0ms, stringBuild: 2ms] | Phase4(build): 0ms | Nodes: 1343 | NodeExprs: 477 | getNodeId calls: 1401, cacheHits: 588 (42.0%), keyLength: 12418
  ID-based (no-sort): 2.36ms
  Hash-based:         2.62ms  (0.90x)
[GraphHashCanonicalizer] Total: 11ms | Phase1(discover): 1ms | Phase2(assign): 0ms | Phase3(hash): 10ms | Phase4(build): 0ms | Nodes: 1343 | keyLength: 342
  No-sort canon:  0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...
  Hash canon:     0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...

Graph with 126 parameters:
[GraphCanonicalizerNoSort] Total: 64ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 62ms [traversal: 1ms, stringBuild: 62ms] | Phase4(build): 1ms | Nodes: 2015 | NodeExprs: 715 | getNodeId calls: 2101, cacheHits: 882 (42.0%), keyLength: 19075
  ID-based (no-sort): 16.17ms
  Hash-based:         4.55ms  (3.56x)
  No-sort canon:  0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...
  Hash canon:     0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...

Graph with 168 parameters:
[GraphCanonicalizerNoSort] Total: 10ms | Phase1(discover): 1ms | Phase2(assign): 0ms | Phase3(expr): 3ms [traversal: 1ms, stringBuild: 2ms] | Phase4(build): 6ms | Nodes: 2687 | NodeExprs: 953 | getNodeId calls: 2801, cacheHits: 1176 (42.0%), keyLength: 26695
[GraphHashCanonicalizer] Total: 31ms | Phase1(discover): 1ms | Phase2(assign): 0ms | Phase3(hash): 30ms | Phase4(build): 0ms | Nodes: 2687 | keyLength: 746
  ID-based (no-sort): 7.07ms
  Hash-based:         10.87ms  (0.65x)
  No-sort canon:  0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...
  Hash canon:     0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22...

======================================================================

 [32m✓[39m test/GraphCanonicalizer.benchmark.test.ts [2m([22m[2m1 test[22m[2m)[22m[33m 524[2mms[22m[39m
   [33m[2m✓[22m[39m Canonicalizer Performance Comparison[2m > [22mshould compare performance on complex graphs [33m 518[2mms[22m[39m
[90mstdout[2m | demos/developable-sphere/test/debug-kernel-backward.spec.ts[2m > [22m[2mDebug Kernel Backward[2m > [22m[2mshould trace through backward pass step by step
[22m[39m
=== STEP-BY-STEP BACKWARD DEBUG ===

Compiling...
[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
[GraphCanonicalizerNoSort] Total: 62ms | Phase1(discover): 52ms | Phase2(assign): 0ms | Phase3(expr): 10ms [traversal: 8ms, stringBuild: 2ms] | Phase4(build): 0ms | Nodes: 783 | NodeExprs: 569 | getNodeId calls: 1087, cacheHits: 382 (35.1%), keyLength: 10978
[KernelPool] Canonicalization took 64ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 1)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,6g,0g);n139:(square,n136);n141:(-,7g,1g);n140:(square,n141);n143:(-,8g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,15g,0g);n148:(square,n145);n150:(-,16g,1g);n149:(square,n150);n152:(...
[GraphCanonicalizerNoSort] Total: 13ms | Phase1(discover): 1ms | Phase2(assign): 0ms | Phase3(expr): 11ms [traversal: 1ms, stringBuild: 10ms] | Phase4(build): 0ms | Nodes: 783 | NodeExprs: 569 | getNodeId calls: 1087, cacheHits: 382 (35.1%), keyLength: 10983
[KernelPool] Canonicalization took 14ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 3)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n136:(-,12g,0g);n139:(square,n136);n141:(-,13g,1g);n140:(square,n141);n143:(-,14g,2g);n142:(square,n143);n138:(+,n139,n140,n142);n137:(sqrt,n138);n135:(/,n136,n137);n145:(-,15g,0g);n148:(square,n145);n150:(-,16g,1g);n149:(square,n150);n15...
Compiled 12 kernels

Debugging first residual (vertex 0 energy)
Residual value: 2.079254755206724e-1

Graph has 783 nodes (including 127 leaves)

=== FORWARD PASS (first 10 nodes) ===
[0] leaf       value=0.000000e+0 (leaf, const)
[1] leaf       value=0.000000e+0 (leaf, param)
[2] leaf       value=-5.257311e-1 (leaf, param)
[3] leaf       value=5.257311e-1 (2 inputs)
[4] leaf       value=2.000000e+0 (leaf, const)
[5] leaf       value=2.763932e-1 (2 inputs)
[6] leaf       value=5.257311e-1 (leaf, param)
[7] leaf       value=8.506508e-1 (leaf, param)
[8] leaf       value=-3.249197e-1 (2 inputs)
[9] leaf       value=2.000000e+0 (leaf, const)

=== GRAPH BACKWARD PASS ===
Graph backward complete
First 5 param gradients: [-1.889666e-1, 2.786397e-1, 1.035691e-2, 0.000000e+0, -1.769991e-1]

=== COMPILED BACKWARD PASS ===
Kernel has 127 inputs
InputIndices (first 10): [36, 15, 0, 37, 16, 1, 37, 17, 2, 37]
GradientIndices (first 10): [-1, 15, 0, -1, 16, 1, -1, 17, 2, -1]

=== KERNEL INPUT VERIFICATION (BEFORE update) ===
Graph has 127 leaves
First 10 leaf values in graph vs registry:
  leaf[0]: graph.data=0.000000e+0, registry[36]=0.000000e+0, match=true
  leaf[1]: graph.data=0.000000e+0, registry[15]=0.000000e+0, match=true
  leaf[2]: graph.data=-5.257311e-1, registry[0]=-5.257311e-1, match=true
  leaf[3]: graph.data=2.000000e+0, registry[37]=2.000000e+0, match=true
  leaf[4]: graph.data=5.257311e-1, registry[16]=5.257311e-1, match=true
  leaf[5]: graph.data=8.506508e-1, registry[1]=8.506508e-1, match=true
  leaf[6]: graph.data=2.000000e+0, registry[37]=2.000000e+0, match=true
  leaf[7]: graph.data=8.506508e-1, registry[17]=8.506508e-1, match=true
  leaf[8]: graph.data=0.000000e+0, registry[2]=0.000000e+0, match=true
  leaf[9]: graph.data=2.000000e+0, registry[37]=2.000000e+0, match=true

=== AFTER updating params in registry ===
First 10 leaf values after param update:
  leaf[0]: graph.data=0.000000e+0, registry[36]=0.000000e+0, match=true
  leaf[1]: graph.data=0.000000e+0, registry[15]=0.000000e+0, match=true
  leaf[2]: graph.data=-5.257311e-1, registry[0]=-5.257311e-1, match=true
  leaf[3]: graph.data=2.000000e+0, registry[37]=2.000000e+0, match=true
  leaf[4]: graph.data=5.257311e-1, registry[16]=5.257311e-1, match=true
  leaf[5]: graph.data=8.506508e-1, registry[1]=8.506508e-1, match=true
  leaf[6]: graph.data=2.000000e+0, registry[37]=2.000000e+0, match=true
  leaf[7]: graph.data=8.506508e-1, registry[17]=8.506508e-1, match=true
  leaf[8]: graph.data=0.000000e+0, registry[2]=0.000000e+0, match=true
  leaf[9]: graph.data=2.000000e+0, registry[37]=2.000000e+0, match=true

Kernel value: 2.079254755206724e-1
First 5 kernel gradients: [-1.889666e-1, 2.786397e-1, 1.035691e-2, 1.040834e-17, -1.769991e-1]

=== COMPARISON ===
Values match? true
Value diff: 0.000000e+0

Gradient comparison (first 10 params):
Idx | Graph Grad       | Kernel Grad      | Difference       | Match?
----|------------------|------------------|------------------|-------
  0 | -1.8896663387e-1 | -1.8896663387e-1 | 1.110223e-16 | ✓
  1 | 2.7863968239e-1 | 2.7863968239e-1 | 2.220446e-16 | ✓
  2 | 1.0356914413e-2 | 1.0356914413e-2 | 1.387779e-17 | ✓
  3 | 0.0000000000e+0 | 1.0408340856e-17 | 1.040834e-17 | ✓
  4 | -1.7699913654e-1 | -1.7699913654e-1 | 0.000000e+0 | ✓
  5 | 6.2040480122e-2 | 6.2040480122e-2 | 6.938894e-18 | ✓
  6 | 0.0000000000e+0 | 0.0000000000e+0 | 0.000000e+0 | ✓
  7 | 0.0000000000e+0 | 0.0000000000e+0 | 0.000000e+0 | ✓
  8 | 0.0000000000e+0 | 0.0000000000e+0 | 0.000000e+0 | ✓
  9 | 0.0000000000e+0 | 0.0000000000e+0 | 0.000000e+0 | ✓

Max gradient diff: 2.220446e-16

=== KERNEL CODE ===
Kernel has 2374 lines
Saved to kernel-output.js

=== BACKWARD SECTION (gradient accumulation) ===
Backward starts at line 913
    let grad__v0 = 0;
    let grad__v1 = 0;
    let grad__v2 = 0;
    let grad__v3 = 0;
    let grad__v4 = 0;
    let grad__v5 = 0;
    let grad__v6 = 0;
    let grad__v7 = 0;
    let grad__v8 = 0;
    let grad__v9 = 0;
    let grad__v10 = 0;
    let grad__v11 = 0;
    let grad__v12 = 0;
    let grad__v13 = 0;
    let grad__v14 = 0;
    let grad__v15 = 0;
    let grad__v16 = 0;
    let grad__v17 = 0;
    let grad__v18 = 0;
    let grad__v19 = 0;
    let grad__v20 = 0;
    let grad__v21 = 0;
    let grad__v22 = 0;
    let grad__v23 = 0;
    let grad__v24 = 0;
    let grad__v25 = 0;
    let grad__v26 = 0;
    let grad__v27 = 0;
    let grad__v28 = 0;
    let grad__v29 = 0;
    let grad__v30 = 0;
    let grad__v31 = 0;
    let grad__v32 = 0;
    let grad__v33 = 0;
    let grad__v34 = 0;
    let grad__v35 = 0;
    let grad__v36 = 0;
    let grad__v37 = 0;
    let grad__v38 = 0;
    let grad__v39 = 0;
    let grad__v40 = 0;
    let grad__v41 = 0;
    let grad__v42 = 0;
    let grad__v43 = 0;
    let grad__v44 = 0;
    let grad__v45 = 0;
    let grad__v46 = 0;
    let grad__v47 = 0;
    let grad__v48 = 0;
    let grad__v49 = 0;

 [32m✓[39m demos/developable-sphere/test/debug-kernel-backward.spec.ts [2m([22m[2m1 test[22m[2m)[22m[33m 579[2mms[22m[39m
   [33m[2m✓[22m[39m Debug Kernel Backward[2m > [22mshould trace through backward pass step by step [33m 573[2mms[22m[39m
[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Compiling 162 functions...
[CompiledFunctions] Processing 50/162 (30%)
[GraphCanonicalizerNoSort] Total: 22ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 21ms [traversal: 21ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 394 | NodeExprs: 263 | getNodeId calls: 528, cacheHits: 167 (31.6%), keyLength: 5036
[KernelPool] Canonicalization took 22ms for graph with 18 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 2)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g|n98:(-,4g,1g);n99:(-,8g,2g);n97:(*,n98,n99);n101:(-,5g,2g);n102:(-,7g,1g);n100:(*,n101,n102);n96:(-,n97,n100);n105:(square,n96);n109:(-,6g,0g);n108:(*,n101,n109);n111:(-,3g,0g);n110:(*,n111,n99);n107:(-,n108,n110);n106:(square,n107);n114:...
[GraphCanonicalizerNoSort] Total: 17ms | Phase1(discover): 16ms | Phase2(assign): 0ms | Phase3(expr): 1ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 0ms | Nodes: 454 | NodeExprs: 303 | getNodeId calls: 611, cacheHits: 198 (32.4%), keyLength: 5870
[KernelPool] Canonicalization took 17ms for graph with 21 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 12)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g|n107:(-,7g,1g);n108:(-,14g,2g);n106:(*,n107,n108);n110:(-,8g,2g);n111:(-,13g,1g);n109:(*,n110,n111);n105:(-,n106,n109);n114:(square,n105);n118:(-,12g,0g);n117:(*,n110,n118);n120:(-,6g,0g);n119:(*,n120,n108);n116:(-,n117,n119);...

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Processing 100/162 (61%)

[90mstdout[2m | test/canonicalization-performance.spec.ts[2m > [22m[2mCanonicalization Performance[2m > [22m[2mshould canonicalize large sum expression efficiently
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
100-term sum: 21ms, 1 kernels

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Processing 150/162 (92%)

[90mstdout[2m | test/canonicalization-performance.spec.ts[2m > [22m[2mCanonicalization Performance[2m > [22m[2mshould canonicalize deep nested expression efficiently
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Deep nested (64 params, 16 terms): 78ms, 1 kernels

[90mstdout[2m | test/canonicalization-performance.spec.ts[2m > [22m[2mCanonicalization Performance[2m > [22m[2mshould handle variance-like computation efficiently
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Variance (30 params): 5ms, 1 kernels

[90mstdout[2m | test/canonicalization-performance.spec.ts[2m > [22m[2mCanonicalization Performance[2m > [22m[2mshould handle multiple variance computations efficiently
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Multiple variance (10 regions, 20 each): 40ms, 1 kernels

[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m[CompiledFunctions] Complete: 27 unique kernels, 6.0x reuse

[90mstdout[2m | test/canonicalization-performance.spec.ts[2m > [22m[2mCanonicalization Performance[2m > [22m[2mshould handle mesh-like energy with reasonable performance
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
[GraphCanonicalizerNoSort] Total: 60ms | Phase1(discover): 7ms | Phase2(assign): 0ms | Phase3(expr): 52ms [traversal: 25ms, stringBuild: 27ms] | Phase4(build): 0ms | Nodes: 4401 | NodeExprs: 2201 | getNodeId calls: 6052, cacheHits: 1650 (27.3%), keyLength: 53799
[KernelPool] Canonicalization took 60ms for graph with 150 params (mode: no-sort)
[KernelPool] Cache MISS - compiling new kernel (pool size: 1)
  Canon: 0g,1g,2g,3g,4g,5g,6g,7g,8g,9g,10g,11g,12g,13g,14g,15g,16g,17g,18g,19g,20g,21g,22g,23g,24g,25g,26g,27g,28g,29g,30g,31g,32g,33g,34g,35g,36g,37g,38g,39g,40g,41g,42g,43g,44g,45g,46g,47g,48g,49g,50g,51g,52g,53g,54g,55g,56g,57g,58g,59g,60g,61g,62g,63g,64g,65g,66g,67g,68g,69g,70g,71g,72g,73g,74g,75g,76g,77...
Mesh-like energy (50 vertices): 258ms, 1 kernels

 [32m✓[39m test/canonicalization-performance.spec.ts [2m([22m[2m5 tests[22m[2m)[22m[33m 468[2mms[22m[39m
[90mstdout[2m | demos/sketch-demo/src/__tests__/SketchSolver.spec.ts[2m > [22m[2mSolver Comparison - Adam vs Levenberg-Marquardt[2m > [22m[2mshould print Jacobian for horizontal line constraint
[22m[39mIteration 0: cost=2500.000000, ||∇||=7.07e+1, λ=1.00e-3
  Jacobian shape: 1×4
  ⚠ Underdetermined: 3 degrees of freedom (nullspace dimension ≥ 3)
  Jacobian:
    [0.0000, -1.0000, 0.0000, 1.0000]
  Residuals: [50.0000]
  Initial delta: [0.0000, 24.9875, 0.0000, -24.9875]
  Delta norm: 35.3377
  New params: [0.0000, 24.9875, 100.0000, 25.0125]
  Inner iteration 0: λ=1.00e-3, cost=2500.0000 → 0.0006, accepted=true
Iteration 1: cost=0.000624, ||∇||=3.53e-2, λ=1.00e-4
Iteration 2: cost=0.000000, ||∇||=1.77e-6, λ=1.00e-5

[90mstdout[2m | test/NonlinearLeastSquares.lm.spec.ts[2m > [22m[2mLevenberg-Marquardt vs Pure Gauss-Newton[2m > [22m[2mVerify LM behavior[2m > [22m[2mshould show lambda decreasing as optimization progresses
[22m[39mIteration 0: cost=34.000000, ||∇||=5.83e+0, λ=1.00e+0
  Jacobian shape: 2×2
  Jacobian:
    [1.0000, 0.0000]
    [0.0000, 1.0000]
  Residuals: [-5.0000, -3.0000]
  Initial delta: [2.5000, 1.5000]
  Delta norm: 2.9155
  New params: [2.5000, 1.5000]
  Inner iteration 0: λ=1.00e+0, cost=34.0000 → 8.5000, accepted=true
Iteration 1: cost=8.500000, ||∇||=2.92e+0, λ=1.00e-1
Iteration 2: cost=0.070248, ||∇||=2.65e-1, λ=1.00e-2
Iteration 3: cost=0.000007, ||∇||=2.62e-3, λ=1.00e-3
Iteration 4: cost=0.000000, ||∇||=2.62e-6, λ=1.00e-4

[90mstdout[2m | demos/developable-sphere/test/print-minimal-failing.spec.ts[2m > [22m[2mPrint Minimal Failing Kernel[2m > [22m[2mshould print kernel code
[22m[39m
=== MINIMAL FAILING CASE ===

[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Compiled 12 kernels
Num functions: 12

=== KERNEL CODE FOR VERTEX 0 ===

function anonymous(allValues,indices,gradientIndices,gradient
) {

    const idx_0 = indices[0];
    const idx_1 = indices[1];
    const idx_2 = indices[2];
    const idx_3 = indices[3];
    const idx_4 = indices[4];
    const idx_5 = indices[5];
    const idx_6 = indices[6];
    const idx_7 = indices[7];
    const idx_8 = indices[8];
    const idx_9 = indices[9];
    const idx_10 = indices[10];
    const idx_11 = indices[11];
    const idx_12 = indices[12];
    const idx_13 = indices[13];
    const idx_14 = indices[14];
    const idx_15 = indices[15];
    const idx_16 = indices[16];
    const idx_17 = indices[17];
    const idx_18 = indices[18];
    const idx_19 = indices[19];
    const idx_20 = indices[20];
    const idx_21 = indices[21];
    const idx_22 = indices[22];
    const idx_23 = indices[23];
    const idx_24 = indices[24];
    const idx_25 = indices[25];
    const idx_26 = indices[26];
    const idx_27 = indices[27];
    const idx_28 = indices[28];
    const idx_29 = indices[29];
    const idx_30 = indices[30];
    const idx_31 = indices[31];
    const idx_32 = indices[32];
    const idx_33 = indices[33];
    const idx_34 = indices[34];
    const idx_35 = indices[35];
    const idx_36 = indices[36];
    const idx_37 = indices[37];
    const idx_38 = indices[38];
    const idx_39 = indices[39];
    const idx_40 = indices[40];
    const idx_41 = indices[41];
    const idx_42 = indices[42];
    const idx_43 = indices[43];
    const idx_44 = indices[44];
    const idx_45 = indices[45];
    const idx_46 = indices[46];
    const idx_47 = indices[47];
    const idx_48 = indices[48];
    const idx_49 = indices[49];
    const idx_50 = indices[50];
    const idx_51 = indices[51];
    const idx_52 = indices[52];
    const idx_53 = indices[53];
    const idx_54 = indices[54];
    const idx_55 = indices[55];
    const idx_56 = indices[56];
    const idx_57 = indices[57];
    const idx_58 = indices[58];
    const idx_59 = indices[59];
    const _v0 = allValues[idx_0];
    const _v1 = allValues[idx_1];
    const _v2 = (_v0 - _v1);
    const _v3 = allValues[idx_2];
    const _v4 = Math.pow(_v2, _v3);
    const _v5 = allValues[idx_3];
    const _v6 = allValues[idx_4];
    const _v7 = (_v5 - _v6);
    const _v8 = allValues[idx_5];
    const _v9 = Math.pow(_v7, _v8);
    const _v10 = (_v4 + _v9);
    const _v11 = allValues[idx_6];
    const _v12 = allValues[idx_7];
    const _v13 = (_v11 - _v12);
    const _v14 = allValues[idx_8];
    const _v15 = Math.pow(_v13, _v14);
    const _v16 = (_v10 + _v15);
    const _v17 = Math.sqrt(_v16);
    const _v18 = (_v2 / _v17);
    const _v19 = allValues[idx_9];
    const _v20 = (_v19 - _v1);
    const _v21 = allValues[idx_10];
    const _v22 = Math.pow(_v20, _v21);
    const _v23 = allValues[idx_11];
    const _v24 = (_v23 - _v6);
    const _v25 = allValues[idx_12];
    const _v26 = Math.pow(_v24, _v25);
    const _v27 = (_v22 + _v26);
    const _v28 = allValues[idx_13];
    const _v29 = (_v28 - _v12);
    const _v30 = allValues[idx_14];
    const _v31 = Math.pow(_v29, _v30);
    const _v32 = (_v27 + _v31);
    const _v33 = Math.sqrt(_v32);
    const _v34 = (_v20 / _v33);
    const _v35 = (_v18 * _v34);
    const _v36 = (_v7 / _v17);
    const _v37 = (_v24 / _v33);
    const _v38 = (_v36 * _v37);
    const _v39 = (_v35 + _v38);
    const _v40 = (_v13 / _v17);
    const _v41 = (_v29 / _v33);
    const _v42 = (_v40 * _v41);
    const _v43 = (_v39 + _v42);
    const _v44 = allValues[idx_15];
    const _v45 = Math.pow(_v18, _v44);
    const _v46 = allValues[idx_16];
    const _v47 = Math.pow(_v36, _v46);
    const _v48 = (_v45 + _v47);
    const _v49 = allValues[idx_17];
    const _v50 = Math.pow(_v40, _v49);
    const _v51 = (_v48 + _v50);
    const _v52 = Math.sqrt(_v51);
    const _v53 = allValues[idx_18];
    const _v54 = Math.pow(_v34, _v53);
    const _v55 = allValues[idx_19];
    const _v56 = Math.pow(_v37, _v55);
    const _v57 = (_v54 + _v56);
    const _v58 = allValues[idx_20];
    const _v59 = Math.pow(_v41, _v58);
    const _v60 = (_v57 + _v59);
    const _v61 = Math.sqrt(_v60);
    const _v62 = (_v52 * _v61);
    const _v63 = (_v43 / _v62);
    const _v64 = Math.max(-1, Math.min(_v63, 1));
    const _v65 = Math.acos(_v64);
    const _v66 = (_v23 - _v6);
    const _v67 = (_v11 - _v12);
    const _v68 = (_v66 * _v67);
    const _v69 = (_v28 - _v12);
    const _v70 = (_v5 - _v6);
    const _v71 = (_v69 * _v70);
    const _v72 = (_v68 - _v71);
    const _v73 = allValues[idx_21];
    const _v74 = Math.pow(_v72, _v73);
    const _v75 = (_v0 - _v1);
    const _v76 = (_v69 * _v75);
    const _v77 = (_v19 - _v1);
    const _v78 = (_v77 * _v67);
    const _v79 = (_v76 - _v78);
    const _v80 = allValues[idx_22];
    const _v81 = Math.pow(_v79, _v80);
    const _v82 = (_v74 + _v81);
    const _v83 = (_v77 * _v70);
    const _v84 = (_v66 * _v75);
    const _v85 = (_v83 - _v84);
    const _v86 = allValues[idx_23];
    const _v87 = Math.pow(_v85, _v86);
    const _v88 = (_v82 + _v87);
    const _v89 = Math.sqrt(_v88);
    const _v90 = (_v72 / _v89);
    const _v91 = allValues[idx_24];
    const _v92 = Math.pow(_v90, _v91);
    const _v93 = (_v79 / _v89);
    const _v94 = allValues[idx_25];
    const _v95 = Math.pow(_v93, _v94);
    const _v96 = (_v92 + _v95);
    const _v97 = (_v85 / _v89);
    const _v98 = allValues[idx_26];
    const _v99 = Math.pow(_v97, _v98);
    const _v100 = (_v96 + _v99);
    const _v101 = Math.sqrt(_v100);
    const _v102 = (_v90 / _v101);
    const _v103 = (_v93 / _v101);
    const _v104 = (_v0 - _v1);
    const _v105 = allValues[idx_27];
    const _v106 = (_v105 - _v6);
    const _v107 = (_v104 * _v106);
    const _v108 = (_v5 - _v6);
    const _v109 = allValues[idx_28];
    const _v110 = (_v109 - _v1);
    const _v111 = (_v108 * _v110);
    const _v112 = (_v107 - _v111);
    const _v113 = allValues[idx_29];
    const _v114 = (_v113 - _v12);
    const _v115 = (_v108 * _v114);
    const _v116 = (_v11 - _v12);
    const _v117 = (_v116 * _v106);
    const _v118 = (_v115 - _v117);
    const _v119 = allValues[idx_30];
    const _v120 = Math.pow(_v118, _v119);
    const _v121 = (_v116 * _v110);
    const _v122 = (_v104 * _v114);
    const _v123 = (_v121 - _v122);
    const _v124 = allValues[idx_31];
    const _v125 = Math.pow(_v123, _v124);
    const _v126 = (_v120 + _v125);
    const _v127 = allValues[idx_32];
    const _v128 = Math.pow(_v112, _v127);
    const _v129 = (_v126 + _v128);
    const _v130 = Math.sqrt(_v129);
    const _v131 = (_v112 / _v130);
    const _v132 = (_v118 / _v130);
    const _v133 = allValues[idx_33];
    const _v134 = Math.pow(_v132, _v133);
    const _v135 = (_v123 / _v130);
    const _v136 = allValues[idx_34];
    const _v137 = Math.pow(_v135, _v136);
    const _v138 = (_v134 + _v137);
    const _v139 = allValues[idx_35];
    const _v140 = Math.pow(_v131, _v139);
    const _v141 = (_v138 + _v140);
    const _v142 = Math.sqrt(_v141);
    const _v143 = (_v131 / _v142);
    const _v144 = (_v103 * _v143);
    const _v145 = (_v97 / _v101);
    const _v146 = (_v135 / _v142);
    const _v147 = (_v145 * _v146);
    const _v148 = (_v144 - _v147);
    const _v149 = (_v109 - _v1);
    const _v150 = allValues[idx_36];
    const _v151 = (_v150 - _v6);
    const _v152 = (_v149 * _v151);
    const _v153 = (_v105 - _v6);
    const _v154 = allValues[idx_37];
    const _v155 = (_v154 - _v1);
    const _v156 = (_v153 * _v155);
    const _v157 = (_v152 - _v156);
    const _v158 = allValues[idx_38];
    const _v159 = (_v158 - _v12);
    const _v160 = (_v153 * _v159);
    const _v161 = (_v113 - _v12);
    const _v162 = (_v161 * _v151);
    const _v163 = (_v160 - _v162);
    const _v164 = allValues[idx_39];
    const _v165 = Math.pow(_v163, _v164);
    const _v166 = (_v161 * _v155);
    const _v167 = (_v149 * _v159);
    const _v168 = (_v166 - _v167);
    const _v169 = allValues[idx_40];
    const _v170 = Math.pow(_v168, _v169);
    const _v171 = (_v165 + _v170);
    const _v172 = allValues[idx_41];
    const _v173 = Math.pow(_v157, _v172);
    const _v174 = (_v171 + _v173);
    const _v175 = Math.sqrt(_v174);
    const _v176 = (_v157 / _v175);
    const _v177 = (_v163 / _v175);
    const _v178 = allValues[idx_42];
    const _v179 = Math.pow(_v177, _v178);
    const _v180 = (_v168 / _v175);
    const _v181 = allValues[idx_43];
    const _v182 = Math.pow(_v180, _v181);
    const _v183 = (_v179 + _v182);
    const _v184 = allValues[idx_44];
    const _v185 = Math.pow(_v176, _v184);
    const _v186 = (_v183 + _v185);
    const _v187 = Math.sqrt(_v186);
    const _v188 = (_v176 / _v187);
    const _v189 = (_v103 * _v188);
    const _v190 = (_v180 / _v187);
    const _v191 = (_v145 * _v190);
    const _v192 = (_v189 - _v191);
    const _v193 = (_v148 + _v192);
    const _v194 = allValues[idx_45];
    const _v195 = Math.pow(_v193, _v194);
    const _v196 = (_v132 / _v142);
    const _v197 = (_v145 * _v196);
    const _v198 = (_v102 * _v143);
    const _v199 = (_v197 - _v198);
    const _v200 = (_v177 / _v187);
    const _v201 = (_v145 * _v200);
    const _v202 = (_v102 * _v188);
    const _v203 = (_v201 - _v202);
    const _v204 = (_v199 + _v203);
    const _v205 = allValues[idx_46];
    const _v206 = Math.pow(_v204, _v205);
    const _v207 = (_v195 + _v206);
    const _v208 = (_v102 * _v146);
    const _v209 = (_v103 * _v196);
    const _v210 = (_v208 - _v209);
    const _v211 = (_v102 * _v190);
    const _v212 = (_v103 * _v200);
    const _v213 = (_v211 - _v212);
    const _v214 = (_v210 + _v213);
    const _v215 = allValues[idx_47];
    const _v216 = Math.pow(_v214, _v215);
    const _v217 = (_v207 + _v216);
    const _v218 = Math.sqrt(_v217);
    const _v219 = (_v193 / _v218);
    const _v220 = (_v102 * _v219);
    const _v221 = (_v204 / _v218);
    const _v222 = (_v103 * _v221);
    const _v223 = (_v220 + _v222);
    const _v224 = (_v214 / _v218);
    const _v225 = (_v145 * _v224);
    const _v226 = (_v223 + _v225);
    const _v227 = (_v226 * _v226);
    const _v228 = (_v65 * _v227);
    const _v229 = (_v109 - _v1);
    const _v230 = allValues[idx_48];
    const _v231 = Math.pow(_v229, _v230);
    const _v232 = (_v105 - _v6);
    const _v233 = allValues[idx_49];
    const _v234 = Math.pow(_v232, _v233);
    const _v235 = (_v231 + _v234);
    const _v236 = (_v113 - _v12);
    const _v237 = allValues[idx_50];
    const _v238 = Math.pow(_v236, _v237);
    const _v239 = (_v235 + _v238);
    const _v240 = Math.sqrt(_v239);
    const _v241 = (_v229 / _v240);
    const _v242 = (_v0 - _v1);
    const _v243 = allValues[idx_51];
    const _v244 = Math.pow(_v242, _v243);
    const _v245 = (_v5 - _v6);
    const _v246 = allValues[idx_52];
    const _v247 = Math.pow(_v245, _v246);
    const _v248 = (_v244 + _v247);
    const _v249 = (_v11 - _v12);
    const _v250 = allValues[idx_53];
    const _v251 = Math.pow(_v249, _v250);
    const _v252 = (_v248 + _v251);
    const _v253 = Math.sqrt(_v252);
    const _v254 = (_v242 / _v253);
    const _v255 = (_v241 * _v254);
    const _v256 = (_v232 / _v240);
    const _v257 = (_v245 / _v253);
    const _v258 = (_v256 * _v257);
    const _v259 = (_v255 + _v258);
    const _v260 = (_v236 / _v240);
    const _v261 = (_v249 / _v253);
    const _v262 = (_v260 * _v261);
    const _v263 = (_v259 + _v262);
    const _v264 = allValues[idx_54];
    const _v265 = Math.pow(_v241, _v264);
    const _v266 = allValues[idx_55];
    const _v267 = Math.pow(_v256, _v266);
    const _v268 = (_v265 + _v267);
    const _v269 = allValues[idx_56];
    const _v270 = Math.pow(_v260, _v269);
    const _v271 = (_v268 + _v270);
    const _v272 = Math.sqrt(_v271);
    const _v273 = allValues[idx_57];
    const _v274 = Math.pow(_v254, _v273);
    const _v275 = allValues[idx_58];
    const _v276 = Math.pow(_v257, _v275);
    const _v277 = (_v274 + _v276);
    const _v278 = allValues[idx_59];
    const _v279 = Math.pow(_v261, _v278);
    const _v280 = (_v277 + _v279);
    const _v281 = Math.sqrt(_v280);
    const _v282 = (_v272 * _v281);
    const _v283 = (_v263 / _v282);
    const _v284 = Math.max(-1, Math.min(_v283, 1));
    const _v285 = Math.acos(_v284);
    const _v286 = (_v196 * _v219);
    const _v287 = (_v146 * _v221);
    const _v288 = (_v286 + _v287);
    const _v289 = (_v143 * _v224);
    const _v290 = (_v288 + _v289);
    const _v291 = (_v290 * _v290);
    const _v292 = (_v285 * _v291);
    const _v293 = (_v228 + _v292);
    let grad__v0 = 0;
    let grad__v1 = 0;
    let grad__v2 = 0;
    let grad__v3 = 0;
    let grad__v4 = 0;
    let grad__v5 = 0;
    let grad__v6 = 0;
    let grad__v7 = 0;
    let grad__v8 = 0;
    let grad__v9 = 0;
    let grad__v10 = 0;
    let grad__v11 = 0;
    let grad__v12 = 0;
    let grad__v13 = 0;
    let grad__v14 = 0;
    let grad__v15 = 0;
    let grad__v16 = 0;
    let grad__v17 = 0;
    let grad__v18 = 0;
    let grad__v19 = 0;
    let grad__v20 = 0;
    let grad__v21 = 0;
    let grad__v22 = 0;
    let grad__v23 = 0;
    let grad__v24 = 0;
    let grad__v25 = 0;
    let grad__v26 = 0;
    let grad__v27 = 0;
    let grad__v28 = 0;
    let grad__v29 = 0;
    let grad__v30 = 0;
    let grad__v31 = 0;
    let grad__v32 = 0;
    let grad__v33 = 0;
    let grad__v34 = 0;
    let grad__v35 = 0;
    let grad__v36 = 0;
    let grad__v37 = 0;
    let grad__v38 = 0;
    let grad__v39 = 0;
    let grad__v40 = 0;
    let grad__v41 = 0;
    let grad__v42 = 0;
    let grad__v43 = 0;
    let grad__v44 = 0;
    let grad__v45 = 0;
    let grad__v46 = 0;
    let grad__v47 = 0;
    let grad__v48 = 0;
    let grad__v49 = 0;
    let grad__v50 = 0;
    let grad__v51 = 0;
    let grad__v52 = 0;
    let grad__v53 = 0;
    let grad__v54 = 0;
    let grad__v55 = 0;
    let grad__v56 = 0;
    let grad__v57 = 0;
    let grad__v58 = 0;
    let grad__v59 = 0;
    let grad__v60 = 0;
    let grad__v61 = 0;
    let grad__v62 = 0;
    let grad__v63 = 0;
    let grad__v64 = 0;
    let grad__v65 = 0;
    let grad__v66 = 0;
    let grad__v67 = 0;
    let grad__v68 = 0;
    let grad__v69 = 0;
    let grad__v70 = 0;
    let grad__v71 = 0;
    let grad__v72 = 0;
    let grad__v73 = 0;
    let grad__v74 = 0;
    let grad__v75 = 0;
    let grad__v76 = 0;
    let grad__v77 = 0;
    let grad__v78 = 0;
    let grad__v79 = 0;
    let grad__v80 = 0;
    let grad__v81 = 0;
    let grad__v82 = 0;
    let grad__v83 = 0;
    let grad__v84 = 0;
    let grad__v85 = 0;
    let grad__v86 = 0;
    let grad__v87 = 0;
    let grad__v88 = 0;
    let grad__v89 = 0;
    let grad__v90 = 0;
    let grad__v91 = 0;
    let grad__v92 = 0;
    let grad__v93 = 0;
    let grad__v94 = 0;
    let grad__v95 = 0;
    let grad__v96 = 0;
    let grad__v97 = 0;
    let grad__v98 = 0;
    let grad__v99 = 0;
    let grad__v100 = 0;
    let grad__v101 = 0;
    let grad__v102 = 0;
    let grad__v103 = 0;
    let grad__v104 = 0;
    let grad__v105 = 0;
    let grad__v106 = 0;
    let grad__v107 = 0;
    let grad__v108 = 0;
    let grad__v109 = 0;
    let grad__v110 = 0;
    let grad__v111 = 0;
    let grad__v112 = 0;
    let grad__v113 = 0;
    let grad__v114 = 0;
    let grad__v115 = 0;
    let grad__v116 = 0;
    let grad__v117 = 0;
    let grad__v118 = 0;
    let grad__v119 = 0;
    let grad__v120 = 0;
    let grad__v121 = 0;
    let grad__v122 = 0;
    let grad__v123 = 0;
    let grad__v124 = 0;
    let grad__v125 = 0;
    let grad__v126 = 0;
    let grad__v127 = 0;
    let grad__v128 = 0;
    let grad__v129 = 0;
    let grad__v130 = 0;
    let grad__v131 = 0;
    let grad__v132 = 0;
    let grad__v133 = 0;
    let grad__v134 = 0;
    let grad__v135 = 0;
    let grad__v136 = 0;
    let grad__v137 = 0;
    let grad__v138 = 0;
    let grad__v139 = 0;
    let grad__v140 = 0;
    let grad__v141 = 0;
    let grad__v142 = 0;
    let grad__v143 = 0;
    let grad__v144 = 0;
    let grad__v145 = 0;
    let grad__v146 = 0;
    let grad__v147 = 0;
    let grad__v148 = 0;
    let grad__v149 = 0;
    let grad__v150 = 0;
    let grad__v151 = 0;
    let grad__v152 = 0;
    let grad__v153 = 0;
    let grad__v154 = 0;
    let grad__v155 = 0;
    let grad__v156 = 0;
    let grad__v157 = 0;
    let grad__v158 = 0;
    let grad__v159 = 0;
    let grad__v160 = 0;
    let grad__v161 = 0;
    let grad__v162 = 0;
    let grad__v163 = 0;
    let grad__v164 = 0;
    let grad__v165 = 0;
    let grad__v166 = 0;
    let grad__v167 = 0;
    let grad__v168 = 0;
    let grad__v169 = 0;
    let grad__v170 = 0;
    let grad__v171 = 0;
    let grad__v172 = 0;
    let grad__v173 = 0;
    let grad__v174 = 0;
    let grad__v175 = 0;
    let grad__v176 = 0;
    let grad__v177 = 0;
    let grad__v178 = 0;
    let grad__v179 = 0;
    let grad__v180 = 0;
    let grad__v181 = 0;
    let grad__v182 = 0;
    let grad__v183 = 0;
    let grad__v184 = 0;
    let grad__v185 = 0;
    let grad__v186 = 0;
    let grad__v187 = 0;
    let grad__v188 = 0;
    let grad__v189 = 0;
    let grad__v190 = 0;
    let grad__v191 = 0;
    let grad__v192 = 0;
    let grad__v193 = 0;
    let grad__v194 = 0;
    let grad__v195 = 0;
    let grad__v196 = 0;
    let grad__v197 = 0;
    let grad__v198 = 0;
    let grad__v199 = 0;
    let grad__v200 = 0;
    let grad__v201 = 0;
    let grad__v202 = 0;
    let grad__v203 = 0;
    let grad__v204 = 0;
    let grad__v205 = 0;
    let grad__v206 = 0;
    let grad__v207 = 0;
    let grad__v208 = 0;
    let grad__v209 = 0;
    let grad__v210 = 0;
    let grad__v211 = 0;
    let grad__v212 = 0;
    let grad__v213 = 0;
    let grad__v214 = 0;
    let grad__v215 = 0;
    let grad__v216 = 0;
    let grad__v217 = 0;
    let grad__v218 = 0;
    let grad__v219 = 0;
    let grad__v220 = 0;
    let grad__v221 = 0;
    let grad__v222 = 0;
    let grad__v223 = 0;
    let grad__v224 = 0;
    let grad__v225 = 0;
    let grad__v226 = 0;
    let grad__v227 = 0;
    let grad__v228 = 0;
    let grad__v229 = 0;
    let grad__v230 = 0;
    let grad__v231 = 0;
    let grad__v232 = 0;
    let grad__v233 = 0;
    let grad__v234 = 0;
    let grad__v235 = 0;
    let grad__v236 = 0;
    let grad__v237 = 0;
    let grad__v238 = 0;
    let grad__v239 = 0;
    let grad__v240 = 0;
    let grad__v241 = 0;
    let grad__v242 = 0;
    let grad__v243 = 0;
    let grad__v244 = 0;
    let grad__v245 = 0;
    let grad__v246 = 0;
    let grad__v247 = 0;
    let grad__v248 = 0;
    let grad__v249 = 0;
    let grad__v250 = 0;
    let grad__v251 = 0;
    let grad__v252 = 0;
    let grad__v253 = 0;
    let grad__v254 = 0;
    let grad__v255 = 0;
    let grad__v256 = 0;
    let grad__v257 = 0;
    let grad__v258 = 0;
    let grad__v259 = 0;
    let grad__v260 = 0;
    let grad__v261 = 0;
    let grad__v262 = 0;
    let grad__v263 = 0;
    let grad__v264 = 0;
    let grad__v265 = 0;
    let grad__v266 = 0;
    let grad__v267 = 0;
    let grad__v268 = 0;
    let grad__v269 = 0;
    let grad__v270 = 0;
    let grad__v271 = 0;
    let grad__v272 = 0;
    let grad__v273 = 0;
    let grad__v274 = 0;
    let grad__v275 = 0;
    let grad__v276 = 0;
    let grad__v277 = 0;
    let grad__v278 = 0;
    let grad__v279 = 0;
    let grad__v280 = 0;
    let grad__v281 = 0;
    let grad__v282 = 0;
    let grad__v283 = 0;
    let grad__v284 = 0;
    let grad__v285 = 0;
    let grad__v286 = 0;
    let grad__v287 = 0;
    let grad__v288 = 0;
    let grad__v289 = 0;
    let grad__v290 = 0;
    let grad__v291 = 0;
    let grad__v292 = 0;
    let grad__v293 = 0;
    grad__v293 = 1;
    grad__v228 += grad__v293; grad__v292 += grad__v293;
    grad__v285 += grad__v292 * _v291; grad__v291 += grad__v292 * _v285;
    grad__v290 += grad__v291 * _v290; grad__v290 += grad__v291 * _v290;
    grad__v288 += grad__v290; grad__v289 += grad__v290;
    grad__v143 += grad__v289 * _v224; grad__v224 += grad__v289 * _v143;
    grad__v286 += grad__v288; grad__v287 += grad__v288;
    grad__v146 += grad__v287 * _v221; grad__v221 += grad__v287 * _v146;
    grad__v196 += grad__v286 * _v219; grad__v219 += grad__v286 * _v196;
    grad__v284 += grad__v285 / (-Math.sqrt(1 - _v284 * _v284));
    grad__v283 += grad__v284 * (_v283 > -1 && _v283 < 1 ? 1 : 0);
    grad__v263 += grad__v283 / _v282; grad__v282 -= grad__v283 * _v263 / (_v282 * _v282);
    grad__v272 += grad__v282 * _v281; grad__v281 += grad__v282 * _v272;
    grad__v280 += grad__v281 * 0.5 / Math.sqrt(_v280);
    grad__v277 += grad__v280; grad__v279 += grad__v280;
    grad__v261 += grad__v279 * _v278 * Math.pow(_v261, _v278 - 1); grad__v278 += grad__v279 * Math.pow(_v261, _v278) * Math.log(_v261);
    grad__v274 += grad__v277; grad__v276 += grad__v277;
    grad__v257 += grad__v276 * _v275 * Math.pow(_v257, _v275 - 1); grad__v275 += grad__v276 * Math.pow(_v257, _v275) * Math.log(_v257);
    grad__v254 += grad__v274 * _v273 * Math.pow(_v254, _v273 - 1); grad__v273 += grad__v274 * Math.pow(_v254, _v273) * Math.log(_v254);
    grad__v271 += grad__v272 * 0.5 / Math.sqrt(_v271);
    grad__v268 += grad__v271; grad__v270 += grad__v271;
    grad__v260 += grad__v270 * _v269 * Math.pow(_v260, _v269 - 1); grad__v269 += grad__v270 * Math.pow(_v260, _v269) * Math.log(_v260);
    grad__v265 += grad__v268; grad__v267 += grad__v268;
    grad__v256 += grad__v267 * _v266 * Math.pow(_v256, _v266 - 1); grad__v266 += grad__v267 * Math.pow(_v256, _v266) * Math.log(_v256);
    grad__v241 += grad__v265 * _v264 * Math.pow(_v241, _v264 - 1); grad__v264 += grad__v265 * Math.pow(_v241, _v264) * Math.log(_v241);
    grad__v259 += grad__v263; grad__v262 += grad__v263;
    grad__v260 += grad__v262 * _v261; grad__v261 += grad__v262 * _v260;
    grad__v249 += grad__v261 / _v253; grad__v253 -= grad__v261 * _v249 / (_v253 * _v253);
    grad__v236 += grad__v260 / _v240; grad__v240 -= grad__v260 * _v236 / (_v240 * _v240);
    grad__v255 += grad__v259; grad__v258 += grad__v259;
    grad__v256 += grad__v258 * _v257; grad__v257 += grad__v258 * _v256;
    grad__v245 += grad__v257 / _v253; grad__v253 -= grad__v257 * _v245 / (_v253 * _v253);
    grad__v232 += grad__v256 / _v240; grad__v240 -= grad__v256 * _v232 / (_v240 * _v240);
    grad__v241 += grad__v255 * _v254; grad__v254 += grad__v255 * _v241;
    grad__v242 += grad__v254 / _v253; grad__v253 -= grad__v254 * _v242 / (_v253 * _v253);
    grad__v252 += grad__v253 * 0.5 / Math.sqrt(_v252);
    grad__v248 += grad__v252; grad__v251 += grad__v252;
    grad__v249 += grad__v251 * _v250 * Math.pow(_v249, _v250 - 1); grad__v250 += grad__v251 * Math.pow(_v249, _v250) * Math.log(_v249);
    grad__v11 += grad__v249; grad__v12 -= grad__v249;
    grad__v244 += grad__v248; grad__v247 += grad__v248;
    grad__v245 += grad__v247 * _v246 * Math.pow(_v245, _v246 - 1); grad__v246 += grad__v247 * Math.pow(_v245, _v246) * Math.log(_v245);
    grad__v5 += grad__v245; grad__v6 -= grad__v245;
    grad__v242 += grad__v244 * _v243 * Math.pow(_v242, _v243 - 1); grad__v243 += grad__v244 * Math.pow(_v242, _v243) * Math.log(_v242);
    grad__v0 += grad__v242; grad__v1 -= grad__v242;
    grad__v229 += grad__v241 / _v240; grad__v240 -= grad__v241 * _v229 / (_v240 * _v240);
    grad__v239 += grad__v240 * 0.5 / Math.sqrt(_v239);
    grad__v235 += grad__v239; grad__v238 += grad__v239;
    grad__v236 += grad__v238 * _v237 * Math.pow(_v236, _v237 - 1); grad__v237 += grad__v238 * Math.pow(_v236, _v237) * Math.log(_v236);
    grad__v113 += grad__v236; grad__v12 -= grad__v236;
    grad__v231 += grad__v235; grad__v234 += grad__v235;
    grad__v232 += grad__v234 * _v233 * Math.pow(_v232, _v233 - 1); grad__v233 += grad__v234 * Math.pow(_v232, _v233) * Math.log(_v232);
    grad__v105 += grad__v232; grad__v6 -= grad__v232;
    grad__v229 += grad__v231 * _v230 * Math.pow(_v229, _v230 - 1); grad__v230 += grad__v231 * Math.pow(_v229, _v230) * Math.log(_v229);
    grad__v109 += grad__v229; grad__v1 -= grad__v229;
    grad__v65 += grad__v228 * _v227; grad__v227 += grad__v228 * _v65;
    grad__v226 += grad__v227 * _v226; grad__v226 += grad__v227 * _v226;
    grad__v223 += grad__v226; grad__v225 += grad__v226;
    grad__v145 += grad__v225 * _v224; grad__v224 += grad__v225 * _v145;
    grad__v214 += grad__v224 / _v218; grad__v218 -= grad__v224 * _v214 / (_v218 * _v218);
    grad__v220 += grad__v223; grad__v222 += grad__v223;
    grad__v103 += grad__v222 * _v221; grad__v221 += grad__v222 * _v103;
    grad__v204 += grad__v221 / _v218; grad__v218 -= grad__v221 * _v204 / (_v218 * _v218);
    grad__v102 += grad__v220 * _v219; grad__v219 += grad__v220 * _v102;
    grad__v193 += grad__v219 / _v218; grad__v218 -= grad__v219 * _v193 / (_v218 * _v218);
    grad__v217 += grad__v218 * 0.5 / Math.sqrt(_v217);
    grad__v207 += grad__v217; grad__v216 += grad__v217;
    grad__v214 += grad__v216 * _v215 * Math.pow(_v214, _v215 - 1); grad__v215 += grad__v216 * Math.pow(_v214, _v215) * Math.log(_v214);
    grad__v210 += grad__v214; grad__v213 += grad__v214;
    grad__v211 += grad__v213; grad__v212 -= grad__v213;
    grad__v103 += grad__v212 * _v200; grad__v200 += grad__v212 * _v103;
    grad__v102 += grad__v211 * _v190; grad__v190 += grad__v211 * _v102;
    grad__v208 += grad__v210; grad__v209 -= grad__v210;
    grad__v103 += grad__v209 * _v196; grad__v196 += grad__v209 * _v103;
    grad__v102 += grad__v208 * _v146; grad__v146 += grad__v208 * _v102;
    grad__v195 += grad__v207; grad__v206 += grad__v207;
    grad__v204 += grad__v206 * _v205 * Math.pow(_v204, _v205 - 1); grad__v205 += grad__v206 * Math.pow(_v204, _v205) * Math.log(_v204);
    grad__v199 += grad__v204; grad__v203 += grad__v204;
    grad__v201 += grad__v203; grad__v202 -= grad__v203;
    grad__v102 += grad__v202 * _v188; grad__v188 += grad__v202 * _v102;
    grad__v145 += grad__v201 * _v200; grad__v200 += grad__v201 * _v145;
    grad__v177 += grad__v200 / _v187; grad__v187 -= grad__v200 * _v177 / (_v187 * _v187);
    grad__v197 += grad__v199; grad__v198 -= grad__v199;
    grad__v102 += grad__v198 * _v143; grad__v143 += grad__v198 * _v102;
    grad__v145 += grad__v197 * _v196; grad__v196 += grad__v197 * _v145;
    grad__v132 += grad__v196 / _v142; grad__v142 -= grad__v196 * _v132 / (_v142 * _v142);
    grad__v193 += grad__v195 * _v194 * Math.pow(_v193, _v194 - 1); grad__v194 += grad__v195 * Math.pow(_v193, _v194) * Math.log(_v193);
    grad__v148 += grad__v193; grad__v192 += grad__v193;
    grad__v189 += grad__v192; grad__v191 -= grad__v192;
    grad__v145 += grad__v191 * _v190; grad__v190 += grad__v191 * _v145;
    grad__v180 += grad__v190 / _v187; grad__v187 -= grad__v190 * _v180 / (_v187 * _v187);
    grad__v103 += grad__v189 * _v188; grad__v188 += grad__v189 * _v103;
    grad__v176 += grad__v188 / _v187; grad__v187 -= grad__v188 * _v176 / (_v187 * _v187);
    grad__v186 += grad__v187 * 0.5 / Math.sqrt(_v186);
    grad__v183 += grad__v186; grad__v185 += grad__v186;
    grad__v176 += grad__v185 * _v184 * Math.pow(_v176, _v184 - 1); grad__v184 += grad__v185 * Math.pow(_v176, _v184) * Math.log(_v176);
    grad__v179 += grad__v183; grad__v182 += grad__v183;
    grad__v180 += grad__v182 * _v181 * Math.pow(_v180, _v181 - 1); grad__v181 += grad__v182 * Math.pow(_v180, _v181) * Math.log(_v180);
    grad__v168 += grad__v180 / _v175; grad__v175 -= grad__v180 * _v168 / (_v175 * _v175);
    grad__v177 += grad__v179 * _v178 * Math.pow(_v177, _v178 - 1); grad__v178 += grad__v179 * Math.pow(_v177, _v178) * Math.log(_v177);
    grad__v163 += grad__v177 / _v175; grad__v175 -= grad__v177 * _v163 / (_v175 * _v175);
    grad__v157 += grad__v176 / _v175; grad__v175 -= grad__v176 * _v157 / (_v175 * _v175);
    grad__v174 += grad__v175 * 0.5 / Math.sqrt(_v174);
    grad__v171 += grad__v174; grad__v173 += grad__v174;
    grad__v157 += grad__v173 * _v172 * Math.pow(_v157, _v172 - 1); grad__v172 += grad__v173 * Math.pow(_v157, _v172) * Math.log(_v157);
    grad__v165 += grad__v171; grad__v170 += grad__v171;
    grad__v168 += grad__v170 * _v169 * Math.pow(_v168, _v169 - 1); grad__v169 += grad__v170 * Math.pow(_v168, _v169) * Math.log(_v168);
    grad__v166 += grad__v168; grad__v167 -= grad__v168;
    grad__v149 += grad__v167 * _v159; grad__v159 += grad__v167 * _v149;
    grad__v161 += grad__v166 * _v155; grad__v155 += grad__v166 * _v161;
    grad__v163 += grad__v165 * _v164 * Math.pow(_v163, _v164 - 1); grad__v164 += grad__v165 * Math.pow(_v163, _v164) * Math.log(_v163);
    grad__v160 += grad__v163; grad__v162 -= grad__v163;
    grad__v161 += grad__v162 * _v151; grad__v151 += grad__v162 * _v161;
    grad__v113 += grad__v161; grad__v12 -= grad__v161;
    grad__v153 += grad__v160 * _v159; grad__v159 += grad__v160 * _v153;
    grad__v158 += grad__v159; grad__v12 -= grad__v159;
    grad__v152 += grad__v157; grad__v156 -= grad__v157;
    grad__v153 += grad__v156 * _v155; grad__v155 += grad__v156 * _v153;
    grad__v154 += grad__v155; grad__v1 -= grad__v155;
    grad__v105 += grad__v153; grad__v6 -= grad__v153;
    grad__v149 += grad__v152 * _v151; grad__v151 += grad__v152 * _v149;
    grad__v150 += grad__v151; grad__v6 -= grad__v151;
    grad__v109 += grad__v149; grad__v1 -= grad__v149;
    grad__v144 += grad__v148; grad__v147 -= grad__v148;
    grad__v145 += grad__v147 * _v146; grad__v146 += grad__v147 * _v145;
    grad__v135 += grad__v146 / _v142; grad__v142 -= grad__v146 * _v135 / (_v142 * _v142);
    grad__v97 += grad__v145 / _v101; grad__v101 -= grad__v145 * _v97 / (_v101 * _v101);
    grad__v103 += grad__v144 * _v143; grad__v143 += grad__v144 * _v103;
    grad__v131 += grad__v143 / _v142; grad__v142 -= grad__v143 * _v131 / (_v142 * _v142);
    grad__v141 += grad__v142 * 0.5 / Math.sqrt(_v141);
    grad__v138 += grad__v141; grad__v140 += grad__v141;
    grad__v131 += grad__v140 * _v139 * Math.pow(_v131, _v139 - 1); grad__v139 += grad__v140 * Math.pow(_v131, _v139) * Math.log(_v131);
    grad__v134 += grad__v138; grad__v137 += grad__v138;
    grad__v135 += grad__v137 * _v136 * Math.pow(_v135, _v136 - 1); grad__v136 += grad__v137 * Math.pow(_v135, _v136) * Math.log(_v135);
    grad__v123 += grad__v135 / _v130; grad__v130 -= grad__v135 * _v123 / (_v130 * _v130);
    grad__v132 += grad__v134 * _v133 * Math.pow(_v132, _v133 - 1); grad__v133 += grad__v134 * Math.pow(_v132, _v133) * Math.log(_v132);
    grad__v118 += grad__v132 / _v130; grad__v130 -= grad__v132 * _v118 / (_v130 * _v130);
    grad__v112 += grad__v131 / _v130; grad__v130 -= grad__v131 * _v112 / (_v130 * _v130);
    grad__v129 += grad__v130 * 0.5 / Math.sqrt(_v129);
    grad__v126 += grad__v129; grad__v128 += grad__v129;
    grad__v112 += grad__v128 * _v127 * Math.pow(_v112, _v127 - 1); grad__v127 += grad__v128 * Math.pow(_v112, _v127) * Math.log(_v112);
    grad__v120 += grad__v126; grad__v125 += grad__v126;
    grad__v123 += grad__v125 * _v124 * Math.pow(_v123, _v124 - 1); grad__v124 += grad__v125 * Math.pow(_v123, _v124) * Math.log(_v123);
    grad__v121 += grad__v123; grad__v122 -= grad__v123;
    grad__v104 += grad__v122 * _v114; grad__v114 += grad__v122 * _v104;
    grad__v116 += grad__v121 * _v110; grad__v110 += grad__v121 * _v116;
    grad__v118 += grad__v120 * _v119 * Math.pow(_v118, _v119 - 1); grad__v119 += grad__v120 * Math.pow(_v118, _v119) * Math.log(_v118);
    grad__v115 += grad__v118; grad__v117 -= grad__v118;
    grad__v116 += grad__v117 * _v106; grad__v106 += grad__v117 * _v116;
    grad__v11 += grad__v116; grad__v12 -= grad__v116;
    grad__v108 += grad__v115 * _v114; grad__v114 += grad__v115 * _v108;
    grad__v113 += grad__v114; grad__v12 -= grad__v114;
    grad__v107 += grad__v112; grad__v111 -= grad__v112;
    grad__v108 += grad__v111 * _v110; grad__v110 += grad__v111 * _v108;
    grad__v109 += grad__v110; grad__v1 -= grad__v110;
    grad__v5 += grad__v108; grad__v6 -= grad__v108;
    grad__v104 += grad__v107 * _v106; grad__v106 += grad__v107 * _v104;
    grad__v105 += grad__v106; grad__v6 -= grad__v106;
    grad__v0 += grad__v104; grad__v1 -= grad__v104;
    grad__v93 += grad__v103 / _v101; grad__v101 -= grad__v103 * _v93 / (_v101 * _v101);
    grad__v90 += grad__v102 / _v101; grad__v101 -= grad__v102 * _v90 / (_v101 * _v101);
    grad__v100 += grad__v101 * 0.5 / Math.sqrt(_v100);
    grad__v96 += grad__v100; grad__v99 += grad__v100;
    grad__v97 += grad__v99 * _v98 * Math.pow(_v97, _v98 - 1); grad__v98 += grad__v99 * Math.pow(_v97, _v98) * Math.log(_v97);
    grad__v85 += grad__v97 / _v89; grad__v89 -= grad__v97 * _v85 / (_v89 * _v89);
    grad__v92 += grad__v96; grad__v95 += grad__v96;
    grad__v93 += grad__v95 * _v94 * Math.pow(_v93, _v94 - 1); grad__v94 += grad__v95 * Math.pow(_v93, _v94) * Math.log(_v93);
    grad__v79 += grad__v93 / _v89; grad__v89 -= grad__v93 * _v79 / (_v89 * _v89);
    grad__v90 += grad__v92 * _v91 * Math.pow(_v90, _v91 - 1); grad__v91 += grad__v92 * Math.pow(_v90, _v91) * Math.log(_v90);
    grad__v72 += grad__v90 / _v89; grad__v89 -= grad__v90 * _v72 / (_v89 * _v89);
    grad__v88 += grad__v89 * 0.5 / Math.sqrt(_v88);
    grad__v82 += grad__v88; grad__v87 += grad__v88;
    grad__v85 += grad__v87 * _v86 * Math.pow(_v85, _v86 - 1); grad__v86 += grad__v87 * Math.pow(_v85, _v86) * Math.log(_v85);
    grad__v83 += grad__v85; grad__v84 -= grad__v85;
    grad__v66 += grad__v84 * _v75; grad__v75 += grad__v84 * _v66;
    grad__v77 += grad__v83 * _v70; grad__v70 += grad__v83 * _v77;
    grad__v74 += grad__v82; grad__v81 += grad__v82;
    grad__v79 += grad__v81 * _v80 * Math.pow(_v79, _v80 - 1); grad__v80 += grad__v81 * Math.pow(_v79, _v80) * Math.log(_v79);
    grad__v76 += grad__v79; grad__v78 -= grad__v79;
    grad__v77 += grad__v78 * _v67; grad__v67 += grad__v78 * _v77;
    grad__v19 += grad__v77; grad__v1 -= grad__v77;
    grad__v69 += grad__v76 * _v75; grad__v75 += grad__v76 * _v69;
    grad__v0 += grad__v75; grad__v1 -= grad__v75;
    grad__v72 += grad__v74 * _v73 * Math.pow(_v72, _v73 - 1); grad__v73 += grad__v74 * Math.pow(_v72, _v73) * Math.log(_v72);
    grad__v68 += grad__v72; grad__v71 -= grad__v72;
    grad__v69 += grad__v71 * _v70; grad__v70 += grad__v71 * _v69;
    grad__v5 += grad__v70; grad__v6 -= grad__v70;
    grad__v28 += grad__v69; grad__v12 -= grad__v69;
    grad__v66 += grad__v68 * _v67; grad__v67 += grad__v68 * _v66;
    grad__v11 += grad__v67; grad__v12 -= grad__v67;
    grad__v23 += grad__v66; grad__v6 -= grad__v66;
    grad__v64 += grad__v65 / (-Math.sqrt(1 - _v64 * _v64));
    grad__v63 += grad__v64 * (_v63 > -1 && _v63 < 1 ? 1 : 0);
    grad__v43 += grad__v63 / _v62; grad__v62 -= grad__v63 * _v43 / (_v62 * _v62);
    grad__v52 += grad__v62 * _v61; grad__v61 += grad__v62 * _v52;
    grad__v60 += grad__v61 * 0.5 / Math.sqrt(_v60);
    grad__v57 += grad__v60; grad__v59 += grad__v60;
    grad__v41 += grad__v59 * _v58 * Math.pow(_v41, _v58 - 1); grad__v58 += grad__v59 * Math.pow(_v41, _v58) * Math.log(_v41);
    grad__v54 += grad__v57; grad__v56 += grad__v57;
    grad__v37 += grad__v56 * _v55 * Math.pow(_v37, _v55 - 1); grad__v55 += grad__v56 * Math.pow(_v37, _v55) * Math.log(_v37);
    grad__v34 += grad__v54 * _v53 * Math.pow(_v34, _v53 - 1); grad__v53 += grad__v54 * Math.pow(_v34, _v53) * Math.log(_v34);
    grad__v51 += grad__v52 * 0.5 / Math.sqrt(_v51);
    grad__v48 += grad__v51; grad__v50 += grad__v51;
    grad__v40 += grad__v50 * _v49 * Math.pow(_v40, _v49 - 1); grad__v49 += grad__v50 * Math.pow(_v40, _v49) * Math.log(_v40);
    grad__v45 += grad__v48; grad__v47 += grad__v48;
    grad__v36 += grad__v47 * _v46 * Math.pow(_v36, _v46 - 1); grad__v46 += grad__v47 * Math.pow(_v36, _v46) * Math.log(_v36);
    grad__v18 += grad__v45 * _v44 * Math.pow(_v18, _v44 - 1); grad__v44 += grad__v45 * Math.pow(_v18, _v44) * Math.log(_v18);
    grad__v39 += grad__v43; grad__v42 += grad__v43;
    grad__v40 += grad__v42 * _v41; grad__v41 += grad__v42 * _v40;
    grad__v29 += grad__v41 / _v33; grad__v33 -= grad__v41 * _v29 / (_v33 * _v33);
    grad__v13 += grad__v40 / _v17; grad__v17 -= grad__v40 * _v13 / (_v17 * _v17);
    grad__v35 += grad__v39; grad__v38 += grad__v39;
    grad__v36 += grad__v38 * _v37; grad__v37 += grad__v38 * _v36;
    grad__v24 += grad__v37 / _v33; grad__v33 -= grad__v37 * _v24 / (_v33 * _v33);
    grad__v7 += grad__v36 / _v17; grad__v17 -= grad__v36 * _v7 / (_v17 * _v17);
    grad__v18 += grad__v35 * _v34; grad__v34 += grad__v35 * _v18;
    grad__v20 += grad__v34 / _v33; grad__v33 -= grad__v34 * _v20 / (_v33 * _v33);
    grad__v32 += grad__v33 * 0.5 / Math.sqrt(_v32);
    grad__v27 += grad__v32; grad__v31 += grad__v32;
    grad__v29 += grad__v31 * _v30 * Math.pow(_v29, _v30 - 1); grad__v30 += grad__v31 * Math.pow(_v29, _v30) * Math.log(_v29);
    grad__v28 += grad__v29; grad__v12 -= grad__v29;
    grad__v22 += grad__v27; grad__v26 += grad__v27;
    grad__v24 += grad__v26 * _v25 * Math.pow(_v24, _v25 - 1); grad__v25 += grad__v26 * Math.pow(_v24, _v25) * Math.log(_v24);
    grad__v23 += grad__v24; grad__v6 -= grad__v24;
    grad__v20 += grad__v22 * _v21 * Math.pow(_v20, _v21 - 1); grad__v21 += grad__v22 * Math.pow(_v20, _v21) * Math.log(_v20);
    grad__v19 += grad__v20; grad__v1 -= grad__v20;
    grad__v2 += grad__v18 / _v17; grad__v17 -= grad__v18 * _v2 / (_v17 * _v17);
    grad__v16 += grad__v17 * 0.5 / Math.sqrt(_v16);
    grad__v10 += grad__v16; grad__v15 += grad__v16;
    grad__v13 += grad__v15 * _v14 * Math.pow(_v13, _v14 - 1); grad__v14 += grad__v15 * Math.pow(_v13, _v14) * Math.log(_v13);
    grad__v11 += grad__v13; grad__v12 -= grad__v13;
    grad__v4 += grad__v10; grad__v9 += grad__v10;
    grad__v7 += grad__v9 * _v8 * Math.pow(_v7, _v8 - 1); grad__v8 += grad__v9 * Math.pow(_v7, _v8) * Math.log(_v7);
    grad__v5 += grad__v7; grad__v6 -= grad__v7;
    grad__v2 += grad__v4 * _v3 * Math.pow(_v2, _v3 - 1); grad__v3 += grad__v4 * Math.pow(_v2, _v3) * Math.log(_v2);
    grad__v0 += grad__v2; grad__v1 -= grad__v2;
    gradient[gradientIndices[0]] += grad__v0;
    gradient[gradientIndices[1]] += grad__v1;
    gradient[gradientIndices[3]] += grad__v5;
    gradient[gradientIndices[4]] += grad__v6;
    gradient[gradientIndices[6]] += grad__v11;
    gradient[gradientIndices[7]] += grad__v12;
    gradient[gradientIndices[9]] += grad__v19;
    gradient[gradientIndices[11]] += grad__v23;
    gradient[gradientIndices[13]] += grad__v28;
    gradient[gradientIndices[27]] += grad__v105;
    gradient[gradientIndices[28]] += grad__v109;
    gradient[gradientIndices[29]] += grad__v113;
    gradient[gradientIndices[36]] += grad__v150;
    gradient[gradientIndices[37]] += grad__v154;
    gradient[gradientIndices[38]] += grad__v158;
    return _v293;
  
}


Saved to minimal-failing-kernel.js

 [32m✓[39m demos/developable-sphere/test/print-minimal-failing.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 275[2mms[22m[39m
 [32m✓[39m test/NonlinearLeastSquares.lm.spec.ts [2m([22m[2m9 tests[22m[2m)[22m[32m 284[2mms[22m[39m
[90mstdout[2m | demos/developable-sphere/test/graph-reuse-test.spec.ts[2m > [22m[2mGraph Reuse Test - DifferentiablePlaneAlignment[2m > [22m[2mshould build the same graph when called twice with same mesh state
[22m[39m
=== GRAPH REUSE TEST ===
Testing if DifferentiablePlaneAlignment builds the same graph twice

Building graph #1...
Graph #1: 12 residuals
  First residual value: 2.0792547552e-1
  First residual object ID: none

Mesh vertex 0 after graph #1:
  x: -0.5257311121191336 (same object as param? true)

Building graph #2...
Graph #2: 12 residuals
  First residual value: 2.0792547552e-1
  First residual object ID: none

Comparison:
  Same object? false
  Same value? true

Graph structure:
  Graph #1 first residual has 2 children
  Graph #2 first residual has 2 children

=== GRADIENT TEST ===

Gradient comparison (first 5):
  p[0]: -6.1575366337e-1 vs -6.1575366337e-1 (diff: 0.000000e+0)
  p[1]: 8.5483195983e-1 vs 8.5483195983e-1 (diff: 0.000000e+0)
  p[2]: -7.2397394535e-2 vs -7.2397394535e-2 (diff: 0.000000e+0)
  p[3]: -6.5997415043e-1 vs -6.5997415043e-1 (diff: 0.000000e+0)
  p[4]: -6.8292536803e-1 vs -6.8292536803e-1 (diff: 0.000000e+0)

Max gradient difference: 0.000000e+0
✓ Both graphs produce identical gradients


 [32m✓[39m demos/developable-sphere/test/graph-reuse-test.spec.ts [2m([22m[2m1 test[22m[2m)[22m[33m 451[2mms[22m[39m
   [33m[2m✓[22m[39m Graph Reuse Test - DifferentiablePlaneAlignment[2m > [22mshould build the same graph when called twice with same mesh state [33m 445[2mms[22m[39m
 [32m✓[39m demos/sketch-demo/src/__tests__/SketchSolver.spec.ts [2m([22m[2m21 tests[22m[2m | [22m[33m2 skipped[39m[2m)[22m[33m 675[2mms[22m[39m
   [33m[2m✓[22m[39m Solver Comparison - Adam vs Levenberg-Marquardt[2m > [22mshould find optimal Adam learning rate for Corner fixture [33m 428[2mms[22m[39m
 [32m✓[39m test/LBFGS.benchmark.spec.ts [2m([22m[2m8 tests[22m[2m)[22m[32m 192[2mms[22m[39m
[90mstdout[2m | test/eigen-proxy-energy.spec.ts[2m > [22m[2mEigenvalue Proxy Energy[2m > [22m[2mshould compare eigenproxy with variance and bounding box
[22m[39m
=== Energy Function Comparison ===

Bimodal Variance (Spatial Midpoint):
  Variance: 2.093e+1 → 2.093e+1
  Developable: 0.0% → 0.0%
  Iterations: 0, Initial gradient below tolerance

Bounding Box Spread:
  Variance: 1.834e+1 → 3.866e+0
  Developable: 0.0% → 75.9%
  Iterations: 50, Maximum iterations reached

Eigenvalue Proxy (Trace - Frobenius):
  Variance: 2.073e+1 → 8.511e+0
  Developable: 0.0% → 23.5%
  Iterations: 50, Maximum iterations reached

 [31m❯[39m test/eigen-proxy-energy.spec.ts [2m([22m[2m3 tests[22m[2m | [22m[31m1 failed[39m[2m)[22m[33m 15128[2mms[22m[39m
   [33m[2m✓[22m[39m Eigenvalue Proxy Energy[2m > [22mshould have non-zero energy on perturbed sphere [33m 1119[2mms[22m[39m
   [33m[2m✓[22m[39m Eigenvalue Proxy Energy[2m > [22mshould run multiple iterations and reduce energy [33m 3977[2mms[22m[39m
[31m   [31m×[31m Eigenvalue Proxy Energy[2m > [22mshould compare eigenproxy with variance and bounding box[39m[33m 10017[2mms[22m[39m
[31m     → expected 0 to be greater than 0[39m
 [32m✓[39m demos/sketch-demo/src/__tests__/SketchController.spec.ts [2m([22m[2m31 tests[22m[2m)[22m[32m 234[2mms[22m[39m
[90mstdout[2m | test/variance-simple.spec.ts[2m > [22m[2mVariance Simple Test[2m > [22m[2mshould not be 100% developable on a sphere
[22m[39m
Sphere: 162 vertices
Hinges: 0
Seams: 162
Developable: 0.0%
Vertex 0 energy: 2.561e-2
Vertex 1 energy: 2.561e-2
Vertex 2 energy: 2.561e-2
Vertex 3 energy: 2.561e-2
Vertex 4 energy: 2.561e-2

 [32m✓[39m test/variance-simple.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 182[2mms[22m[39m
[90mstdout[2m | test/gradient-accumulation.spec.ts[2m > [22m[2mGradient Accumulation[2m > [22m[2mshould accumulate gradients across multiple residuals
[22m[39m[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mtwo independent residuals
[22m[39m[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

[90mstdout[2m | test/gradient-accumulation.spec.ts[2m > [22m[2mGradient Accumulation[2m > [22m[2mshould accumulate gradients from structurally identical residuals
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mtwo residuals sharing parameter
[22m[39m[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

[90mstdout[2m | test/gradient-accumulation.spec.ts[2m > [22m[2mGradient Accumulation[2m > [22m[2mshould handle distance constraints with kernel reuse
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mthree residuals with complex expressions
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

[90mstdout[2m | test/gradient-accumulation.spec.ts[2m > [22m[2mGradient Accumulation[2m > [22m[2mshould match evaluateGradient for single function
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mresiduals with shared subexpressions
[22m[39m[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

 [32m✓[39m test/kernel-reuse/indirect-kernel-correctness.spec.ts [2m([22m[2m10 tests[22m[2m)[22m[32m 38[2mms[22m[39m
[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mdistance residuals (like IK)
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mmany residuals (10)
[22m[39m[CompiledFunctions] Compiling 10 functions...
[CompiledFunctions] Processing function 0/10

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mnormalized vector per-component residuals
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mcross product components as residuals
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mmixed complexity residuals
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

[90mstdout[2m | test/compiled-multi-residual.spec.ts[2m > [22m[2mCompiled Multi-Residual - Gradient Correctness[2m > [22m[2mresiduals with constants and parameters mixed
[22m[39m[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

 [32m✓[39m test/compiled-multi-residual.spec.ts [2m([22m[2m10 tests[22m[2m)[22m[32m 71[2mms[22m[39m
[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2madd
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2msub
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2mmul
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2mdiv
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/gradient-accumulation.spec.ts[2m > [22m[2mGradient Accumulation[2m > [22m[2mshould work with many identical residuals
[22m[39m[CompiledFunctions] Compiling 100 functions...
[CompiledFunctions] Processing function 0/100

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2mpow (numeric exponent)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2mpowValue
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2mabs (positive)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

 [32m✓[39m test/gradient-accumulation.spec.ts [2m([22m[2m5 tests[22m[2m)[22m[32m 137[2mms[22m[39m
[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2mabs (negative)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2msquare
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mArithmetic Operations[2m > [22m[2msqrt
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mTranscendental Functions[2m > [22m[2mexp
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mTranscendental Functions[2m > [22m[2mlog
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mTrigonometric Functions[2m > [22m[2msin
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mTrigonometric Functions[2m > [22m[2mcos
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mTrigonometric Functions[2m > [22m[2mtan
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mTrigonometric Functions[2m > [22m[2masin
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mTrigonometric Functions[2m > [22m[2macos
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mTrigonometric Functions[2m > [22m[2matan
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mActivation Functions[2m > [22m[2mrelu (positive)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mActivation Functions[2m > [22m[2mrelu (negative)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mActivation Functions[2m > [22m[2msigmoid
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mActivation Functions[2m > [22m[2mtanh
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mActivation Functions[2m > [22m[2msoftplus
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComparison Operations[2m > [22m[2mmin
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComparison Operations[2m > [22m[2mmin (reversed)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComparison Operations[2m > [22m[2mmax
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComparison Operations[2m > [22m[2mmax (reversed)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComposite Expressions[2m > [22m[2m(a + b) * c
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComposite Expressions[2m > [22m[2ma * exp(b * x) - y
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComposite Expressions[2m > [22m[2msqrt((x2-x1)^2 + (y2-y1)^2)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComposite Expressions[2m > [22m[2msin(a) * cos(b) + exp(c)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComposite Expressions[2m > [22m[2mnormalized vector
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mComposite Expressions[2m > [22m[2mdot product with cross product
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mEdge Cases[2m > [22m[2mvery small values
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mEdge Cases[2m > [22m[2mmixed scales
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-operators.spec.ts[2m > [22m[2mCompiled Operators - Gradient Correctness[2m > [22m[2mEdge Cases[2m > [22m[2mdeep nesting
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

 [32m✓[39m test/compiled-operators.spec.ts [2m([22m[2m36 tests[22m[2m)[22m[32m 173[2mms[22m[39m
[90mstdout[2m | test/LBFGS-compiled.spec.ts[2m > [22m[2mL-BFGS with Compiled Objectives[2m > [22m[2mshould solve quadratic with compiled objective
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled.spec.ts[2m > [22m[2mL-BFGS with Compiled Objectives[2m > [22m[2mshould match uncompiled results on Rosenbrock function
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled.spec.ts[2m > [22m[2mL-BFGS with Compiled Objectives[2m > [22m[2mshould handle multi-dimensional quadratic
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled.spec.ts[2m > [22m[2mL-BFGS with Compiled Objectives[2m > [22m[2mshould work with Beale function
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled.spec.ts[2m > [22m[2mL-BFGS with Compiled Objectives[2m > [22m[2mshould handle unused parameters gracefully
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled.spec.ts[2m > [22m[2mL-BFGS with Compiled Objectives[2m > [22m[2mshould work with exponential functions
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled.spec.ts[2m > [22m[2mL-BFGS with Compiled Objectives[2m > [22m[2mshould verify gradient correctness with numerical check
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

 [32m✓[39m test/LBFGS-compiled.spec.ts [2m([22m[2m7 tests[22m[2m)[22m[32m 87[2mms[22m[39m
[90mstdout[2m | test/kernel-reuse/kernel-pool-reuse.spec.ts[2m > [22m[2mKernel Pool Reuse[2m > [22m[2mshould reuse kernels for identical distance constraints
[22m[39m[CompiledFunctions] Compiling 10 functions...
[CompiledFunctions] Processing function 0/10
Distance constraints:
  Residuals: 10
  Kernels: 1
  Reuse factor: 10.0x

[90mstdout[2m | test/kernel-reuse/kernel-pool-reuse.spec.ts[2m > [22m[2mKernel Pool Reuse[2m > [22m[2mshould handle mixed kernel types
[22m[39m[CompiledFunctions] Compiling 5 functions...
[CompiledFunctions] Processing function 0/5

Mixed operations:
  Residuals: 5
  Kernels: 2
  Reuse factor: 2.5x

[90mstdout[2m | test/kernel-reuse/kernel-pool-reuse.spec.ts[2m > [22m[2mKernel Pool Reuse[2m > [22m[2mshould dedupe constants across residuals
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

Constant deduplication:
  Residuals: 3
  Kernels: 1

[90mstdout[2m | test/kernel-reuse/kernel-pool-reuse.spec.ts[2m > [22m[2mKernel Pool Reuse[2m > [22m[2mshould validate results match non-compiled version
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/kernel-reuse/kernel-pool-reuse.spec.ts[2m > [22m[2mKernel Pool Reuse[2m > [22m[2mshould handle 100 parallel line constraints
[22m[39m[CompiledFunctions] Compiling 100 functions...
[CompiledFunctions] Processing function 0/100
[GraphCanonicalizerNoSort] Total: 22ms | Phase1(discover): 0ms | Phase2(assign): 0ms | Phase3(expr): 0ms [traversal: 0ms, stringBuild: 0ms] | Phase4(build): 22ms | Nodes: 7 | NodeExprs: 3 | getNodeId calls: 7, cacheHits: 0 (0.0%), keyLength: 50
[KernelPool] Canonicalization took 22ms for graph with 4 params (mode: no-sort)
[KernelPool] Cache HIT - reusing existing kernel (pool size: 1)
  Canon: 0g,1g,2g,3g|n5:(-,1g,0g);n6:(-,3g,2g);n4:(-,n5,n6)

Parallel line constraints:
  Residuals: 100
  Kernels: 1
  Reuse factor: 100.0x

[90mstdout[2m | test/kernel-reuse/kernel-pool-reuse.spec.ts[2m > [22m[2mKernel Pool Reuse[2m > [22m[2mshould work with curve fitting residuals
[22m[39m[CompiledFunctions] Compiling 6 functions...
[CompiledFunctions] Processing function 0/6

Curve fitting:
  Residuals: 6
  Kernels: 1
  Reuse factor: 6.0x

 [32m✓[39m test/kernel-reuse/kernel-pool-reuse.spec.ts [2m([22m[2m6 tests[22m[2m)[22m[32m 112[2mms[22m[39m
[90mstdout[2m | test/LBFGS-compiled-benchmark.spec.ts[2m > [22m[2mL-BFGS Compiled Performance[2m > [22m[2mshould benchmark Rosenbrock: compiled vs uncompiled
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled-benchmark.spec.ts[2m > [22m[2mL-BFGS Compiled Performance[2m > [22m[2mshould benchmark high-dimensional quadratic
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled-benchmark.spec.ts[2m > [22m[2mL-BFGS Compiled Performance[2m > [22m[2mshould benchmark compilation overhead
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/LBFGS-compiled-benchmark.spec.ts[2m > [22m[2mL-BFGS Compiled Performance[2m > [22m[2mshould show speedup increases with problem size
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

 [32m✓[39m test/LBFGS-compiled-benchmark.spec.ts [2m([22m[2m4 tests[22m[2m)[22m[32m 214[2mms[22m[39m
[90mstdout[2m | test/compiled-vs-noncompiled-comparison.spec.ts[2m > [22m[2mCompiled vs Non-compiled comparison[2m > [22m[2mshould produce identical results for simple sphere energy
[22m[39m[CompiledFunctions] Compiling 12 functions...
[CompiledFunctions] Processing function 0/12
Non-compiled: [33m-12[39m iterations: [33m1[39m
Compiled: [33m-12[39m iterations: [33m1[39m

 [32m✓[39m test/compiled-vs-noncompiled-comparison.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 73[2mms[22m[39m
 [32m✓[39m demos/sketch-demo/src/__tests__/DataModel.spec.ts [2m([22m[2m16 tests[22m[2m)[22m[32m 36[2mms[22m[39m
 [32m✓[39m test/NonlinearLeastSquares.gradient.spec.ts [2m([22m[2m6 tests[22m[2m)[22m[32m 55[2mms[22m[39m
 [32m✓[39m test/Value.nn.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 123[2mms[22m[39m
[90mstdout[2m | test/ultra-minimal-bug.spec.ts[2m > [22m[2mUltra Minimal Bug[2m > [22m[2mTWO normals
[22m[39m
=== TWO NORMALS ===

[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Max gradient diff: 2.220446e-16
✅ PASS

[90mstdout[2m | test/ultra-minimal-bug.spec.ts[2m > [22m[2mUltra Minimal Bug[2m > [22m[2mMINIMAL BUG: Compute normals from triangle vertices
[22m[39m
=== MINIMAL BUG: NORMALS FROM VERTICES ===

Vertex 0 star faces: [0,1,2,3,4]
Face 0 vertices: [undefined, undefined, undefined]
Face 1 vertices: [undefined, undefined, undefined]
Face 2 vertices: [undefined, undefined, undefined]

Parameter p[0] shared?
  mesh.vertices[0].x === p[0]: true
[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Max gradient diff: 1.110223e-16
First 6 gradients:
  p[0]: graph=1.1583648686e-1, compiled=1.1583648686e-1, diff=2.775558e-17
  p[1]: graph=1.6825043590e-1, compiled=1.6825043590e-1, diff=1.110223e-16
  p[2]: graph=1.0474432186e-1, compiled=1.0474432186e-1, diff=4.163336e-17
  p[3]: graph=1.3877787808e-17, compiled=-2.0816681712e-17, diff=3.469447e-17
  p[4]: graph=1.3725344244e-1, compiled=1.3725344244e-1, diff=2.775558e-17
  p[5]: graph=-1.7030356059e-1, compiled=-1.7030356059e-1, diff=8.326673e-17
✅ PASS

 [32m✓[39m test/ultra-minimal-bug.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 88[2mms[22m[39m
 [32m✓[39m test/GraphHashCanonicalizer.test.ts [2m([22m[2m10 tests[22m[2m)[22m[32m 51[2mms[22m[39m
[90mstdout[2m | test/plane-alignment-minimal.spec.ts[2m > [22m[2mPlane Alignment Minimal Reproduction[2m > [22m[2msimple Vec3 operations
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/plane-alignment-minimal.spec.ts[2m > [22m[2mPlane Alignment Minimal Reproduction[2m > [22m[2mVec3 cross product
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/lbfgs-with-compiled.spec.ts[2m > [22m[2mL-BFGS with CompiledFunctions[2m > [22m[2mshould handle many identical residuals with kernel reuse
[22m[39m[CompiledFunctions] Compiling 100 functions...
[CompiledFunctions] Processing function 0/100

100 residuals with kernel reuse:
Kernels: 1
Reuse factor: 100.0x
Cost: 74.026079 → 0.000000
Iterations: 1

[90mstdout[2m | test/plane-alignment-minimal.spec.ts[2m > [22m[2mPlane Alignment Minimal Reproduction[2m > [22m[2mmultiple Vec3 cross products (like plane normal)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/lbfgs-with-compiled.spec.ts[2m > [22m[2mL-BFGS with CompiledFunctions[2m > [22m[2mshould optimize distance constraints with kernel reuse
[22m[39m[CompiledFunctions] Compiling 6 functions...
[CompiledFunctions] Processing function 0/6

Distance constraints:
Kernels: 2
Constraints: 6
Cost: -1.365685 → -1.3656854249
Iterations: 0

[90mstdout[2m | test/plane-alignment-minimal.spec.ts[2m > [22m[2mPlane Alignment Minimal Reproduction[2m > [22m[2mfull vertex energy simulation
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/lbfgs-with-compiled.spec.ts[2m > [22m[2mL-BFGS with CompiledFunctions[2m > [22m[2mshould match uncompiled L-BFGS results
[22m[39m[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

Uncompiled vs Compiled:
Uncompiled: (2.000000, 3.000000) in 1 iters
Compiled:   (2.000000, 3.000000) in 1 iters

 [32m✓[39m test/plane-alignment-minimal.spec.ts [2m([22m[2m4 tests[22m[2m)[22m[32m 76[2mms[22m[39m
 [32m✓[39m test/lbfgs-with-compiled.spec.ts [2m([22m[2m4 tests[22m[2m | [22m[33m1 skipped[39m[2m)[22m[32m 80[2mms[22m[39m
[90mstdout[2m | test/variance-debug.spec.ts[2m > [22m[2mVariance Debug Test[2m > [22m[2mshould debug energy values
[22m[39m
=== VARIANCE DEBUG ===
Sphere: 162 vertices

Vertex 0: 5 faces in star
  Face 0: N=(-0.560, 0.815, 0.148), θ=1.245
  Face 16: N=(-0.412, 0.907, 0.092), θ=1.245
  Face 32: N=(-0.412, 0.907, -0.092), θ=1.245
  Face 48: N=(-0.560, 0.815, -0.148), θ=1.245
  Face 64: N=(-0.652, 0.758, 0.000), θ=1.245

Covariance matrix:
  [1.7334, -2.6825, -0.0000]
  [-2.6825, 4.4159, -0.0000]
  [-0.0000, -0.0000, 0.0756]

Trace: 6.2249
Frobenius norm: 6.0747
λ_min proxy (trace - ||C||_F): 0.1502
Energy (squared): 2.2559e-2
Actual energy from function: 2.5605e-2

 [32m✓[39m test/variance-debug.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 62[2mms[22m[39m
 [32m✓[39m test/NonlinearLeastSquares.spec.ts [2m([22m[2m7 tests[22m[2m)[22m[32m 31[2mms[22m[39m
 [32m✓[39m test/Value.spec.ts [2m([22m[2m40 tests[22m[2m)[22m[32m 88[2mms[22m[39m
 [32m✓[39m test/kernel-reuse/value-registry.spec.ts [2m([22m[2m12 tests[22m[2m)[22m[32m 30[2mms[22m[39m
[90mstdout[2m | test/duplicate-branch-bug.spec.ts[2m > [22m[2mDuplicate Branch Bug[2m > [22m[2mshould accumulate gradients when same branch used twice
[22m[39m
=== DUPLICATE BRANCH TEST ===

[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Graph gradients: [ [33m6[39m, [33m4[39m ]
Compiled gradients: [ [33m6[39m, [33m4[39m ]
Expected gradients: [6, 4]
Max gradient diff: 0.000000e+0
✅ PASS

[90mstdout[2m | test/duplicate-branch-bug.spec.ts[2m > [22m[2mDuplicate Branch Bug[2m > [22m[2mshould handle branch used in multiple residuals
[22m[39m
=== MULTIPLE RESIDUALS WITH SHARED BRANCH ===

[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2
Graph gradients: [ [33m39[39m, [33m26[39m ]
Compiled gradients: [ [33m39[39m, [33m26[39m ]
Expected gradients: [39, 26]
Max gradient diff: 0.000000e+0
✅ PASS

[90mstdout[2m | test/cross-product-bug.spec.ts[2m > [22m[2mCross Product Bug[2m > [22m[2mshould handle single cross product normalized
[22m[39m
=== SINGLE CROSS PRODUCT ===

[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Max gradient diff: 0.000000e+0
✅ PASS

 [32m✓[39m test/duplicate-branch-bug.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 46[2mms[22m[39m
[90mstdout[2m | test/cross-product-bug.spec.ts[2m > [22m[2mCross Product Bug[2m > [22m[2mshould handle two cross products multiplied
[22m[39m
=== TWO CROSS PRODUCTS MULTIPLIED ===

[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Max gradient diff: 0.000000e+0
  p[0]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
  p[1]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
  p[2]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
  p[3]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
  p[4]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
  p[5]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
  p[6]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
  p[7]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
  p[8]: graph=0.0000000000e+0, compiled=0.0000000000e+0, diff=0.000000e+0
✅ PASS

[90mstdout[2m | test/cross-product-bug.spec.ts[2m > [22m[2mCross Product Bug[2m > [22m[2mshould handle cross products with plane normal pattern
[22m[39m
=== PLANE NORMAL PATTERN ===

[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Max gradient diff: 0.000000e+0
✅ PASS

 [32m✓[39m test/cross-product-bug.spec.ts [2m([22m[2m3 tests[22m[2m)[22m[32m 43[2mms[22m[39m
[90mstdout[2m | test/minimal-shared-param-bug.spec.ts[2m > [22m[2mMinimal Shared Parameter Bug[2m > [22m[2mshould give same gradients for shared params in multiply
[22m[39m
=== MINIMAL SHARED PARAMETER BUG ===

[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Forward value: 8.485281e-1

Graph gradients: [ [32m'9.050967e-1'[39m, [32m'-1.074802e+0'[39m, [32m'1.046518e+0'[39m ]
Compiled gradients: [ [32m'9.050967e-1'[39m, [32m'-1.074802e+0'[39m, [32m'1.046518e+0'[39m ]

Max gradient diff: 1.110223e-16
  p[0]: graph=9.0509667992e-1, compiled=9.0509667992e-1, diff=1.110223e-16
  p[1]: graph=-1.0748023074e+0, compiled=-1.0748023074e+0, diff=0.000000e+0
  p[2]: graph=1.0465180362e+0, compiled=1.0465180362e+0, diff=0.000000e+0

✅ PASS - Gradients match!

[90mstdout[2m | test/minimal-shared-param-bug.spec.ts[2m > [22m[2mMinimal Shared Parameter Bug[2m > [22m[2mshould handle multiple residuals using same parameters
[22m[39m
=== MULTIPLE RESIDUALS TEST ===

[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2
Graph gradients: [
  [32m'5.000000e-1'[39m,
  [32m'5.000000e-1'[39m,
  [32m'0.000000e+0'[39m,
  [32m'-5.000000e-1'[39m,
  [32m'-5.000000e-1'[39m,
  [32m'0.000000e+0'[39m
]
Compiled gradients: [
  [32m'5.000000e-1'[39m,
  [32m'5.000000e-1'[39m,
  [32m'0.000000e+0'[39m,
  [32m'-5.000000e-1'[39m,
  [32m'-5.000000e-1'[39m,
  [32m'0.000000e+0'[39m
]

Max gradient diff: 5.551115e-17
✅ PASS - Gradients match!

 [32m✓[39m test/minimal-shared-param-bug.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 40[2mms[22m[39m
 [32m✓[39m test/NonlinearLeastSquares.suite.spec.ts [2m([22m[2m10 tests[22m[2m)[22m[32m 136[2mms[22m[39m
[90mstdout[2m | test/print-compiled-code.spec.ts[2m > [22m[2mPrint Compiled Code[2m > [22m[2msimple add
[22m[39m
================================================================================
SIMPLE: a + b
================================================================================

Compiled function:
function anonymous(allValues,indices,gradientIndices,gradient
) {

    const idx_0 = indices[0];
    const idx_1 = indices[1];
    const _v0 = allValues[idx_0];
    const _v1 = allValues[idx_1];
    const _v2 = (_v0 + _v1);
    let grad__v0 = 0;
    let grad__v1 = 0;
    let grad__v2 = 0;
    grad__v2 = 1;
    grad__v0 += grad__v2; grad__v1 += grad__v2;
    gradient[gradientIndices[0]] += grad__v0;
    gradient[gradientIndices[1]] += grad__v1;
    return _v2;
  
}


[90mstdout[2m | test/print-compiled-code.spec.ts[2m > [22m[2mPrint Compiled Code[2m > [22m[2mcross product
[22m[39m
================================================================================
CROSS PRODUCT: |a × b|²
================================================================================

Compiled function:
function anonymous(allValues,indices,gradientIndices,gradient
) {

    const idx_0 = indices[0];
    const idx_1 = indices[1];
    const idx_2 = indices[2];
    const idx_3 = indices[3];
    const idx_4 = indices[4];
    const idx_5 = indices[5];
    const _v0 = allValues[idx_0];
    const _v1 = allValues[idx_1];
    const _v2 = (_v0 * _v1);
    const _v3 = allValues[idx_2];
    const _v4 = allValues[idx_3];
    const _v5 = (_v3 * _v4);
    const _v6 = (_v2 - _v5);
    const _v7 = (_v6 * _v6);
    const _v8 = allValues[idx_4];
    const _v9 = (_v3 * _v8);
    const _v10 = allValues[idx_5];
    const _v11 = (_v10 * _v1);
    const _v12 = (_v9 - _v11);
    const _v13 = (_v12 * _v12);
    const _v14 = (_v7 + _v13);
    const _v15 = (_v10 * _v4);
    const _v16 = (_v0 * _v8);
    const _v17 = (_v15 - _v16);
    const _v18 = (_v17 * _v17);
    const _v19 = (_v14 + _v18);
    let grad__v0 = 0;
    let grad__v1 = 0;
    let grad__v2 = 0;
    let grad__v3 = 0;
    let grad__v4 = 0;
    let grad__v5 = 0;
    let grad__v6 = 0;
    let grad__v7 = 0;
    let grad__v8 = 0;
    let grad__v9 = 0;
    let grad__v10 = 0;
    let grad__v11 = 0;
    let grad__v12 = 0;
    let grad__v13 = 0;
    let grad__v14 = 0;
    let grad__v15 = 0;
    let grad__v16 = 0;
    let grad__v17 = 0;
    let grad__v18 = 0;
    let grad__v19 = 0;
    grad__v19 = 1;
    grad__v14 += grad__v19; grad__v18 += grad__v19;
    grad__v17 += grad__v18 * _v17; grad__v17 += grad__v18 * _v17;
    grad__v15 += grad__v17; grad__v16 -= grad__v17;
    grad__v0 += grad__v16 * _v8; grad__v8 += grad__v16 * _v0;
    grad__v10 += grad__v15 * _v4; grad__v4 += grad__v15 * _v10;
    grad__v7 += grad__v14; grad__v13 += grad__v14;
    grad__v12 += grad__v13 * _v12; grad__v12 += grad__v13 * _v12;
    grad__v9 += grad__v12; grad__v11 -= grad__v12;
    grad__v10 += grad__v11 * _v1; grad__v1 += grad__v11 * _v10;
    grad__v3 += grad__v9 * _v8; grad__v8 += grad__v9 * _v3;
    grad__v6 += grad__v7 * _v6; grad__v6 += grad__v7 * _v6;
    grad__v2 += grad__v6; grad__v5 -= grad__v6;
    grad__v3 += grad__v5 * _v4; grad__v4 += grad__v5 * _v3;
    grad__v0 += grad__v2 * _v1; grad__v1 += grad__v2 * _v0;
    gradient[gradientIndices[0]] += grad__v0;
    gradient[gradientIndices[1]] += grad__v1;
    gradient[gradientIndices[2]] += grad__v3;
    gradient[gradientIndices[3]] += grad__v4;
    gradient[gradientIndices[4]] += grad__v8;
    gradient[gradientIndices[5]] += grad__v10;
    return _v19;
  
}


[90mstdout[2m | test/print-compiled-code.spec.ts[2m > [22m[2mPrint Compiled Code[2m > [22m[2mplane alignment vertex energy
[22m[39m
================================================================================
PLANE ALIGNMENT: Vertex Energy
================================================================================

Compiled function:
function anonymous(allValues,indices,gradientIndices,gradient
) {

    const idx_0 = indices[0];
    const idx_1 = indices[1];
    const idx_2 = indices[2];
    const idx_3 = indices[3];
    const idx_4 = indices[4];
    const idx_5 = indices[5];
    const idx_6 = indices[6];
    const idx_7 = indices[7];
    const idx_8 = indices[8];
    const idx_9 = indices[9];
    const idx_10 = indices[10];
    const idx_11 = indices[11];
    const idx_12 = indices[12];
    const idx_13 = indices[13];
    const idx_14 = indices[14];
    const idx_15 = indices[15];
    const idx_16 = indices[16];
    const idx_17 = indices[17];
    const idx_18 = indices[18];
    const idx_19 = indices[19];
    const idx_20 = indices[20];
    const _v0 = allValues[idx_0];
    const _v1 = allValues[idx_1];
    const _v2 = allValues[idx_2];
    const _v3 = allValues[idx_3];
    const _v4 = allValues[idx_4];
    const _v5 = (_v3 * _v4);
    const _v6 = allValues[idx_5];
    const _v7 = allValues[idx_6];
    const _v8 = (_v6 * _v7);
    const _v9 = (_v5 - _v8);
    const _v10 = allValues[idx_7];
    const _v11 = allValues[idx_8];
    const _v12 = (_v1 * _v11);
    const _v13 = (_v3 * _v7);
    const _v14 = (_v12 + _v13);
    const _v15 = (_v6 * _v4);
    const _v16 = (_v14 + _v15);
    const _v17 = (_v10 - _v16);
    const _v18 = (_v9 * _v17);
    const _v19 = (_v2 + _v18);
    const _v20 = allValues[idx_9];
    const _v21 = (_v3 * _v20);
    const _v22 = allValues[idx_10];
    const _v23 = (_v6 * _v22);
    const _v24 = (_v21 - _v23);
    const _v25 = allValues[idx_11];
    const _v26 = allValues[idx_12];
    const _v27 = (_v1 * _v26);
    const _v28 = (_v3 * _v22);
    const _v29 = (_v27 + _v28);
    const _v30 = (_v6 * _v20);
    const _v31 = (_v29 + _v30);
    const _v32 = (_v25 - _v31);
    const _v33 = (_v24 * _v32);
    const _v34 = (_v19 + _v33);
    const _v35 = (_v7 * _v20);
    const _v36 = (_v4 * _v22);
    const _v37 = (_v35 - _v36);
    const _v38 = allValues[idx_13];
    const _v39 = (_v11 * _v26);
    const _v40 = (_v7 * _v22);
    const _v41 = (_v39 + _v40);
    const _v42 = (_v4 * _v20);
    const _v43 = (_v41 + _v42);
    const _v44 = (_v38 - _v43);
    const _v45 = (_v37 * _v44);
    const _v46 = (_v34 + _v45);
    const _v47 = allValues[idx_14];
    const _v48 = Math.pow(_v46, _v47);
    const _v49 = allValues[idx_15];
    const _v50 = (_v6 * _v11);
    const _v51 = (_v1 * _v4);
    const _v52 = (_v50 - _v51);
    const _v53 = (_v52 * _v17);
    const _v54 = (_v49 + _v53);
    const _v55 = (_v6 * _v26);
    const _v56 = (_v1 * _v20);
    const _v57 = (_v55 - _v56);
    const _v58 = (_v57 * _v32);
    const _v59 = (_v54 + _v58);
    const _v60 = (_v4 * _v26);
    const _v61 = (_v11 * _v20);
    const _v62 = (_v60 - _v61);
    const _v63 = (_v62 * _v44);
    const _v64 = (_v59 + _v63);
    const _v65 = allValues[idx_16];
    const _v66 = Math.pow(_v64, _v65);
    const _v67 = (_v48 + _v66);
    const _v68 = allValues[idx_17];
    const _v69 = (_v1 * _v7);
    const _v70 = (_v3 * _v11);
    const _v71 = (_v69 - _v70);
    const _v72 = (_v71 * _v17);
    const _v73 = (_v68 + _v72);
    const _v74 = (_v1 * _v22);
    const _v75 = (_v3 * _v26);
    const _v76 = (_v74 - _v75);
    const _v77 = (_v76 * _v32);
    const _v78 = (_v73 + _v77);
    const _v79 = (_v11 * _v22);
    const _v80 = (_v7 * _v26);
    const _v81 = (_v79 - _v80);
    const _v82 = (_v81 * _v44);
    const _v83 = (_v78 + _v82);
    const _v84 = allValues[idx_18];
    const _v85 = Math.pow(_v83, _v84);
    const _v86 = (_v67 + _v85);
    const _v87 = Math.sqrt(_v86);
    const _v88 = allValues[idx_19];
    const _v89 = Math.max(_v87, _v88);
    const _v90 = (_v46 / _v89);
    const _v91 = (_v1 * _v90);
    const _v92 = (_v64 / _v89);
    const _v93 = (_v3 * _v92);
    const _v94 = (_v91 + _v93);
    const _v95 = (_v83 / _v89);
    const _v96 = (_v6 * _v95);
    const _v97 = (_v94 + _v96);
    const _v98 = Math.abs(_v97);
    const _v99 = (_v98 * _v98);
    const _v100 = (_v0 + _v99);
    const _v101 = (_v11 * _v90);
    const _v102 = (_v7 * _v92);
    const _v103 = (_v101 + _v102);
    const _v104 = (_v4 * _v95);
    const _v105 = (_v103 + _v104);
    const _v106 = Math.abs(_v105);
    const _v107 = (_v106 * _v106);
    const _v108 = (_v100 + _v107);
    const _v109 = (_v26 * _v90);
    const _v110 = (_v22 * _v92);
    const _v111 = (_v109 + _v110);
    const _v112 = (_v20 * _v95);
    const _v113 = (_v111 + _v112);
    const _v114 = Math.abs(_v113);
    const _v115 = (_v114 * _v114);
    const _v116 = (_v108 + _v115);
    const _v117 = allValues[idx_20];
    const _v118 = (_v116 / _v117);
    let grad__v0 = 0;
    let grad__v1 = 0;
    let grad__v2 = 0;
    let grad__v3 = 0;
    let grad__v4 = 0;
    let grad__v5 = 0;
    let grad__v6 = 0;
    let grad__v7 = 0;
    let grad__v8 = 0;
    let grad__v9 = 0;
    let grad__v10 = 0;
    let grad__v11 = 0;
    let grad__v12 = 0;
    let grad__v13 = 0;
    let grad__v14 = 0;
    let grad__v15 = 0;
    let grad__v16 = 0;
    let grad__v17 = 0;
    let grad__v18 = 0;
    let grad__v19 = 0;
    let grad__v20 = 0;
    let grad__v21 = 0;
    let grad__v22 = 0;
    let grad__v23 = 0;
    let grad__v24 = 0;
    let grad__v25 = 0;
    let grad__v26 = 0;
    let grad__v27 = 0;
    let grad__v28 = 0;
    let grad__v29 = 0;
    let grad__v30 = 0;
    let grad__v31 = 0;
    let grad__v32 = 0;
    let grad__v33 = 0;
    let grad__v34 = 0;
    let grad__v35 = 0;
    let grad__v36 = 0;
    let grad__v37 = 0;
    let grad__v38 = 0;
    let grad__v39 = 0;
    let grad__v40 = 0;
    let grad__v41 = 0;
    let grad__v42 = 0;
    let grad__v43 = 0;
    let grad__v44 = 0;
    let grad__v45 = 0;
    let grad__v46 = 0;
    let grad__v47 = 0;
    let grad__v48 = 0;
    let grad__v49 = 0;
    let grad__v50 = 0;
    let grad__v51 = 0;
    let grad__v52 = 0;
    let grad__v53 = 0;
    let grad__v54 = 0;
    let grad__v55 = 0;
    let grad__v56 = 0;
    let grad__v57 = 0;
    let grad__v58 = 0;
    let grad__v59 = 0;
    let grad__v60 = 0;
    let grad__v61 = 0;
    let grad__v62 = 0;
    let grad__v63 = 0;
    let grad__v64 = 0;
    let grad__v65 = 0;
    let grad__v66 = 0;
    let grad__v67 = 0;
    let grad__v68 = 0;
    let grad__v69 = 0;
    let grad__v70 = 0;
    let grad__v71 = 0;
    let grad__v72 = 0;
    let grad__v73 = 0;
    let grad__v74 = 0;
    let grad__v75 = 0;
    let grad__v76 = 0;
    let grad__v77 = 0;
    let grad__v78 = 0;
    let grad__v79 = 0;
    let grad__v80 = 0;
    let grad__v81 = 0;
    let grad__v82 = 0;
    let grad__v83 = 0;
    let grad__v84 = 0;
    let grad__v85 = 0;
    let grad__v86 = 0;
    let grad__v87 = 0;
    let grad__v88 = 0;
    let grad__v89 = 0;
    let grad__v90 = 0;
    let grad__v91 = 0;
    let grad__v92 = 0;
    let grad__v93 = 0;
    let grad__v94 = 0;
    let grad__v95 = 0;
    let grad__v96 = 0;
    let grad__v97 = 0;
    let grad__v98 = 0;
    let grad__v99 = 0;
    let grad__v100 = 0;
    let grad__v101 = 0;
    let grad__v102 = 0;
    let grad__v103 = 0;
    let grad__v104 = 0;
    let grad__v105 = 0;
    let grad__v106 = 0;
    let grad__v107 = 0;
    let grad__v108 = 0;
    let grad__v109 = 0;
    let grad__v110 = 0;
    let grad__v111 = 0;
    let grad__v112 = 0;
    let grad__v113 = 0;
    let grad__v114 = 0;
    let grad__v115 = 0;
    let grad__v116 = 0;
    let grad__v117 = 0;
    let grad__v118 = 0;
    grad__v118 = 1;
    grad__v116 += grad__v118 / _v117; grad__v117 -= grad__v118 * _v116 / (_v117 * _v117);
    grad__v108 += grad__v116; grad__v115 += grad__v116;
    grad__v114 += grad__v115 * _v114; grad__v114 += grad__v115 * _v114;
    grad__v113 += grad__v114 * (_v113 >= 0 ? 1 : -1);
    grad__v111 += grad__v113; grad__v112 += grad__v113;
    grad__v20 += grad__v112 * _v95; grad__v95 += grad__v112 * _v20;
    grad__v109 += grad__v111; grad__v110 += grad__v111;
    grad__v22 += grad__v110 * _v92; grad__v92 += grad__v110 * _v22;
    grad__v26 += grad__v109 * _v90; grad__v90 += grad__v109 * _v26;
    grad__v100 += grad__v108; grad__v107 += grad__v108;
    grad__v106 += grad__v107 * _v106; grad__v106 += grad__v107 * _v106;
    grad__v105 += grad__v106 * (_v105 >= 0 ? 1 : -1);
    grad__v103 += grad__v105; grad__v104 += grad__v105;
    grad__v4 += grad__v104 * _v95; grad__v95 += grad__v104 * _v4;
    grad__v101 += grad__v103; grad__v102 += grad__v103;
    grad__v7 += grad__v102 * _v92; grad__v92 += grad__v102 * _v7;
    grad__v11 += grad__v101 * _v90; grad__v90 += grad__v101 * _v11;
    grad__v0 += grad__v100; grad__v99 += grad__v100;
    grad__v98 += grad__v99 * _v98; grad__v98 += grad__v99 * _v98;
    grad__v97 += grad__v98 * (_v97 >= 0 ? 1 : -1);
    grad__v94 += grad__v97; grad__v96 += grad__v97;
    grad__v6 += grad__v96 * _v95; grad__v95 += grad__v96 * _v6;
    grad__v83 += grad__v95 / _v89; grad__v89 -= grad__v95 * _v83 / (_v89 * _v89);
    grad__v91 += grad__v94; grad__v93 += grad__v94;
    grad__v3 += grad__v93 * _v92; grad__v92 += grad__v93 * _v3;
    grad__v64 += grad__v92 / _v89; grad__v89 -= grad__v92 * _v64 / (_v89 * _v89);
    grad__v1 += grad__v91 * _v90; grad__v90 += grad__v91 * _v1;
    grad__v46 += grad__v90 / _v89; grad__v89 -= grad__v90 * _v46 / (_v89 * _v89);
    grad__v87 += grad__v89 * (_v87 > _v88 ? 1 : 0); grad__v88 += grad__v89 * (_v88 > _v87 ? 1 : 0);
    grad__v86 += grad__v87 * 0.5 / Math.sqrt(_v86);
    grad__v67 += grad__v86; grad__v85 += grad__v86;
    grad__v83 += grad__v85 * _v84 * Math.pow(_v83, _v84 - 1); grad__v84 += grad__v85 * Math.pow(_v83, _v84) * Math.log(_v83);
    grad__v78 += grad__v83; grad__v82 += grad__v83;
    grad__v81 += grad__v82 * _v44; grad__v44 += grad__v82 * _v81;
    grad__v79 += grad__v81; grad__v80 -= grad__v81;
    grad__v7 += grad__v80 * _v26; grad__v26 += grad__v80 * _v7;
    grad__v11 += grad__v79 * _v22; grad__v22 += grad__v79 * _v11;
    grad__v73 += grad__v78; grad__v77 += grad__v78;
    grad__v76 += grad__v77 * _v32; grad__v32 += grad__v77 * _v76;
    grad__v74 += grad__v76; grad__v75 -= grad__v76;
    grad__v3 += grad__v75 * _v26; grad__v26 += grad__v75 * _v3;
    grad__v1 += grad__v74 * _v22; grad__v22 += grad__v74 * _v1;
    grad__v68 += grad__v73; grad__v72 += grad__v73;
    grad__v71 += grad__v72 * _v17; grad__v17 += grad__v72 * _v71;
    grad__v69 += grad__v71; grad__v70 -= grad__v71;
    grad__v3 += grad__v70 * _v11; grad__v11 += grad__v70 * _v3;
    grad__v1 += grad__v69 * _v7; grad__v7 += grad__v69 * _v1;
    grad__v48 += grad__v67; grad__v66 += grad__v67;
    grad__v64 += grad__v66 * _v65 * Math.pow(_v64, _v65 - 1); grad__v65 += grad__v66 * Math.pow(_v64, _v65) * Math.log(_v64);
    grad__v59 += grad__v64; grad__v63 += grad__v64;
    grad__v62 += grad__v63 * _v44; grad__v44 += grad__v63 * _v62;
    grad__v60 += grad__v62; grad__v61 -= grad__v62;
    grad__v11 += grad__v61 * _v20; grad__v20 += grad__v61 * _v11;
    grad__v4 += grad__v60 * _v26; grad__v26 += grad__v60 * _v4;
    grad__v54 += grad__v59; grad__v58 += grad__v59;
    grad__v57 += grad__v58 * _v32; grad__v32 += grad__v58 * _v57;
    grad__v55 += grad__v57; grad__v56 -= grad__v57;
    grad__v1 += grad__v56 * _v20; grad__v20 += grad__v56 * _v1;
    grad__v6 += grad__v55 * _v26; grad__v26 += grad__v55 * _v6;
    grad__v49 += grad__v54; grad__v53 += grad__v54;
    grad__v52 += grad__v53 * _v17; grad__v17 += grad__v53 * _v52;
    grad__v50 += grad__v52; grad__v51 -= grad__v52;
    grad__v1 += grad__v51 * _v4; grad__v4 += grad__v51 * _v1;
    grad__v6 += grad__v50 * _v11; grad__v11 += grad__v50 * _v6;
    grad__v46 += grad__v48 * _v47 * Math.pow(_v46, _v47 - 1); grad__v47 += grad__v48 * Math.pow(_v46, _v47) * Math.log(_v46);
    grad__v34 += grad__v46; grad__v45 += grad__v46;
    grad__v37 += grad__v45 * _v44; grad__v44 += grad__v45 * _v37;
    grad__v38 += grad__v44; grad__v43 -= grad__v44;
    grad__v41 += grad__v43; grad__v42 += grad__v43;
    grad__v4 += grad__v42 * _v20; grad__v20 += grad__v42 * _v4;
    grad__v39 += grad__v41; grad__v40 += grad__v41;
    grad__v7 += grad__v40 * _v22; grad__v22 += grad__v40 * _v7;
    grad__v11 += grad__v39 * _v26; grad__v26 += grad__v39 * _v11;
    grad__v35 += grad__v37; grad__v36 -= grad__v37;
    grad__v4 += grad__v36 * _v22; grad__v22 += grad__v36 * _v4;
    grad__v7 += grad__v35 * _v20; grad__v20 += grad__v35 * _v7;
    grad__v19 += grad__v34; grad__v33 += grad__v34;
    grad__v24 += grad__v33 * _v32; grad__v32 += grad__v33 * _v24;
    grad__v25 += grad__v32; grad__v31 -= grad__v32;
    grad__v29 += grad__v31; grad__v30 += grad__v31;
    grad__v6 += grad__v30 * _v20; grad__v20 += grad__v30 * _v6;
    grad__v27 += grad__v29; grad__v28 += grad__v29;
    grad__v3 += grad__v28 * _v22; grad__v22 += grad__v28 * _v3;
    grad__v1 += grad__v27 * _v26; grad__v26 += grad__v27 * _v1;
    grad__v21 += grad__v24; grad__v23 -= grad__v24;
    grad__v6 += grad__v23 * _v22; grad__v22 += grad__v23 * _v6;
    grad__v3 += grad__v21 * _v20; grad__v20 += grad__v21 * _v3;
    grad__v2 += grad__v19; grad__v18 += grad__v19;
    grad__v9 += grad__v18 * _v17; grad__v17 += grad__v18 * _v9;
    grad__v10 += grad__v17; grad__v16 -= grad__v17;
    grad__v14 += grad__v16; grad__v15 += grad__v16;
    grad__v6 += grad__v15 * _v4; grad__v4 += grad__v15 * _v6;
    grad__v12 += grad__v14; grad__v13 += grad__v14;
    grad__v3 += grad__v13 * _v7; grad__v7 += grad__v13 * _v3;
    grad__v1 += grad__v12 * _v11; grad__v11 += grad__v12 * _v1;
    grad__v5 += grad__v9; grad__v8 -= grad__v9;
    grad__v6 += grad__v8 * _v7; grad__v7 += grad__v8 * _v6;
    grad__v3 += grad__v5 * _v4; grad__v4 += grad__v5 * _v3;
    gradient[gradientIndices[1]] += grad__v1;
    gradient[gradientIndices[3]] += grad__v3;
    gradient[gradientIndices[4]] += grad__v4;
    gradient[gradientIndices[5]] += grad__v6;
    gradient[gradientIndices[6]] += grad__v7;
    gradient[gradientIndices[8]] += grad__v11;
    gradient[gradientIndices[9]] += grad__v20;
    gradient[gradientIndices[10]] += grad__v22;
    gradient[gradientIndices[12]] += grad__v26;
    return _v118;
  
}


 [32m✓[39m test/print-compiled-code.spec.ts [2m([22m[2m3 tests[22m[2m)[22m[32m 38[2mms[22m[39m
 [32m✓[39m demos/sketch-demo/src/__tests__/Serialization.spec.ts [2m([22m[2m6 tests[22m[2m)[22m[32m 28[2mms[22m[39m
[90mstdout[2m | test/compiled-functions-api.spec.ts[2m > [22m[2mCompiledFunctions API[2m > [22m[2mevaluateGradient() should work for single objective
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

[90mstdout[2m | test/compiled-functions-api.spec.ts[2m > [22m[2mCompiledFunctions API[2m > [22m[2mevaluateJacobian() should work for multiple functions
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

[90mstdout[2m | test/compiled-functions-api.spec.ts[2m > [22m[2mCompiledFunctions API[2m > [22m[2mevaluate() backward compatibility should still work
[22m[39m[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

[90mstdout[2m | test/compiled-functions-api.spec.ts[2m > [22m[2mCompiledFunctions API[2m > [22m[2mevaluateJacobian() should not compute cost (no squaring)
[22m[39m[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1

 [32m✓[39m test/compiled-functions-api.spec.ts [2m([22m[2m4 tests[22m[2m)[22m[32m 37[2mms[22m[39m
[90mstdout[2m | test/compiled-initial-state.spec.ts[2m > [22m[2mCompiled functions initial state[2m > [22m[2mshould not modify parameters during compilation
[22m[39m[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

[90mstdout[2m | test/compiled-initial-state.spec.ts[2m > [22m[2mCompiled functions initial state[2m > [22m[2mshould compute correct initial energy after compilation
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

 [32m✓[39m test/compiled-initial-state.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 33[2mms[22m[39m
 [32m✓[39m test/Losses.spec.ts [2m([22m[2m4 tests[22m[2m)[22m[32m 19[2mms[22m[39m
[90mstdout[2m | test/kernel-reuse/debug-distance.spec.ts[2m > [22m[2mDebug Distance Constraint[2m > [22m[2mshould debug distance constraint kernel
[22m[39m
=== Compiled Kernel ===
function anonymous(allValues,indices,gradientIndices,gradient
) {

    const idx_0 = indices[0];
    const idx_1 = indices[1];
    const idx_2 = indices[2];
    const idx_3 = indices[3];
    const idx_4 = indices[4];
    const _v0 = allValues[idx_0];
    const _v1 = allValues[idx_1];
    const _v2 = (_v0 - _v1);
    const _v3 = (_v2 * _v2);
    const _v4 = allValues[idx_2];
    const _v5 = allValues[idx_3];
    const _v6 = (_v4 - _v5);
    const _v7 = (_v6 * _v6);
    const _v8 = (_v3 + _v7);
    const _v9 = Math.sqrt(_v8);
    const _v10 = allValues[idx_4];
    const _v11 = (_v9 - _v10);
    let grad__v0 = 0;
    let grad__v1 = 0;
    let grad__v2 = 0;
    let grad__v3 = 0;
    let grad__v4 = 0;
    let grad__v5 = 0;
    let grad__v6 = 0;
    let grad__v7 = 0;
    let grad__v8 = 0;
    let grad__v9 = 0;
    let grad__v10 = 0;
    let grad__v11 = 0;
    grad__v11 = 1;
    grad__v9 += grad__v11; grad__v10 -= grad__v11;
    grad__v8 += grad__v9 * 0.5 / Math.sqrt(_v8);
    grad__v3 += grad__v8; grad__v7 += grad__v8;
    grad__v6 += grad__v7 * _v6; grad__v6 += grad__v7 * _v6;
    grad__v4 += grad__v6; grad__v5 -= grad__v6;
    grad__v2 += grad__v3 * _v2; grad__v2 += grad__v3 * _v2;
    grad__v0 += grad__v2; grad__v1 -= grad__v2;
    gradient[gradientIndices[0]] += grad__v0;
    gradient[gradientIndices[1]] += grad__v1;
    gradient[gradientIndices[2]] += grad__v4;
    gradient[gradientIndices[3]] += grad__v5;
    return _v11;
  
}

=== Registry ===
Size: [33m5[39m
Data array: [ [33m0[39m, [33m0[39m, [33m3[39m, [33m4[39m, [33m5[39m ]

=== Indices ===
Input indices: [ [33m2[39m, [33m0[39m, [33m3[39m, [33m1[39m, [33m4[39m ]

=== Graph Info ===
Parameters: [ [32m'x1=0 (id=0)'[39m, [32m'y1=0 (id=1)'[39m, [32m'x2=3 (id=2)'[39m, [32m'y2=4 (id=3)'[39m ]
Residual value: [33m0[39m

=== Kernel Results ===
Value: [33m0[39m
Jacobian: [ [33m-0.6000000000000001[39m, [33m-0.8[39m, [33m0.6000000000000001[39m, [33m0.8[39m ]

=== Graph Results ===
Value: [33m0[39m
Gradients: [ [33m-0.6000000000000001[39m, [33m-0.8[39m, [33m0.6000000000000001[39m, [33m0.8[39m ]

=== Comparison ===
x1: kernel=-0.6000000000000001, graph=-0.6000000000000001, diff=0
y1: kernel=-0.8, graph=-0.8, diff=0
x2: kernel=0.6000000000000001, graph=0.6000000000000001, diff=0
y2: kernel=0.8, graph=0.8, diff=0

 [32m✓[39m test/kernel-reuse/debug-distance.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 27[2mms[22m[39m
 [32m✓[39m test/kernel-reuse/registry-leaf-only.spec.ts [2m([22m[2m5 tests[22m[2m)[22m[32m 28[2mms[22m[39m
[90mstdout[2m | test/same-graph-test.spec.ts[2m > [22m[2mSame Graph Test[2m > [22m[2mshould produce identical gradients when using the same graph
[22m[39m
=== SAME GRAPH TEST ===

Built graph: (a + b) * c
Initial values: a=2, b=3, c=4
Result value: 20

Method 1: Graph backward...
Graph gradients: [4.0000000000e+0, 4.0000000000e+0, 5.0000000000e+0]

Method 2: Compile kernel from same graph...
Kernel function:
function anonymous(allValues,indices,gradientIndices,gradient
) {

    const idx_0 = indices[0];
    const idx_1 = indices[1];
    const idx_2 = indices[2];
    const _v0 = allValues[idx_0];
    const _v1 = allValues[idx_1];
    const _v2 = (_v0 + _v1);
    const _v3 = allValues[idx_2];
    const _v4 = (_v2 * _v3);
    let grad__v0 = 0;
    let grad__v1 = 0;
    let grad__v2 = 0;
    let grad__v3 = 0;
    let grad__v4 = 0;
    grad__v4 = 1;
    grad__v2 += grad__v4 * _v3; grad__v3 += grad__v4 * _v2;
    grad__v0 += grad__v2; grad__v1 += grad__v2;
    gradient[gradientIndices[0]] += grad__v0;
    gradient[gradientIndices[1]] += grad__v1;
    gradient[gradientIndices[2]] += grad__v3;
    return _v4;
  
}

Indices: [0, 1, 2]
GradientIndices: [0, 1, 2]

Kernel value: 20
Kernel gradients: [4.0000000000e+0, 4.0000000000e+0, 5.0000000000e+0]

=== COMPARISON ===
Param | Graph Gradient   | Kernel Gradient  | Difference
------|------------------|------------------|------------------
  0   | 4.0000000000e+0 | 4.0000000000e+0 | 0.000000e+0
  1   | 4.0000000000e+0 | 4.0000000000e+0 | 0.000000e+0
  2   | 5.0000000000e+0 | 5.0000000000e+0 | 0.000000e+0

✓ Same graph produces identical gradients!


[90mstdout[2m | test/same-graph-test.spec.ts[2m > [22m[2mSame Graph Test[2m > [22m[2mcomplex expression with same graph
[22m[39m
=== COMPLEX SAME GRAPH TEST ===

Built graph: sqrt(x^2 + y^2 + z^2)
Initial values: x=1, y=2, z=3
Result value: 3.7416573867739413

Graph gradients:  [2.6726124191e-1, 5.3452248382e-1, 8.0178372574e-1]
Kernel gradients: [2.6726124191e-1, 5.3452248382e-1, 8.0178372574e-1]

✓ Complex graph produces identical gradients!


 [32m✓[39m test/same-graph-test.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 29[2mms[22m[39m
[90mstdout[2m | test/debug-jacobian-issue.spec.ts[2m > [22m[2mDebug Jacobian Issue[2m > [22m[2mshould show canonical strings for different param usage
[22m[39mr1 (x-5) canonical: 0g|n2:(-,0g,1)
r2 (y-3) canonical: 1g|n2:(-,0g,1)
Are they equal? [33mfalse[39m
[CompiledFunctions] Compiling 2 functions...
[CompiledFunctions] Processing function 0/2

Compiled info:
Number of kernels: [33m1[39m
Number of functions: [33m2[39m

Evaluation:
Values: [ [33m-4[39m, [33m-1[39m ]
Jacobian: [ [ [33m1[39m, [33m0[39m ], [ [33m0[39m, [33m1[39m ] ]

[90mstdout[2m | test/debug-jacobian-issue.spec.ts[2m > [22m[2mDebug Jacobian Issue[2m > [22m[2mshould check what params each residual actually uses
[22m[39mr1 uses params: [ [32m'x'[39m ]
r2 uses params: [ [32m'y'[39m ]

 [32m✓[39m test/Value.edge-cases.spec.ts [2m([22m[2m8 tests[22m[2m)[22m[32m 28[2mms[22m[39m
 [32m✓[39m test/debug-jacobian-issue.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 30[2mms[22m[39m
 [32m✓[39m test/hessian.test.ts [2m([22m[2m5 tests[22m[2m)[22m[32m 18[2mms[22m[39m
[90mstdout[2m | test/debug-distance-canon.spec.ts[2m > [22m[2mDebug Distance Canonical Strings[2m > [22m[2mshould show canonical strings for distance constraints
[22m[39m[CompiledFunctions] Compiling 3 functions...
[CompiledFunctions] Processing function 0/3

Kernel count: [33m2[39m
Function count: [33m3[39m

Canonical strings:
  Kernel 0: 0g,1g,2g,3g|n10:(-,0g,2g);n9:(square,n10);n12:(-,1g,3g);n11:(square,n12);n8:(+,n9,n11);n7:(-,n8,6)
  Kernel 1: 0g,1g,2g,3g|n10:(-,2g,0g);n9:(square,n10);n12:(-,3g,1g);n11:(square,n12);n8:(+,n9,n11);n7:(-,n8,6)

[90mstdout[2m | test/shared-param-simple.spec.ts[2m > [22m[2mShared Parameter Bug[2m > [22m[2mshould handle parameter used twice in graph
[22m[39m
=== SHARED PARAMETER TEST ===

[CompiledFunctions] Compiling 1 functions...
[CompiledFunctions] Processing function 0/1
Graph gradients: [ [33m7[39m, [33m2[39m ]
Compiled gradients: [ [33m7[39m, [33m2[39m ]
Max gradient diff: 0.000000e+0
Expected gradients: [7, 2]
✅ PASS

 [32m✓[39m test/Optimizers.spec.ts [2m([22m[2m3 tests[22m[2m)[22m[32m 24[2mms[22m[39m
 [32m✓[39m test/shared-param-simple.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 23[2mms[22m[39m
 [32m✓[39m test/debug-distance-canon.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 31[2mms[22m[39m
 [32m✓[39m test/Geometry.spec.ts [2m([22m[2m9 tests[22m[2m)[22m[32m 41[2mms[22m[39m
 [31m❯[39m test/NonlinearLeastSquares.comparison.spec.ts [2m([22m[2m3 tests[22m[2m | [22m[31m2 failed[39m[2m)[22m[33m 28431[2mms[22m[39m
   [33m[2m✓[22m[39m Nonlinear Least Squares vs Gradient Descent Comparison[2m > [22mshould compare on 2D point cloud alignment problem (50 points) [33m 541[2mms[22m[39m
[31m   [31m×[31m Nonlinear Least Squares vs Gradient Descent Comparison[2m > [22mshould compare on 3D distance constraint problem (30 points)[39m[33m 5453[2mms[22m[39m
[31m     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".[39m
[31m   [31m×[31m Nonlinear Least Squares vs Gradient Descent Comparison[2m > [22mshould compare on circle fitting with 100 noisy points[39m[33m 22431[2mms[22m[39m
[31m     → Test timed out in 20000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".[39m
 [32m✓[39m demos/sketch-demo/src/__tests__/SimpleSolverTest.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 18[2mms[22m[39m
 [32m✓[39m test/Value.losses-edge-cases.spec.ts [2m([22m[2m4 tests[22m[2m)[22m[32m 21[2mms[22m[39m
[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould reduce fragmentation compared to single-level optimization
[22m[39m
=== Multi-Resolution Optimization Test ===

--- Baseline: Single-Level Optimization (Level 2) ---
Mesh: 162 vertices, 320 faces
Using Combinatorial (E^P) energy (non-compiled)...
L-BFGS Optimization
Initial: cost=15.211664, ||∇||=4.01e+1
Iteration 1: cost=9.891615, ||∇||=3.38e+1, α=0.0078, history=1
Iteration 2: cost=7.958762, ||∇||=2.75e+1, α=1.0000, history=2
Iteration 3: cost=7.137974, ||∇||=1.70e+1, α=1.0000, history=3
Iteration 4: cost=6.610351, ||∇||=1.03e+1, α=1.0000, history=4
Iteration 5: cost=6.399664, ||∇||=7.28e+0, α=1.0000, history=5
Iteration 6: cost=6.221936, ||∇||=5.90e+0, α=1.0000, history=6
Iteration 7: cost=6.143356, ||∇||=4.53e+0, α=1.0000, history=7
Iteration 8: cost=6.093683, ||∇||=3.27e+0, α=1.0000, history=8
Iteration 9: cost=6.053111, ||∇||=3.69e+0, α=1.0000, history=9
Iteration 10: cost=6.039155, ||∇||=3.34e+0, α=1.0000, history=10
Iteration 11: cost=6.028976, ||∇||=1.74e+0, α=1.0000, history=10
Iteration 12: cost=6.016433, ||∇||=1.40e+0, α=1.0000, history=10
Iteration 13: cost=5.977303, ||∇||=3.56e+0, α=1.0000, history=10
Iteration 14: cost=5.913584, ||∇||=6.03e+0, α=1.0000, history=10
Iteration 15: cost=5.789170, ||∇||=7.91e+0, α=1.0000, history=10
Iteration 16: cost=5.701627, ||∇||=1.11e+1, α=0.5000, history=10
Iteration 17: cost=5.583788, ||∇||=5.95e+0, α=1.0000, history=10
Iteration 18: cost=5.535456, ||∇||=3.72e+0, α=1.0000, history=10
Iteration 19: cost=5.502983, ||∇||=3.91e+0, α=1.0000, history=10
Iteration 20: cost=5.474951, ||∇||=5.45e+0, α=1.0000, history=10
Iteration 21: cost=5.442873, ||∇||=3.94e+0, α=1.0000, history=10
Iteration 22: cost=5.408825, ||∇||=3.63e+0, α=1.0000, history=10
Iteration 23: cost=5.390310, ||∇||=4.51e+0, α=1.0000, history=10
Iteration 24: cost=5.369234, ||∇||=2.92e+0, α=1.0000, history=10
Iteration 25: cost=5.351032, ||∇||=2.30e+0, α=1.0000, history=10
Iteration 26: cost=5.338104, ||∇||=2.84e+0, α=1.0000, history=10
Iteration 27: cost=5.321294, ||∇||=2.84e+0, α=1.0000, history=10
Iteration 28: cost=5.310090, ||∇||=3.11e+0, α=1.0000, history=10
Iteration 29: cost=5.300791, ||∇||=2.12e+0, α=1.0000, history=10
Iteration 30: cost=5.289676, ||∇||=2.35e+0, α=1.0000, history=10
Iteration 31: cost=5.272944, ||∇||=3.04e+0, α=1.0000, history=10
Iteration 32: cost=5.259705, ||∇||=7.60e+0, α=1.0000, history=10
Iteration 33: cost=5.230679, ||∇||=3.11e+0, α=1.0000, history=10
Iteration 34: cost=5.215616, ||∇||=2.53e+0, α=1.0000, history=10
Iteration 35: cost=5.201043, ||∇||=3.02e+0, α=1.0000, history=10
Iteration 36: cost=5.171573, ||∇||=4.96e+0, α=1.0000, history=10
Iteration 37: cost=5.146584, ||∇||=6.69e+0, α=1.0000, history=10
Iteration 38: cost=5.119663, ||∇||=3.02e+0, α=1.0000, history=10
Iteration 39: cost=5.105712, ||∇||=2.81e+0, α=1.0000, history=10
Iteration 40: cost=5.092119, ||∇||=3.14e+0, α=1.0000, history=10
Iteration 41: cost=5.081823, ||∇||=4.85e+0, α=1.0000, history=10
Iteration 42: cost=5.072431, ||∇||=1.92e+0, α=1.0000, history=10
Iteration 43: cost=5.069377, ||∇||=1.54e+0, α=1.0000, history=10
Iteration 44: cost=5.064806, ||∇||=1.66e+0, α=1.0000, history=10
Iteration 45: cost=5.062318, ||∇||=3.26e+0, α=1.0000, history=10
Iteration 46: cost=5.058555, ||∇||=1.33e+0, α=1.0000, history=10
Iteration 47: cost=5.056661, ||∇||=1.08e+0, α=1.0000, history=10
Iteration 48: cost=5.054279, ||∇||=1.26e+0, α=1.0000, history=10
Iteration 49: cost=5.050841, ||∇||=1.61e+0, α=1.0000, history=10
Iteration 50: cost=5.049224, ||∇||=1.61e+0, α=0.5000, history=10
Chunk complete: 50/50, energy=5.049e+0, reason: Maximum iterations reached

 [32m✓[39m test/Value.memory.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 19[2mms[22m[39m
 [32m✓[39m test/Value.grad-flow.spec.ts [2m([22m[2m2 tests[22m[2m)[22m[32m 13[2mms[22m[39m
 [32m✓[39m demos/sketch-demo/src/__tests__/DebugSolver.spec.ts [2m([22m[2m1 test[22m[2m)[22m[32m 16[2mms[22m[39m
[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould reduce fragmentation compared to single-level optimization
[22m[39m
Single-Level Results:
  Developability: 33.3%
  Regions: 6
  Quality: 5.6% per region

--- Multi-Resolution: Level 0 → 1 → 2 ---
Base mesh: 12 vertices, 20 faces

=== Multi-Resolution Optimization ===
Starting at level 0 (12 vertices)
Target level: 2
Coarse energy: Combinatorial (E^P), Fine energy: Covariance (Smallest Eigenvalue)


--- Level 0 (12 vertices, 20 faces) ---
Energy: Combinatorial (E^P) (coarse phase)
Using Combinatorial (E^P) energy (non-compiled)...
L-BFGS Optimization
Initial: cost=12.463366, ||∇||=8.73e+0
Iteration 1: cost=10.175217, ||∇||=1.09e+1, α=0.2500, history=1
Iteration 2: cost=7.457434, ||∇||=7.04e+0, α=1.0000, history=2
Iteration 3: cost=6.184091, ||∇||=2.70e+0, α=1.0000, history=3
Iteration 4: cost=5.869570, ||∇||=1.95e+0, α=1.0000, history=4
Iteration 5: cost=5.385125, ||∇||=5.38e+0, α=1.0000, history=5
Iteration 6: cost=5.199674, ||∇||=6.09e+0, α=0.5000, history=6
Iteration 7: cost=4.799006, ||∇||=6.41e+0, α=1.0000, history=7
Iteration 8: cost=3.690160, ||∇||=4.52e+0, α=1.0000, history=8
Iteration 9: cost=2.643765, ||∇||=3.79e+0, α=1.0000, history=9
Iteration 10: cost=1.812621, ||∇||=7.77e+0, α=1.0000, history=10
Iteration 11: cost=0.630441, ||∇||=4.27e+0, α=1.0000, history=10
Iteration 12: cost=0.461257, ||∇||=3.49e+0, α=1.0000, history=10
Iteration 13: cost=0.178437, ||∇||=2.20e+0, α=1.0000, history=10
Iteration 14: cost=0.099316, ||∇||=1.33e+0, α=0.5000, history=10
Iteration 15: cost=0.064377, ||∇||=8.19e-1, α=1.0000, history=10
Iteration 16: cost=0.040070, ||∇||=6.99e-1, α=1.0000, history=10
Iteration 17: cost=0.029135, ||∇||=4.30e-1, α=1.0000, history=10
Iteration 18: cost=0.024461, ||∇||=7.23e-1, α=1.0000, history=10
Iteration 19: cost=0.013841, ||∇||=3.99e-1, α=1.0000, history=10
Iteration 20: cost=0.010996, ||∇||=5.78e-1, α=1.0000, history=10
Chunk complete: 20/50, energy=1.100e-2, reason: Maximum iterations reached

 [32m✓[39m test/Optimizers.edge-cases.spec.ts [2m([22m[2m3 tests[22m[2m)[22m[32m 16[2mms[22m[39m
[90mstderr[2m | test/developable-sphere-sweep.spec.ts
[22m[39mUsing an object as a third argument is deprecated. Vitest 4 will throw an error if the third argument is not a timeout number. Please use the second argument for options. See more at https://vitest.dev/guide/migration

 [2m[90m↓[39m[22m test/developable-sphere-sweep.spec.ts [2m([22m[2m1 test[22m[2m | [22m[33m1 skipped[39m[2m)[22m
[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould reduce fragmentation compared to single-level optimization
[22m[39mL-BFGS Optimization
Initial: cost=0.010996, ||∇||=5.78e-1
Iteration 1: cost=0.002657, ||∇||=2.53e-1, α=0.0625, history=1
Iteration 2: cost=0.001304, ||∇||=1.10e-1, α=1.0000, history=2
Iteration 3: cost=0.000776, ||∇||=8.52e-2, α=1.0000, history=3
Iteration 4: cost=0.000181, ||∇||=7.95e-2, α=1.0000, history=4
Iteration 5: cost=0.000078, ||∇||=4.47e-2, α=1.0000, history=5
Iteration 6: cost=0.000007, ||∇||=1.34e-2, α=1.0000, history=6
Iteration 7: cost=0.000005, ||∇||=1.41e-2, α=1.0000, history=7
Iteration 8: cost=0.000003, ||∇||=5.07e-3, α=1.0000, history=8
Iteration 9: cost=0.000002, ||∇||=5.37e-3, α=1.0000, history=9
Chunk complete: 29/50, energy=2.124e-6, reason: Cost tolerance reached

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould reduce fragmentation compared to single-level optimization
[22m[39mLevel 0 complete: 29 iterations, energy=2.124e-6
Convergence: Cost tolerance reached
Subdividing 0 → 1...

--- Level 1 (42 vertices, 80 faces) ---
Energy: Combinatorial (E^P) (coarse phase)
Using Combinatorial (E^P) energy (non-compiled)...
L-BFGS Optimization
Initial: cost=0.000002, ||∇||=1.04e-2
Iteration 1: cost=0.000002, ||∇||=1.08e-2, α=0.0078, history=1
Chunk complete: 1/50, energy=1.973e-6, reason: Cost tolerance reached

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould reduce fragmentation compared to single-level optimization
[22m[39mLevel 1 complete: 1 iterations, energy=1.973e-6
Convergence: Cost tolerance reached
Subdividing 1 → 2...

--- Level 2 (162 vertices, 320 faces) ---
Energy: Covariance (Smallest Eigenvalue) (fine phase)
Using Covariance (Smallest Eigenvalue) energy (non-compiled)...
L-BFGS Optimization
Initial: cost=0.865616, ||∇||=4.86e-2
Iteration 1: cost=0.865615, ||∇||=8.96e-2, α=0.0039, history=1
Chunk complete: 1/50, energy=8.656e-1, reason: Cost tolerance reached

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould reduce fragmentation compared to single-level optimization
[22m[39mLevel 2 complete: 1 iterations, energy=8.656e-1
Convergence: Cost tolerance reached

=== Multi-Resolution Complete ===
Total iterations: 31
Total function evaluations: 58
Final level: 2
Final vertices: 162

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould reduce fragmentation compared to single-level optimization
[22m[39m
Multi-Resolution Results:
  Developability: 96.3%
  Regions: 1
  Quality: 96.3% per region

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
COMPARISON:

Single-Level (Baseline):
  Developability: 33.3%
  Regions: 6
  Quality/region: 5.6%

Multi-Resolution (Paper Method):
  Developability: 96.3%
  Regions: 1
  Quality/region: 96.3%

Improvement:
  Regions: 6 → 1 (83.3% reduction)
  Developability: 33.3% → 96.3% (+63.0%)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Expected: Multi-resolution should produce < 20 regions (ideally 8-12)
Actual: 1 regions
✓ Multi-resolution reduced fragmentation: 6 → 1
✓ Good region count: 1 regions
Quality per region: 96.3%

[90mstdout[2m | test/covariance-optimization.spec.ts[2m > [22m[2mCovariance Energy Optimization Test[2m > [22m[2mshould produce good regions with improved covariance energy
[22m[39m
=== Covariance Energy Optimization Test ===
Mesh: 162 vertices, 320 faces

Initial State:
  Covariance Energy: 4.615e+1
  Developability: 8.0%
  Regions: 0

Optimizing with Covariance Energy (non-compiled)...
Using Covariance (Smallest Eigenvalue) energy (non-compiled)...
L-BFGS Optimization
Initial: cost=46.152967, ||∇||=1.39e+2
Iteration 1: cost=40.235607, ||∇||=1.34e+2, α=0.0039, history=1
Iteration 2: cost=22.087426, ||∇||=6.51e+1, α=1.0000, history=2
Iteration 3: cost=19.183518, ||∇||=4.47e+1, α=0.5000, history=3
Iteration 4: cost=17.996744, ||∇||=3.31e+1, α=1.0000, history=4
Iteration 5: cost=17.730338, ||∇||=3.08e+1, α=1.0000, history=5
Iteration 6: cost=17.444253, ||∇||=1.96e+1, α=1.0000, history=6
Iteration 7: cost=17.330753, ||∇||=1.70e+1, α=1.0000, history=7
Iteration 8: cost=17.215982, ||∇||=1.81e+1, α=1.0000, history=8
Iteration 9: cost=17.110690, ||∇||=2.43e+1, α=1.0000, history=9
Iteration 10: cost=16.953281, ||∇||=2.05e+1, α=1.0000, history=10
Iteration 11: cost=16.802409, ||∇||=2.28e+1, α=1.0000, history=10
Iteration 12: cost=16.681014, ||∇||=2.18e+1, α=1.0000, history=10
Iteration 13: cost=16.570999, ||∇||=2.16e+1, α=1.0000, history=10
Iteration 14: cost=16.459838, ||∇||=1.81e+1, α=1.0000, history=10
Iteration 15: cost=16.368426, ||∇||=2.09e+1, α=1.0000, history=10
Iteration 16: cost=16.297409, ||∇||=1.57e+1, α=1.0000, history=10
Iteration 17: cost=16.248155, ||∇||=1.58e+1, α=1.0000, history=10
Iteration 18: cost=16.213533, ||∇||=1.58e+1, α=1.0000, history=10
Iteration 19: cost=16.180533, ||∇||=1.60e+1, α=1.0000, history=10
Iteration 20: cost=16.148090, ||∇||=1.55e+1, α=1.0000, history=10
Iteration 21: cost=16.124716, ||∇||=1.57e+1, α=1.0000, history=10
Iteration 22: cost=16.096038, ||∇||=1.53e+1, α=1.0000, history=10
Iteration 23: cost=16.073961, ||∇||=1.50e+1, α=1.0000, history=10
Iteration 24: cost=16.059148, ||∇||=1.57e+1, α=1.0000, history=10
Iteration 25: cost=16.041376, ||∇||=1.44e+1, α=1.0000, history=10
Iteration 26: cost=16.023075, ||∇||=1.49e+1, α=1.0000, history=10
Iteration 27: cost=16.014543, ||∇||=1.65e+1, α=1.0000, history=10
Iteration 28: cost=15.996964, ||∇||=1.32e+1, α=1.0000, history=10
Iteration 29: cost=15.982531, ||∇||=1.61e+1, α=1.0000, history=10
Iteration 30: cost=15.964744, ||∇||=1.29e+1, α=1.0000, history=10
Iteration 31: cost=15.956270, ||∇||=1.48e+1, α=1.0000, history=10
Iteration 32: cost=15.942318, ||∇||=1.36e+1, α=1.0000, history=10
Iteration 33: cost=15.930806, ||∇||=1.35e+1, α=1.0000, history=10
Iteration 34: cost=15.915340, ||∇||=1.30e+1, α=1.0000, history=10
Iteration 35: cost=15.911728, ||∇||=1.47e+1, α=1.0000, history=10
Iteration 36: cost=15.898393, ||∇||=1.12e+1, α=1.0000, history=10
Iteration 37: cost=15.890815, ||∇||=1.03e+1, α=1.0000, history=10
Iteration 38: cost=15.882825, ||∇||=1.05e+1, α=1.0000, history=10
Iteration 39: cost=15.874047, ||∇||=1.07e+1, α=1.0000, history=10
Iteration 40: cost=15.868426, ||∇||=1.15e+1, α=1.0000, history=10
Iteration 41: cost=15.862932, ||∇||=1.02e+1, α=1.0000, history=10
Iteration 42: cost=15.859126, ||∇||=1.12e+1, α=1.0000, history=10
Iteration 43: cost=15.855450, ||∇||=1.02e+1, α=1.0000, history=10
Iteration 44: cost=15.851602, ||∇||=9.00e+0, α=1.0000, history=10
Iteration 45: cost=15.848390, ||∇||=8.47e+0, α=1.0000, history=10
Iteration 46: cost=15.845385, ||∇||=9.65e+0, α=1.0000, history=10
Iteration 47: cost=15.843129, ||∇||=1.08e+1, α=1.0000, history=10
Iteration 48: cost=15.839746, ||∇||=8.49e+0, α=1.0000, history=10
Iteration 49: cost=15.836843, ||∇||=9.88e+0, α=1.0000, history=10
Iteration 50: cost=15.834035, ||∇||=7.75e+0, α=1.0000, history=10
Chunk complete: 50/50, energy=1.583e+1, reason: Maximum iterations reached

[90mstdout[2m | test/covariance-optimization.spec.ts[2m > [22m[2mCovariance Energy Optimization Test[2m > [22m[2mshould produce good regions with improved covariance energy
[22m[39m
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
RESULTS:
  Iterations: 50
  Convergence: Maximum iterations reached

Energy:
  Before: 4.615e+1
  After:  1.583e+1
  Reduction: 65.7%

Developability:
  Before: 8.0%
  After:  0.0%
  Improvement: +-8.0%

Regions:
  Before: 0
  After:  0
  Quality: 0.0% / 0 = NaN% per region
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


 [31m❯[39m test/covariance-optimization.spec.ts [2m([22m[2m1 test[22m[2m | [22m[31m1 failed[39m[2m)[22m[33m 38387[2mms[22m[39m
[31m   [31m×[31m Covariance Energy Optimization Test[2m > [22mshould produce good regions with improved covariance energy[39m[33m 38382[2mms[22m[39m
[31m     → expected 0 to be greater than 8.024691358024691[39m
[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould work with subdivision from level 1 to 2
[22m[39m
=== Multi-Resolution: Level 1 → 2 ===

Base mesh (level 1): 42 vertices

=== Multi-Resolution Optimization ===
Starting at level 1 (162 vertices)
Target level: 2
Coarse energy: Combinatorial (E^P), Fine energy: Covariance (Smallest Eigenvalue)


--- Level 1 (162 vertices, 320 faces) ---
Energy: Combinatorial (E^P) (coarse phase)
Using Combinatorial (E^P) energy (non-compiled)...
L-BFGS Optimization
Initial: cost=13.387706, ||∇||=6.92e+1
Iteration 1: cost=9.065012, ||∇||=2.12e+1, α=0.0020, history=1
Iteration 2: cost=8.553305, ||∇||=1.38e+1, α=1.0000, history=2
Iteration 3: cost=7.702852, ||∇||=1.32e+1, α=1.0000, history=3
Iteration 4: cost=6.927982, ||∇||=1.07e+1, α=1.0000, history=4
Iteration 5: cost=6.743877, ||∇||=1.66e+1, α=1.0000, history=5
Iteration 6: cost=6.429630, ||∇||=7.38e+0, α=1.0000, history=6
Iteration 7: cost=6.285277, ||∇||=7.63e+0, α=1.0000, history=7
Iteration 8: cost=6.121007, ||∇||=7.56e+0, α=1.0000, history=8
Iteration 9: cost=5.978746, ||∇||=8.66e+0, α=1.0000, history=9
Iteration 10: cost=5.868289, ||∇||=5.85e+0, α=1.0000, history=10
Iteration 11: cost=5.805615, ||∇||=4.34e+0, α=1.0000, history=10
Iteration 12: cost=5.715806, ||∇||=4.61e+0, α=1.0000, history=10
Iteration 13: cost=5.610084, ||∇||=6.78e+0, α=1.0000, history=10
Iteration 14: cost=5.491398, ||∇||=6.49e+0, α=1.0000, history=10
Iteration 15: cost=5.355829, ||∇||=6.90e+0, α=1.0000, history=10
Iteration 16: cost=5.202067, ||∇||=6.63e+0, α=1.0000, history=10
Iteration 17: cost=5.065828, ||∇||=9.73e+0, α=1.0000, history=10
Iteration 18: cost=4.931476, ||∇||=1.06e+1, α=1.0000, history=10
Iteration 19: cost=4.780544, ||∇||=8.76e+0, α=1.0000, history=10
Iteration 20: cost=4.676933, ||∇||=6.97e+0, α=1.0000, history=10
Chunk complete: 20/40, energy=4.677e+0, reason: Maximum iterations reached

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould work with subdivision from level 1 to 2
[22m[39mL-BFGS Optimization
Initial: cost=4.676933, ||∇||=6.97e+0
Iteration 1: cost=4.633477, ||∇||=8.70e+0, α=0.0039, history=1
Iteration 2: cost=4.584936, ||∇||=4.11e+0, α=1.0000, history=2
Iteration 3: cost=4.561159, ||∇||=3.42e+0, α=1.0000, history=3
Iteration 4: cost=4.519337, ||∇||=4.40e+0, α=1.0000, history=4
Iteration 5: cost=4.485711, ||∇||=7.58e+0, α=1.0000, history=5
Iteration 6: cost=4.441711, ||∇||=5.11e+0, α=1.0000, history=6
Iteration 7: cost=4.415187, ||∇||=3.60e+0, α=1.0000, history=7
Iteration 8: cost=4.387359, ||∇||=3.87e+0, α=1.0000, history=8
Iteration 9: cost=4.363135, ||∇||=3.88e+0, α=1.0000, history=9
Iteration 10: cost=4.334284, ||∇||=3.63e+0, α=1.0000, history=10
Iteration 11: cost=4.299008, ||∇||=4.30e+0, α=1.0000, history=10
Iteration 12: cost=4.259337, ||∇||=4.62e+0, α=1.0000, history=10
Iteration 13: cost=4.226335, ||∇||=5.10e+0, α=1.0000, history=10
Iteration 14: cost=4.189943, ||∇||=4.01e+0, α=1.0000, history=10
Iteration 15: cost=4.141245, ||∇||=4.50e+0, α=1.0000, history=10
Iteration 16: cost=4.099174, ||∇||=5.68e+0, α=1.0000, history=10
Iteration 17: cost=4.050443, ||∇||=4.93e+0, α=1.0000, history=10
Iteration 18: cost=3.990919, ||∇||=6.55e+0, α=1.0000, history=10
Iteration 19: cost=3.931855, ||∇||=9.19e+0, α=1.0000, history=10
Iteration 20: cost=3.889415, ||∇||=9.78e+0, α=1.0000, history=10
Chunk complete: 40/40, energy=3.889e+0, reason: Maximum iterations reached

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould work with subdivision from level 1 to 2
[22m[39mLevel 1 complete: 40 iterations, energy=3.889e+0
Convergence: Maximum iterations reached
Subdividing 1 → 2...

--- Level 2 (642 vertices, 1280 faces) ---
Energy: Covariance (Smallest Eigenvalue) (fine phase)
Using Covariance (Smallest Eigenvalue) energy (non-compiled)...
L-BFGS Optimization
Initial: cost=171.956486, ||∇||=4.71e+2
Iteration 1: cost=123.213582, ||∇||=4.04e+2, α=0.0005, history=1
Iteration 2: cost=100.952228, ||∇||=2.81e+2, α=1.0000, history=2
Iteration 3: cost=89.174559, ||∇||=2.63e+2, α=1.0000, history=3
Iteration 4: cost=82.077744, ||∇||=2.17e+2, α=1.0000, history=4
Iteration 5: cost=75.764988, ||∇||=1.63e+2, α=1.0000, history=5
Iteration 6: cost=70.708060, ||∇||=2.06e+2, α=1.0000, history=6
Iteration 7: cost=67.493576, ||∇||=1.86e+2, α=1.0000, history=7
Iteration 8: cost=64.575105, ||∇||=1.20e+2, α=1.0000, history=8
Iteration 9: cost=61.877365, ||∇||=1.55e+2, α=1.0000, history=9
Iteration 10: cost=59.269722, ||∇||=1.42e+2, α=1.0000, history=10
Iteration 11: cost=56.819828, ||∇||=1.50e+2, α=1.0000, history=10
Iteration 12: cost=54.655112, ||∇||=1.30e+2, α=1.0000, history=10
Iteration 13: cost=52.374484, ||∇||=1.33e+2, α=1.0000, history=10
Iteration 14: cost=50.219791, ||∇||=1.29e+2, α=1.0000, history=10
Iteration 15: cost=48.081639, ||∇||=1.06e+2, α=1.0000, history=10
Iteration 16: cost=46.116389, ||∇||=1.11e+2, α=1.0000, history=10
Iteration 17: cost=44.323891, ||∇||=1.52e+2, α=1.0000, history=10
Iteration 18: cost=44.183406, ||∇||=1.49e+2, α=0.0625, history=10
Iteration 19: cost=43.588068, ||∇||=4.25e+2, α=1.0000, history=10
Iteration 20: cost=43.561279, ||∇||=2.45e+2, α=0.5000, history=10
Chunk complete: 20/40, energy=4.356e+1, reason: Maximum iterations reached

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould work with subdivision from level 1 to 2
[22m[39mL-BFGS Optimization
Initial: cost=43.561279, ||∇||=2.45e+2
Iteration 1: cost=43.452695, ||∇||=2.05e+2, α=0.0000, history=1
Iteration 2: cost=43.418752, ||∇||=1.08e+2, α=1.0000, history=2
Chunk complete: 22/40, energy=4.342e+1, reason: Line search failed to find acceptable step

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould work with subdivision from level 1 to 2
[22m[39mLevel 2 complete: 22 iterations, energy=4.342e+1
Convergence: Line search failed to find acceptable step

=== Multi-Resolution Complete ===
Total iterations: 62
Total function evaluations: 137
Final level: 2
Final vertices: 642

[90mstdout[2m | test/multi-resolution-optimization.spec.ts[2m > [22m[2mMulti-Resolution Optimization[2m > [22m[2mshould work with subdivision from level 1 to 2
[22m[39m
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
RESULTS:
  Developability: 8.6%
  Regions: 5
  Quality: 1.7% per region
  Optimization levels: 1 → 2
  Energies: 3.89e+0 → 4.34e+1
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


 [31m❯[39m test/multi-resolution-optimization.spec.ts [2m([22m[2m2 tests[22m[2m | [22m[31m1 failed[39m[2m)[22m[33m 153893[2mms[22m[39m
   [33m[2m✓[22m[39m Multi-Resolution Optimization[2m > [22mshould reduce fragmentation compared to single-level optimization [33m 34211[2mms[22m[39m
[31m   [31m×[31m Multi-Resolution Optimization[2m > [22mshould work with subdivision from level 1 to 2[39m[33m 119676[2mms[22m[39m
[31m     → expected 8.566978193146417 to be greater than 10[39m

[31m⎯⎯⎯⎯⎯⎯[39m[1m[41m Failed Tests 12 [49m[22m[31m⎯⎯⎯⎯⎯⎯⎯[39m

[41m[1m FAIL [22m[49m test/combinatorial-covariance-energy.spec.ts[2m > [22mCombinatorial Energy (E^P)[2m > [22mshould reduce energy during optimization
[31m[1mAssertionError[22m: expected 0 to be greater than 0[39m
[36m [2m❯[22m test/combinatorial-covariance-energy.spec.ts:[2m155:44[22m[39m
    [90m153| [39m
    [90m154| [39m    // Developability should improve (even with different energy funct…
    [90m155| [39m    expect(finalMetrics.developabilityPct).toBeGreaterThan(initialMetr…
    [90m   | [39m                                           [31m^[39m
    [90m156| [39m  })[33m;[39m
    [90m157| [39m})[33m;[39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/covariance-optimization.spec.ts[2m > [22mCovariance Energy Optimization Test[2m > [22mshould produce good regions with improved covariance energy
[31m[1mAssertionError[22m: expected 0 to be greater than 8.024691358024691[39m
[36m [2m❯[22m test/covariance-optimization.spec.ts:[2m82:22[22m[39m
    [90m 80| [39m    [90m// Expectations[39m
    [90m 81| [39m    [34mexpect[39m(finalEnergy)[33m.[39m[34mtoBeLessThan[39m(initialEnergy)[33m;[39m
    [90m 82| [39m    [34mexpect[39m(finalDev)[33m.[39m[34mtoBeGreaterThan[39m(initialDev)[33m;[39m
    [90m   | [39m                     [31m^[39m
    [90m 83| [39m
    [90m 84| [39m    // Check for fragmentation - should have reasonable number of regi…

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/eigen-proxy-energy.spec.ts[2m > [22mEigenvalue Proxy Energy[2m > [22mshould compare eigenproxy with variance and bounding box
[31m[1mAssertionError[22m: expected 0 to be greater than 0[39m
[36m [2m❯[22m test/eigen-proxy-energy.spec.ts:[2m132:38[22m[39m
    [90m130| [39m    [90m// All should improve developability and run multiple iterations[39m
    [90m131| [39m    [35mfor[39m ([35mconst[39m type [35mof[39m energyTypes) {
    [90m132| [39m      expect(results[type].finalDev).toBeGreaterThan(results[type].ini…
    [90m   | [39m                                     [31m^[39m
    [90m133| [39m      [34mexpect[39m(results[type][33m.[39miterations)[33m.[39m[34mtoBeGreaterThan[39m([34m3[39m)[33m;[39m
    [90m134| [39m    }

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/mesh-pattern-bug.spec.ts[2m > [22mMesh Pattern Bug[2m > [22mshould handle cross product and dot product pattern
[31m[1mError[22m: Division by zero or near-zero encountered in div: denominator=1.3877787807814457e-17[39m
[36m [2m❯[22m Function.div src/ValueArithmetic.ts:[2m60:13[22m[39m
    [90m 58| [39m  [35mstatic[39m [34mdiv[39m(a[33m:[39m [33mValue[39m[33m,[39m b[33m:[39m [33mValue[39m[33m,[39m eps [33m=[39m [34m1e-12[39m)[33m:[39m [33mValue[39m {
    [90m 59| [39m    [35mif[39m ([33mMath[39m[33m.[39m[34mabs[39m(b[33m.[39mdata) [33m<[39m eps) {
    [90m 60| [39m      throw new Error(`Division by zero or near-zero encountered in di…
    [90m   | [39m            [31m^[39m
    [90m 61| [39m    }
    [90m 62| [39m    [35mconst[39m safe [33m=[39m b[33m.[39mdata[33m;[39m
[90m [2m❯[22m Function.div src/V.ts:[2m91:27[22m[39m
[90m [2m❯[22m Vec3.get normalized [as normalized] src/Vec3.ts:[2m45:23[22m[39m
[90m [2m❯[22m test/mesh-pattern-bug.spec.ts:[2m51:46[22m[39m
[90m [2m❯[22m Function.compile src/CompiledFunctions.ts:[2m78:28[22m[39m
[90m [2m❯[22m test/mesh-pattern-bug.spec.ts:[2m25:40[22m[39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/multi-resolution-optimization.spec.ts[2m > [22mMulti-Resolution Optimization[2m > [22mshould work with subdivision from level 1 to 2
[31m[1mAssertionError[22m: expected 8.566978193146417 to be greater than 10[39m
[36m [2m❯[22m test/multi-resolution-optimization.spec.ts:[2m153:17[22m[39m
    [90m151| [39m    [34mexpect[39m(result[33m.[39msuccess)[33m.[39m[34mtoBe[39m([35mtrue[39m)[33m;[39m
    [90m152| [39m    expect(regions).toBeLessThan(30); // Should avoid excessive fragme…
    [90m153| [39m    expect(dev).toBeGreaterThan(10); // Should achieve some developabi…
    [90m   | [39m                [31m^[39m
    [90m154| [39m  })[33m;[39m
    [90m155| [39m})[33m;[39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/NonlinearLeastSquares.comparison.spec.ts[2m > [22mNonlinear Least Squares vs Gradient Descent Comparison[2m > [22mshould compare on 3D distance constraint problem (30 points)
[31m[1mError[22m: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".[39m
[36m [2m❯[22m test/NonlinearLeastSquares.comparison.spec.ts:[2m96:3[22m[39m
    [90m 94| [39m  })[33m;[39m
    [90m 95| [39m
    [90m 96| [39m  it('should compare on 3D distance constraint problem (30 points)', (…
    [90m   | [39m  [31m^[39m
    [90m 97| [39m    [35mconst[39m numPoints [33m=[39m [34m30[39m[33m;[39m
    [90m 98| [39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/NonlinearLeastSquares.comparison.spec.ts[2m > [22mNonlinear Least Squares vs Gradient Descent Comparison[2m > [22mshould compare on circle fitting with 100 noisy points
[31m[1mError[22m: Test timed out in 20000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".[39m
[36m [2m❯[22m test/NonlinearLeastSquares.comparison.spec.ts:[2m201:3[22m[39m
    [90m199| [39m  })[33m;[39m
    [90m200| [39m
    [90m201| [39m  it('should compare on circle fitting with 100 noisy points', { timeo…
    [90m   | [39m  [31m^[39m
    [90m202| [39m    [35mconst[39m numPoints [33m=[39m [34m100[39m[33m;[39m
    [90m203| [39m    [35mconst[39m trueCx [33m=[39m [34m10[39m[33m;[39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/sphere-curvature-analysis.spec.ts[2m > [22mSphere Curvature Analysis[2m > [22mmeasures angle defect at different subdivision levels
[31m[1mError[22m: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".[39m
[36m [2m❯[22m test/sphere-curvature-analysis.spec.ts:[2m8:3[22m[39m
    [90m  6| [39m
    [90m  7| [39m[34mdescribe[39m([32m'Sphere Curvature Analysis'[39m[33m,[39m () [33m=>[39m {
    [90m  8| [39m  [34mit[39m([32m'measures angle defect at different subdivision levels'[39m[33m,[39m () [33m=>[39m {
    [90m   | [39m  [31m^[39m
    [90m  9| [39m    console.log('\nAngle defect on unit spheres (adaptive threshold):\…
    [90m 10| [39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/kernel-reuse/graph-canonicalization.spec.ts[2m > [22mGraph Canonicalization[2m > [22mshould match commutative reorderings: a+b == b+a
[31m[1mAssertionError[22m: expected '0g,1g|n2:(+,0g,1g)' to be '0g,1g|n2:(+,1g,0g)' // Object.is equality[39m

Expected: [32m"0g,1g|n2:(+,[7m1[27mg,[7m0[27mg)"[39m
Received: [31m"0g,1g|n2:(+,[7m0[27mg,[7m1[27mg)"[39m

[36m [2m❯[22m test/kernel-reuse/graph-canonicalization.spec.ts:[2m113:20[22m[39m
    [90m111| [39m    [35mconst[39m { canon[33m:[39m canon2 } [33m=[39m [34mcanonicalizeGraphNoSort[39m(graph2[33m,[39m [a[33m,[39m b])[33m;[39m
    [90m112| [39m
    [90m113| [39m    [34mexpect[39m(canon1)[33m.[39m[34mtoBe[39m(canon2)[33m;[39m
    [90m   | [39m                   [31m^[39m
    [90m114| [39m  })[33m;[39m
    [90m115| [39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/kernel-reuse/graph-canonicalization.spec.ts[2m > [22mGraph Canonicalization[2m > [22mshould match cos(a)+sin(b) == sin(b)+cos(a)
[31m[1mAssertionError[22m: expected '0g,1g|n3:(cos,0g);n4:(sin,1g);n2:(+,n…' to be '0g,1g|n3:(sin,1g);n4:(cos,0g);n2:(+,n…' // Object.is equality[39m

Expected: [32m"0g,1g|n3:([7msin,1[27mg);n4:([7mcos,0[27mg);n2:(+,n3,n4)"[39m
Received: [31m"0g,1g|n3:([7mcos,0[27mg);n4:([7msin,1[27mg);n2:(+,n3,n4)"[39m

[36m [2m❯[22m test/kernel-reuse/graph-canonicalization.spec.ts:[2m141:20[22m[39m
    [90m139| [39m    [35mconst[39m { canon[33m:[39m canon2 } [33m=[39m [34mcanonicalizeGraphNoSort[39m(graph2[33m,[39m [a[33m,[39m b])[33m;[39m
    [90m140| [39m
    [90m141| [39m    [34mexpect[39m(canon1)[33m.[39m[34mtoBe[39m(canon2)[33m;[39m
    [90m   | [39m                   [31m^[39m
    [90m142| [39m    [34mexpect[39m(canon1)[33m.[39m[34mtoContain[39m([32m'(cos'[39m)[33m;[39m
    [90m143| [39m    [34mexpect[39m(canon1)[33m.[39m[34mtoContain[39m([32m'(sin'[39m)[33m;[39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/12]⎯[22m[39m

[41m[1m FAIL [22m[49m test/kernel-reuse/graph-canonicalization.spec.ts[2m > [22mGraph Canonicalization[2m > [22mshould handle single node graph
[31m[1mAssertionError[22m: expected '0g|' to be '0g|0g' // Object.is equality[39m

Expected: [32m"0g|[7m0g[27m"[39m
Received: [31m"0g|"[39m

[36m [2m❯[22m test/kernel-reuse/graph-canonicalization.spec.ts:[2m151:19[22m[39m
    [90m149| [39m    [35mconst[39m { canon } [33m=[39m [34mcanonicalizeGraphNoSort[39m(a[33m,[39m [a])[33m;[39m
    [90m150| [39m
    [90m151| [39m    [34mexpect[39m(canon)[33m.[39m[34mtoBe[39m([32m'0g|0g'[39m)[33m;[39m
    [90m   | [39m                  [31m^[39m
    [90m152| [39m  })[33m;[39m
    [90m153| [39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/12]⎯[22m[39m

[41m[1m FAIL [22m[49m demos/developable-sphere/test/contiguousComparison.test.ts[2m > [22mBimodal vs Contiguous Energy Comparison[2m > [22mshould compare quasi-random bimodal vs contiguous bimodal
[31m[1mError[22m: Unknown energy type: bimodal. Available: Bimodal Variance (Spatial Midpoint), Covariance (Smallest Eigenvalue), Bimodal Alignment (Random Edge Split), Bimodal Alignment (Ridge Detection), Bimodal Alignment (Spatial Midpoint), Bounding Box Spread, Combinatorial (E^P), Contiguous Bimodal Variance, Eigenvalue Proxy (Trace - Frobenius), Fast Covariance (SGD)[39m
[36m [2m❯[22m DevelopableOptimizer.optimize demos/developable-sphere/src/optimization/DevelopableOptimizer.ts:[2m94:13[22m[39m
    [90m 92| [39m    [35mconst[39m energyFunction [33m=[39m [33mEnergyRegistry[39m[33m.[39m[35mget[39m(energyType [33m||[39m [32m''[39m)[33m;[39m
    [90m 93| [39m    [35mif[39m ([33m![39menergyFunction) {
    [90m 94| [39m      throw new Error(`Unknown energy type: ${energyType}. Available: …
    [90m   | [39m            [31m^[39m
    [90m 95| [39m    }
    [90m 96| [39m
[90m [2m❯[22m demos/developable-sphere/test/contiguousComparison.test.ts:[2m28:32[22m[39m

[31m[2m⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/12]⎯[22m[39m


[2m Test Files [22m [1m[31m9 failed[39m[22m[2m | [22m[1m[32m65 passed[39m[22m[2m | [22m[33m1 skipped[39m[90m (75)[39m
[2m      Tests [22m [1m[31m12 failed[39m[22m[2m | [22m[1m[32m408 passed[39m[22m[2m | [22m[33m7 skipped[39m[90m (427)[39m
[2m   Start at [22m 12:59:15
[2m   Duration [22m 157.97s[2m (transform 18.77s, setup 0ms, collect 47.53s, tests 296.23s, environment 156ms, prepare 57.43s)[22m

